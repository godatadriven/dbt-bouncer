{
    "metadata": {
        "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json",
        "dbt_version": "1.8.4",
        "generated_at": "2024-07-24T20:15:02.800589Z",
        "invocation_id": "301b1bda-cca0-40ec-9254-ba15866f004b",
        "env": {},
        "project_name": "dbt_bouncer_test_project",
        "project_id": "52e2b356b2b0bade408c5d8ef6aa0066",
        "user_id": "1aa00824-5aec-45e1-a1a3-b8a868297099",
        "send_anonymous_usage_stats": true,
        "adapter_type": "duckdb"
    },
    "nodes": {
        "model.dbt_bouncer_test_project.stg_model_1": {
            "database": "memory",
            "schema": "main",
            "name": "stg_model_1",
            "resource_type": "model",
            "package_name": "dbt_bouncer_test_project",
            "path": "staging/stg_model_1.sql",
            "original_file_path": "models/staging/stg_model_1.sql",
            "unique_id": "model.dbt_bouncer_test_project.stg_model_1",
            "fqn": [
                "dbt_bouncer_test_project",
                "staging",
                "stg_model_1"
            ],
            "alias": "stg_model_1",
            "checksum": {
                "name": "sha256",
                "checksum": "3ea0f972fa1b56aa2dc2f56ee784b6a5796312f9a813d59ae70fd8855f10d16d"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "Super basic model that has a description and a test",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_bouncer_test_project://models/staging/_schema.yml",
            "build_path": null,
            "unrendered_config": {
                "dbt_bouncer": null
            },
            "created_at": 1721827582.6229491,
            "relation_name": "\"memory\".\"main\".\"stg_model_1\"",
            "raw_code": "select 1 as id",
            "language": "sql",
            "refs": [],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_bouncer_test_project.stg_model_2": {
            "database": "memory",
            "schema": "main",
            "name": "stg_model_2",
            "resource_type": "model",
            "package_name": "dbt_bouncer_test_project",
            "path": "staging/stg_model_2.sql",
            "original_file_path": "models/staging/stg_model_2.sql",
            "unique_id": "model.dbt_bouncer_test_project.stg_model_2",
            "fqn": [
                "dbt_bouncer_test_project",
                "staging",
                "stg_model_2"
            ],
            "alias": "stg_model_2",
            "checksum": {
                "name": "sha256",
                "checksum": "3ea0f972fa1b56aa2dc2f56ee784b6a5796312f9a813d59ae70fd8855f10d16d"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "Super basic model that has a description and a test",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_bouncer_test_project://models/staging/_schema.yml",
            "build_path": null,
            "unrendered_config": {
                "dbt_bouncer": null
            },
            "created_at": 1721827582.623814,
            "relation_name": "\"memory\".\"main\".\"stg_model_2\"",
            "raw_code": "select 1 as id",
            "language": "sql",
            "refs": [],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_bouncer_test_project.int_model_1": {
            "database": "memory",
            "schema": "main",
            "name": "int_model_1",
            "resource_type": "model",
            "package_name": "dbt_bouncer_test_project",
            "path": "intermediate/int_model_1.sql",
            "original_file_path": "models/intermediate/int_model_1.sql",
            "unique_id": "model.dbt_bouncer_test_project.int_model_1",
            "fqn": [
                "dbt_bouncer_test_project",
                "intermediate",
                "int_model_1"
            ],
            "alias": "int_model_1",
            "checksum": {
                "name": "sha256",
                "checksum": "3ea0f972fa1b56aa2dc2f56ee784b6a5796312f9a813d59ae70fd8855f10d16d"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "Super basic model that has a description and a test",
            "columns": {
                "id": {
                    "name": "id",
                    "description": "",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_bouncer_test_project://models/intermediate/_schema.yml",
            "build_path": null,
            "unrendered_config": {
                "dbt_bouncer": null
            },
            "created_at": 1721827582.692958,
            "relation_name": "\"memory\".\"main\".\"int_model_1\"",
            "raw_code": "select 1 as id",
            "language": "sql",
            "refs": [],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": []
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.stg_nodes": {
            "database": "memory",
            "schema": "main",
            "name": "stg_nodes",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "staging/graph/stg_nodes.sql",
            "original_file_path": "models/staging/graph/stg_nodes.sql",
            "unique_id": "model.dbt_project_evaluator.stg_nodes",
            "fqn": [
                "dbt_project_evaluator",
                "staging",
                "graph",
                "stg_nodes"
            ],
            "alias": "stg_nodes",
            "checksum": {
                "name": "sha256",
                "checksum": "a25693108fbf426ada14f33235fe50f6cb1d677ae9307e7221423c63edf05654"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [
                    {
                        "sql": "{{ insert_resources_from_graph(this, resource_type='nodes') }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "post-hook": [
                    "{{ insert_resources_from_graph(this, resource_type='nodes') }}"
                ],
                "dbt_bouncer": null
            },
            "created_at": 1721827581.8754292,
            "relation_name": "\"memory\".\"main\".\"stg_nodes\"",
            "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='nodes') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt.type_string() }}) as unique_id,\n    cast(null as {{ dbt.type_string() }}) as name,\n    cast(null as {{ dbt.type_string() }}) as resource_type,\n    cast(null as {{ dbt.type_string() }}) as file_path,\n    cast(True as boolean) as is_enabled,\n    cast(null as {{ dbt.type_string() }}) as materialized,\n    cast(null as {{ dbt.type_string() }}) as on_schema_change,\n    cast(null as {{ dbt.type_string() }}) as model_group,\n    cast(null as {{ dbt.type_string() }}) as access,\n    cast(null as {{ dbt.type_string() }}) as latest_version,\n    cast(null as {{ dbt.type_string() }}) as version,\n    cast(null as {{ dbt.type_string() }}) as deprecation_date,\n    cast(True as boolean) as is_contract_enforced,\n    cast(0 as {{ dbt.type_int() }}) as total_defined_columns,\n    cast(0 as {{ dbt.type_int() }}) as total_described_columns,\n    cast(null as {{ dbt.type_string() }}) as database,\n    cast(null as {{ dbt.type_string() }}) as schema,\n    cast(null as {{ dbt.type_string() }}) as package_name,\n    cast(null as {{ dbt.type_string() }}) as alias,\n    cast(True as boolean) as is_described,\n    cast(null as {{ dbt.type_string() }}) as column_name,\n    cast(null as {{ dbt.type_string() }}) as meta,\n    cast(null as {{ dbt.type_string() }}) as hard_coded_references,\n    cast(null as {{ dbt.type_int() }}) as number_lines,\n    cast(null as {{ dbt.type_float() }}) as sql_complexity,\n    cast(null as {{ dbt.type_string() }}) as macro_dependencies,\n    cast(True as boolean) as is_generic_test,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false",
            "language": "sql",
            "refs": [],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt.type_int",
                    "macro.dbt.type_float",
                    "macro.dbt_project_evaluator.insert_resources_from_graph"
                ],
                "nodes": []
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.stg_node_relationships": {
            "database": "memory",
            "schema": "main",
            "name": "stg_node_relationships",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "staging/graph/stg_node_relationships.sql",
            "original_file_path": "models/staging/graph/stg_node_relationships.sql",
            "unique_id": "model.dbt_project_evaluator.stg_node_relationships",
            "fqn": [
                "dbt_project_evaluator",
                "staging",
                "graph",
                "stg_node_relationships"
            ],
            "alias": "stg_node_relationships",
            "checksum": {
                "name": "sha256",
                "checksum": "3b1dff9088982b74dc0917adbd9567d164e56b85c9fec26adfc961be2b22ac63"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "dbt_bouncer": null
            },
            "created_at": 1721827581.9216645,
            "relation_name": "\"memory\".\"main\".\"stg_node_relationships\"",
            "raw_code": "with \n\n_base_node_relationships as (\n    select * from {{ ref('base_node_relationships') }}\n),\n\nfinal as (\n    select \n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from _base_node_relationships\n)\n\n-- we need distinct as the graph lists relationships multiple times if they are ref'd multiple times\nselect distinct * from final",
            "language": "sql",
            "refs": [
                {
                    "name": "base_node_relationships",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.generate_surrogate_key"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.base_node_relationships"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.stg_metrics": {
            "database": "memory",
            "schema": "main",
            "name": "stg_metrics",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "staging/graph/stg_metrics.sql",
            "original_file_path": "models/staging/graph/stg_metrics.sql",
            "unique_id": "model.dbt_project_evaluator.stg_metrics",
            "fqn": [
                "dbt_project_evaluator",
                "staging",
                "graph",
                "stg_metrics"
            ],
            "alias": "stg_metrics",
            "checksum": {
                "name": "sha256",
                "checksum": "c47021f9a0b97ad2ab8c232fdd1c8bfc969d7bd59f700d37771c8c0de77bbed4"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [
                    {
                        "sql": "{{ insert_resources_from_graph(this, resource_type='metrics') }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "post-hook": [
                    "{{ insert_resources_from_graph(this, resource_type='metrics') }}"
                ],
                "dbt_bouncer": null
            },
            "created_at": 1721827581.9382384,
            "relation_name": "\"memory\".\"main\".\"stg_metrics\"",
            "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='metrics') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt.type_string() }}) as unique_id,\n    cast(null as {{ dbt.type_string() }}) as name,\n    cast(null as {{ dbt.type_string() }}) as resource_type,\n    cast(null as {{ dbt.type_string() }}) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as {{ dbt.type_string() }}) as metric_type,\n    cast(null as {{ dbt.type_string() }}) as label,\n    cast(null as {{ dbt.type_string() }}) as package_name,\n    cast(null as {{ dbt.type_string() }}) as metric_filter,\n    cast(null as {{ dbt.type_string() }}) as metric_measure,\n    cast(null as {{ dbt.type_string() }}) as metric_measure_alias,\n    cast(null as {{ dbt.type_string() }}) as numerator,\n    cast(null as {{ dbt.type_string() }}) as denominator,\n    cast(null as {{ dbt.type_string() }}) as expr,\n    cast(null as {{ dbt.type_string() }}) as metric_window,\n    cast(null as {{ dbt.type_string() }}) as grain_to_date,\n    cast(null as {{ dbt.type_string() }}) as meta\n\nfrom dummy_cte\nwhere false",
            "language": "sql",
            "refs": [],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt_project_evaluator.insert_resources_from_graph"
                ],
                "nodes": []
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.stg_exposures": {
            "database": "memory",
            "schema": "main",
            "name": "stg_exposures",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "staging/graph/stg_exposures.sql",
            "original_file_path": "models/staging/graph/stg_exposures.sql",
            "unique_id": "model.dbt_project_evaluator.stg_exposures",
            "fqn": [
                "dbt_project_evaluator",
                "staging",
                "graph",
                "stg_exposures"
            ],
            "alias": "stg_exposures",
            "checksum": {
                "name": "sha256",
                "checksum": "e3d1d84450b9d43a0632aa52fcd8c5e1eecd908119c6e68f79d7be6ecbbadc92"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [
                    {
                        "sql": "{{ insert_resources_from_graph(this, resource_type='exposures') }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "post-hook": [
                    "{{ insert_resources_from_graph(this, resource_type='exposures') }}"
                ],
                "dbt_bouncer": null
            },
            "created_at": 1721827581.9581125,
            "relation_name": "\"memory\".\"main\".\"stg_exposures\"",
            "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='exposures') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt.type_string() }} ) as unique_id,\n    cast(null as {{ dbt.type_string() }} ) as name,\n    cast(null as {{ dbt.type_string() }} ) as resource_type,\n    cast(null as {{ dbt.type_string() }} ) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as {{ dbt.type_string() }} ) as exposure_type,\n    cast(null as {{ dbt.type_string() }} ) as maturity,\n    cast(null as {{ dbt.type_string() }} ) as package_name,\n    cast(null as {{ dbt.type_string() }} ) as url,\n    cast(null as {{ dbt.type_string() }} ) as owner_name,\n    cast(null as {{ dbt.type_string() }} ) as owner_email,\n    cast(null as {{ dbt.type_string() }} ) as meta\n\nfrom dummy_cte\nwhere false",
            "language": "sql",
            "refs": [],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt_project_evaluator.insert_resources_from_graph"
                ],
                "nodes": []
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.stg_sources": {
            "database": "memory",
            "schema": "main",
            "name": "stg_sources",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "staging/graph/stg_sources.sql",
            "original_file_path": "models/staging/graph/stg_sources.sql",
            "unique_id": "model.dbt_project_evaluator.stg_sources",
            "fqn": [
                "dbt_project_evaluator",
                "staging",
                "graph",
                "stg_sources"
            ],
            "alias": "stg_sources",
            "checksum": {
                "name": "sha256",
                "checksum": "fb212f965b115ee0600184ab12e205754211ebf47bc23bcc44285ec5e68e61ff"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [
                    {
                        "sql": "{{ insert_resources_from_graph(this, resource_type='sources') }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "post-hook": [
                    "{{ insert_resources_from_graph(this, resource_type='sources') }}"
                ],
                "dbt_bouncer": null
            },
            "created_at": 1721827581.9759629,
            "relation_name": "\"memory\".\"main\".\"stg_sources\"",
            "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='sources') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt.type_string() }}) as unique_id,\n    cast(null as {{ dbt.type_string() }}) as name,\n    cast(null as {{ dbt.type_string() }}) as file_path,\n    cast(null as {{ dbt.type_string() }}) as alias,\n    cast(null as {{ dbt.type_string() }}) as resource_type,\n    cast(null as {{ dbt.type_string() }}) as source_name,\n    cast(True as boolean) as is_source_described,\n    cast(True as boolean) as is_described,\n    cast(True as boolean) as is_enabled,\n    cast(null as {{ dbt.type_string() }}) as loaded_at_field,\n    cast(null as {{ dbt.type_string() }}) as database,\n    cast(null as {{ dbt.type_string() }}) as schema,\n    cast(null as {{ dbt.type_string() }}) as package_name,\n    cast(null as {{ dbt.type_string() }}) as loader,\n    cast(null as {{ dbt.type_string() }}) as identifier,\n    cast(null as {{ dbt.type_string() }})  as meta,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false",
            "language": "sql",
            "refs": [],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt_project_evaluator.insert_resources_from_graph"
                ],
                "nodes": []
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.stg_columns": {
            "database": "memory",
            "schema": "main",
            "name": "stg_columns",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "staging/graph/stg_columns.sql",
            "original_file_path": "models/staging/graph/stg_columns.sql",
            "unique_id": "model.dbt_project_evaluator.stg_columns",
            "fqn": [
                "dbt_project_evaluator",
                "staging",
                "graph",
                "stg_columns"
            ],
            "alias": "stg_columns",
            "checksum": {
                "name": "sha256",
                "checksum": "c8f3f73b537d183c2b66a143cf4a5bd6f7e0628c091e82b9938183c1d6c8ab71"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827581.9961908,
            "relation_name": "\"memory\".\"main\".\"stg_columns\"",
            "raw_code": "with\n\nfinal as (\n\n    {{ dbt_utils.union_relations([\n        ref('base_node_columns'),\n        ref('base_source_columns')\n    ])}}\n)\n\nselect * from final",
            "language": "sql",
            "refs": [
                {
                    "name": "base_node_columns",
                    "package": null,
                    "version": null
                },
                {
                    "name": "base_source_columns",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.union_relations"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.base_node_columns",
                    "model.dbt_project_evaluator.base_source_columns"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.stg_exposure_relationships": {
            "database": "memory",
            "schema": "main",
            "name": "stg_exposure_relationships",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "staging/graph/stg_exposure_relationships.sql",
            "original_file_path": "models/staging/graph/stg_exposure_relationships.sql",
            "unique_id": "model.dbt_project_evaluator.stg_exposure_relationships",
            "fqn": [
                "dbt_project_evaluator",
                "staging",
                "graph",
                "stg_exposure_relationships"
            ],
            "alias": "stg_exposure_relationships",
            "checksum": {
                "name": "sha256",
                "checksum": "80d348798f7b7c4a00990729922ccdd248ff8f8b29ee3dbffdd6589315d3930f"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.0215197,
            "relation_name": "\"memory\".\"main\".\"stg_exposure_relationships\"",
            "raw_code": "with \n\n_base_exposure_relationships as (\n    select * from {{ ref('base_exposure_relationships') }}\n),\n\nfinal as (\n    select \n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from _base_exposure_relationships\n)\n\nselect distinct * from final",
            "language": "sql",
            "refs": [
                {
                    "name": "base_exposure_relationships",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.generate_surrogate_key"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.base_exposure_relationships"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.stg_metric_relationships": {
            "database": "memory",
            "schema": "main",
            "name": "stg_metric_relationships",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "staging/graph/stg_metric_relationships.sql",
            "original_file_path": "models/staging/graph/stg_metric_relationships.sql",
            "unique_id": "model.dbt_project_evaluator.stg_metric_relationships",
            "fqn": [
                "dbt_project_evaluator",
                "staging",
                "graph",
                "stg_metric_relationships"
            ],
            "alias": "stg_metric_relationships",
            "checksum": {
                "name": "sha256",
                "checksum": "0351601c92dd9b5b4b0a4fac69e491f2c6fd568cf38aeb1040947d6b3ecbb9ac"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.0275357,
            "relation_name": "\"memory\".\"main\".\"stg_metric_relationships\"",
            "raw_code": "with \n\n_base_metric_relationships as (\n    select * from {{ ref('base_metric_relationships') }}\n),\n\nfinal as (\n    select \n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from _base_metric_relationships\n)\n\nselect distinct * from final",
            "language": "sql",
            "refs": [
                {
                    "name": "base_metric_relationships",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.generate_surrogate_key"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.base_metric_relationships"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.base_source_columns": {
            "database": "memory",
            "schema": "main",
            "name": "base_source_columns",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "staging/graph/base/base_source_columns.sql",
            "original_file_path": "models/staging/graph/base/base_source_columns.sql",
            "unique_id": "model.dbt_project_evaluator.base_source_columns",
            "fqn": [
                "dbt_project_evaluator",
                "staging",
                "graph",
                "base",
                "base_source_columns"
            ],
            "alias": "base_source_columns",
            "checksum": {
                "name": "sha256",
                "checksum": "66c4170f9b1182f73fad59458f9ae6a145bc0377f1b304c6e3420e762709a4f8"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [
                    {
                        "sql": "{{ insert_resources_from_graph(this, resource_type='sources', columns=True) }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "post-hook": [
                    "{{ insert_resources_from_graph(this, resource_type='sources', columns=True) }}"
                ],
                "dbt_bouncer": null
            },
            "created_at": 1721827582.0345573,
            "relation_name": "\"memory\".\"main\".\"base_source_columns\"",
            "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='sources', columns=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt.type_string() }}) as node_unique_id,\n    cast(null as {{ dbt.type_string()}}) as name,\n    cast(null as {{ dbt_project_evaluator.type_large_string()}}) as description,\n    cast(null as {{ dbt.type_string()}}) as data_type,\n    cast(null as {{ dbt.type_string()}}) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as {{ dbt.type_int() }}) as constraints_count,\n    cast(null as {{ dbt.type_string()}}) as quote\n\nfrom dummy_cte\nwhere false",
            "language": "sql",
            "refs": [],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt_project_evaluator.type_large_string",
                    "macro.dbt.type_int",
                    "macro.dbt_project_evaluator.insert_resources_from_graph"
                ],
                "nodes": []
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.base_exposure_relationships": {
            "database": "memory",
            "schema": "main",
            "name": "base_exposure_relationships",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "staging/graph/base/base_exposure_relationships.sql",
            "original_file_path": "models/staging/graph/base/base_exposure_relationships.sql",
            "unique_id": "model.dbt_project_evaluator.base_exposure_relationships",
            "fqn": [
                "dbt_project_evaluator",
                "staging",
                "graph",
                "base",
                "base_exposure_relationships"
            ],
            "alias": "base_exposure_relationships",
            "checksum": {
                "name": "sha256",
                "checksum": "43d70b23da009db4032e146081258b658390c10d8a7443b7f05fa2905bc3972b"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [
                    {
                        "sql": "{{ insert_resources_from_graph(this, resource_type='exposures', relationships=True) }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "post-hook": [
                    "{{ insert_resources_from_graph(this, resource_type='exposures', relationships=True) }}"
                ],
                "dbt_bouncer": null
            },
            "created_at": 1721827582.0522666,
            "relation_name": "\"memory\".\"main\".\"base_exposure_relationships\"",
            "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='exposures', relationships=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt.type_string()}}) as resource_id,\n    cast(null as {{ dbt.type_string()}}) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false",
            "language": "sql",
            "refs": [],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt_project_evaluator.insert_resources_from_graph"
                ],
                "nodes": []
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.base_node_columns": {
            "database": "memory",
            "schema": "main",
            "name": "base_node_columns",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "staging/graph/base/base_node_columns.sql",
            "original_file_path": "models/staging/graph/base/base_node_columns.sql",
            "unique_id": "model.dbt_project_evaluator.base_node_columns",
            "fqn": [
                "dbt_project_evaluator",
                "staging",
                "graph",
                "base",
                "base_node_columns"
            ],
            "alias": "base_node_columns",
            "checksum": {
                "name": "sha256",
                "checksum": "c34c1e44731c82d8fd0167af0f0d6686ced5e43c3dcc95cc1e074be113faf0f4"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [
                    {
                        "sql": "{{ insert_resources_from_graph(this, resource_type='nodes', columns=True) }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "post-hook": [
                    "{{ insert_resources_from_graph(this, resource_type='nodes', columns=True) }}"
                ],
                "dbt_bouncer": null
            },
            "created_at": 1721827582.0681353,
            "relation_name": "\"memory\".\"main\".\"base_node_columns\"",
            "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='nodes', columns=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt.type_string() }}) as node_unique_id,\n    cast(null as {{ dbt.type_string()}}) as name,\n    cast(null as {{ dbt_project_evaluator.type_large_string()}}) as description,\n    cast(null as {{ dbt.type_string()}}) as data_type,\n    cast(null as {{ dbt.type_string()}}) as constraints,\n    cast(True as boolean) as has_not_null_constraint,\n    cast(0 as {{ dbt.type_int() }}) as constraints_count,\n    cast(null as {{ dbt.type_string()}}) as quote\n\nfrom dummy_cte\nwhere false",
            "language": "sql",
            "refs": [],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt_project_evaluator.type_large_string",
                    "macro.dbt.type_int",
                    "macro.dbt_project_evaluator.insert_resources_from_graph"
                ],
                "nodes": []
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.base_node_relationships": {
            "database": "memory",
            "schema": "main",
            "name": "base_node_relationships",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "staging/graph/base/base_node_relationships.sql",
            "original_file_path": "models/staging/graph/base/base_node_relationships.sql",
            "unique_id": "model.dbt_project_evaluator.base_node_relationships",
            "fqn": [
                "dbt_project_evaluator",
                "staging",
                "graph",
                "base",
                "base_node_relationships"
            ],
            "alias": "base_node_relationships",
            "checksum": {
                "name": "sha256",
                "checksum": "73abbe4663c2a2672fcb6b8c037522168e07bd6c4e528f0676f765a03028f884"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [
                    {
                        "sql": "{{ insert_resources_from_graph(this, resource_type='nodes', relationships=True) }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "post-hook": [
                    "{{ insert_resources_from_graph(this, resource_type='nodes', relationships=True) }}"
                ],
                "dbt_bouncer": null
            },
            "created_at": 1721827582.0760307,
            "relation_name": "\"memory\".\"main\".\"base_node_relationships\"",
            "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='nodes', relationships=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt.type_string()}}) as resource_id,\n    cast(null as {{ dbt.type_string()}}) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false",
            "language": "sql",
            "refs": [],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt_project_evaluator.insert_resources_from_graph"
                ],
                "nodes": []
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.base_metric_relationships": {
            "database": "memory",
            "schema": "main",
            "name": "base_metric_relationships",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "staging/graph/base/base_metric_relationships.sql",
            "original_file_path": "models/staging/graph/base/base_metric_relationships.sql",
            "unique_id": "model.dbt_project_evaluator.base_metric_relationships",
            "fqn": [
                "dbt_project_evaluator",
                "staging",
                "graph",
                "base",
                "base_metric_relationships"
            ],
            "alias": "base_metric_relationships",
            "checksum": {
                "name": "sha256",
                "checksum": "e3433f665162baee1d841f2623208dfda3b741d1419fcbe2b613e810a0fe1016"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [
                    {
                        "sql": "{{ insert_resources_from_graph(this, resource_type='metrics', relationships=True) }}",
                        "transaction": true,
                        "index": null
                    }
                ],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "post-hook": [
                    "{{ insert_resources_from_graph(this, resource_type='metrics', relationships=True) }}"
                ],
                "dbt_bouncer": null
            },
            "created_at": 1721827582.082537,
            "relation_name": "\"memory\".\"main\".\"base_metric_relationships\"",
            "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='metrics', relationships=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt.type_string()}}) as resource_id,\n    cast(null as {{ dbt.type_string()}}) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false",
            "language": "sql",
            "refs": [],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt_project_evaluator.insert_resources_from_graph"
                ],
                "nodes": []
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.stg_naming_convention_folders": {
            "database": "memory",
            "schema": "main",
            "name": "stg_naming_convention_folders",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "staging/variables/stg_naming_convention_folders.sql",
            "original_file_path": "models/staging/variables/stg_naming_convention_folders.sql",
            "unique_id": "model.dbt_project_evaluator.stg_naming_convention_folders",
            "fqn": [
                "dbt_project_evaluator",
                "staging",
                "variables",
                "stg_naming_convention_folders"
            ],
            "alias": "stg_naming_convention_folders",
            "checksum": {
                "name": "sha256",
                "checksum": "269b827916875eb1bdc24c13fd0c33735c86aea2cbb2a978bc3668e5c8cb516f"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type == 'redshift' else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.089204,
            "relation_name": "\"memory\".\"main\".\"stg_naming_convention_folders\"",
            "raw_code": "{% set var_model_types = var('model_types') %}\n{% set suffix_folder = '_folder_name' %}\n\n{% set vars_folders = [] %}\n\n{% for model_type in var_model_types %}\n  {% do vars_folders.append(model_type ~ suffix_folder) %}\n{% endfor %}\n\nwith vars_folders_table as (\n    {{ dbt_project_evaluator.loop_vars(vars_folders) }}\n)\n\nselect\n    var_name as folder_name, \n    {{ dbt.replace('var_name', wrap_string_with_quotes(suffix_folder), \"''\") }} as model_type,\n    var_value as folder_name_value\nfrom vars_folders_table",
            "language": "sql",
            "refs": [],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.loop_vars",
                    "macro.dbt_project_evaluator.wrap_string_with_quotes",
                    "macro.dbt.replace"
                ],
                "nodes": []
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.stg_naming_convention_prefixes": {
            "database": "memory",
            "schema": "main",
            "name": "stg_naming_convention_prefixes",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "staging/variables/stg_naming_convention_prefixes.sql",
            "original_file_path": "models/staging/variables/stg_naming_convention_prefixes.sql",
            "unique_id": "model.dbt_project_evaluator.stg_naming_convention_prefixes",
            "fqn": [
                "dbt_project_evaluator",
                "staging",
                "variables",
                "stg_naming_convention_prefixes"
            ],
            "alias": "stg_naming_convention_prefixes",
            "checksum": {
                "name": "sha256",
                "checksum": "2dccea5430120d7f403c4f57d02227545db604d23925f41b474236a4094d8c04"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type == 'redshift' else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.1035998,
            "relation_name": "\"memory\".\"main\".\"stg_naming_convention_prefixes\"",
            "raw_code": "{% set var_model_types = var('model_types') %}\n{% set suffix_model_type = '_prefixes' %}\n\n{% set vars_prefix = [] %}\n\n{% for model_type in var_model_types %}\n  {% do vars_prefix.append(model_type ~ suffix_model_type) %}\n{% endfor %}\n\nwith vars_prefix_table as (\n    {{ dbt_project_evaluator.loop_vars(vars_prefix) }}\n),\n\nparsed as (\n\nselect\n    var_name as prefix_name, \n    {{ dbt.replace('var_name', wrap_string_with_quotes(suffix_model_type) , \"''\") }} as model_type,\n    var_value as prefix_value\nfrom vars_prefix_table\n\n),\n\nfinal as (\n\n    select\n        {{ dbt_utils.generate_surrogate_key(['model_type', 'prefix_value']) }} as unique_id,\n        *\n    from parsed\n\n)\n\nselect * from final",
            "language": "sql",
            "refs": [],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.loop_vars",
                    "macro.dbt_project_evaluator.wrap_string_with_quotes",
                    "macro.dbt.replace",
                    "macro.dbt_utils.generate_surrogate_key"
                ],
                "nodes": []
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": {
            "database": "memory",
            "schema": "main",
            "name": "fct_marts_or_intermediate_dependent_on_source",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/dag/fct_marts_or_intermediate_dependent_on_source.sql",
            "original_file_path": "models/marts/dag/fct_marts_or_intermediate_dependent_on_source.sql",
            "unique_id": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "fct_marts_or_intermediate_dependent_on_source"
            ],
            "alias": "fct_marts_or_intermediate_dependent_on_source",
            "checksum": {
                "name": "sha256",
                "checksum": "22b5ae735f394581929a7a1e5c7eaa3adfb844b135cd9da9f1cd645b8365a48b"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This table shows each parent/child relationship where models in the marts and/or intermediate layer are dependent on source(s).",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7043087,
            "relation_name": "\"memory\".\"main\".\"fct_marts_or_intermediate_dependent_on_source\"",
            "raw_code": "-- cases where a marts/intermediate model directly references a raw source\nwith direct_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_resource_type,\n        child,\n        child_model_type\n    from direct_relationships\n    where parent_resource_type = 'source'\n    and child_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_dag_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_dag_relationships",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": {
            "database": "memory",
            "schema": "main",
            "name": "fct_rejoining_of_upstream_concepts",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/dag/fct_rejoining_of_upstream_concepts.sql",
            "original_file_path": "models/marts/dag/fct_rejoining_of_upstream_concepts.sql",
            "unique_id": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "fct_rejoining_of_upstream_concepts"
            ],
            "alias": "fct_rejoining_of_upstream_concepts",
            "checksum": {
                "name": "sha256",
                "checksum": "0b65d1f66876f2c80f08ed52fa8829e0aa3bc856d29d73cd3966070cf0a343dc"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "\"All cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the  parent's direct children (parent_and_child). Only includes cases where the model \"in between\" the parent and child  has NO other downstream dependencies.\n",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.705856,
            "relation_name": "\"memory\".\"main\".\"fct_rejoining_of_upstream_concepts\"",
            "raw_code": "with all_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type not in ('exposure', 'metric')\n    and child_resource_type not in ('exposure', 'metric')\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- all parent/child relationships where the parent is BOTH the direct parent of the child and the second level parent of the child \nrejoined as (\n    select\n        parent,\n        child\n    from all_relationships\n    group by 1, 2\n    having (sum(case when distance = 1 then 1 else 0 end) >= 1 \n        and sum(case when distance = 2 then 1 else 0 end) >= 1)\n),\n\n-- resources with only one direct child\nsingle_use_resources as (\n    select\n        parent\n    from all_relationships\n    where distance = 1\n    group by 1\n    having count(*) = 1\n),\n\n-- all cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the parent's direct childen (parent_and_child)\ntriad_relationships as (\n    select \n        rejoined.parent,\n        rejoined.child as child,\n        direct_child.parent as parent_and_child\n    from rejoined\n    left join all_relationships as direct_child\n        on rejoined.child = direct_child.child\n        and direct_child.distance = 1\n    left join all_relationships as direct_parent\n        on rejoined.parent = direct_parent.parent\n        and direct_parent.distance = 1\n    where direct_child.parent = direct_parent.child\n),\n\n-- additionally, only includes cases where the model \"in between\" the parent and parent_and_child has NO other downstream dependencies\n-- Note: when the \"in between\" model DOES have downstream dependencies, it's possible this DAG choice has been made to avoid duplicated code and as such is OKAY\nfinal as (\n    select\n        triad_relationships.*,\n        case \n            when single_use_resources.parent is not null then true \n            else false\n        end as is_loop_independent\n    from triad_relationships\n    left join single_use_resources \n        on triad_relationships.parent_and_child = single_use_resources.parent\n),\n\nfinal_filtered as (\n    select * from final\n    where is_loop_independent\n)\n\nselect * from final_filtered\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_dag_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_dag_relationships",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_root_models": {
            "database": "memory",
            "schema": "main",
            "name": "fct_root_models",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/dag/fct_root_models.sql",
            "original_file_path": "models/marts/dag/fct_root_models.sql",
            "unique_id": "model.dbt_project_evaluator.fct_root_models",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "fct_root_models"
            ],
            "alias": "fct_root_models",
            "checksum": {
                "name": "sha256",
                "checksum": "dcb918a48c00b83c29289a874867c20f5b1d6dbf162cb2d1cc35922a34e8d89b"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This table shows each model with 0 direct parents.",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.706207,
            "relation_name": "\"memory\".\"main\".\"fct_root_models\"",
            "raw_code": "-- this model finds cases where a model has 0 direct parents, likely due to a lack of source or ref function\n\nwith model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where child_resource_type = 'model'\n    -- only filter out excluded children nodes\n        -- filtering parents could result in incorrectly flagging nodes that depend on excluded nodes\n    and not child_is_excluded\n    -- exclude required time spine\n    and child != 'metricflow_time_spine'\n),\n\nfinal as (\n    select\n        child\n    from model_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_dag_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_dag_relationships",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_unused_sources": {
            "database": "memory",
            "schema": "main",
            "name": "fct_unused_sources",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/dag/fct_unused_sources.sql",
            "original_file_path": "models/marts/dag/fct_unused_sources.sql",
            "unique_id": "model.dbt_project_evaluator.fct_unused_sources",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "fct_unused_sources"
            ],
            "alias": "fct_unused_sources",
            "checksum": {
                "name": "sha256",
                "checksum": "88929ec8435e38da76fe33265736b8599deca039cb881c0e3e1c1bc9416047df"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This table shows each source with 0 children.",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7075117,
            "relation_name": "\"memory\".\"main\".\"fct_unused_sources\"",
            "raw_code": "-- this model finds cases where a source has no children\n\nwith source_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent\n    from source_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_dag_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_dag_relationships",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_hard_coded_references": {
            "database": "memory",
            "schema": "main",
            "name": "fct_hard_coded_references",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/dag/fct_hard_coded_references.sql",
            "original_file_path": "models/marts/dag/fct_hard_coded_references.sql",
            "unique_id": "model.dbt_project_evaluator.fct_hard_coded_references",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "fct_hard_coded_references"
            ],
            "alias": "fct_hard_coded_references",
            "checksum": {
                "name": "sha256",
                "checksum": "75f6517e5ebea4adde2bfd5973fb6dd14df7b5843bc1d6453ed51b160d729e8a"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This table shows each model that has hard coded references.",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7081604,
            "relation_name": "\"memory\".\"main\".\"fct_hard_coded_references\"",
            "raw_code": "-- this model finds cases where a model has hard coded references\n\nwith models as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nfinal as (\n    select\n        resource_name as model,\n        hard_coded_references\n    from models\n    where hard_coded_references != ''\n)\n\nselect * from final\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_graph_resources",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_graph_resources",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_direct_join_to_source": {
            "database": "memory",
            "schema": "main",
            "name": "fct_direct_join_to_source",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/dag/fct_direct_join_to_source.sql",
            "original_file_path": "models/marts/dag/fct_direct_join_to_source.sql",
            "unique_id": "model.dbt_project_evaluator.fct_direct_join_to_source",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "fct_direct_join_to_source"
            ],
            "alias": "fct_direct_join_to_source",
            "checksum": {
                "name": "sha256",
                "checksum": "41902b1a35281f5f48189c1e3a1f0beb3ecb5512f426bb46e1b7a201b7b59264"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This table shows each parent/child relationship where a model has a reference to both a model and a source.",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7029576,
            "relation_name": "\"memory\".\"main\".\"fct_direct_join_to_source\"",
            "raw_code": "-- this model finds cases where a model has a reference to both a model and a source\n\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where child_resource_type = 'model'\n    and distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nmodel_and_source_joined as (\n    select\n        child,\n        case \n            when (\n                sum(case when parent_resource_type = 'model' then 1 else 0 end) > 0 \n                and sum(case when parent_resource_type = 'source' then 1 else 0 end) > 0\n            ) \n            then true\n            else false \n        end as keep_row \n    from direct_model_relationships\n    group by 1\n),\n\nfinal as (\n    select \n        direct_model_relationships.parent,\n        direct_model_relationships.parent_resource_type,\n        direct_model_relationships.child,\n        direct_model_relationships.child_resource_type,\n        direct_model_relationships.distance\n    from direct_model_relationships\n    inner join model_and_source_joined\n        on direct_model_relationships.child = model_and_source_joined.child\n    where model_and_source_joined.keep_row\n    order by direct_model_relationships.child\n)\n\nselect * from final\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_dag_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_dag_relationships",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_model_fanout": {
            "database": "memory",
            "schema": "main",
            "name": "fct_model_fanout",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/dag/fct_model_fanout.sql",
            "original_file_path": "models/marts/dag/fct_model_fanout.sql",
            "unique_id": "model.dbt_project_evaluator.fct_model_fanout",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "fct_model_fanout"
            ],
            "alias": "fct_model_fanout",
            "checksum": {
                "name": "sha256",
                "checksum": "617945b46280b6270d8f5f0cd39cd82ca2024b09a850e197f348b6b576df177f"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This table shows all parents with more direct leaf children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7051244,
            "relation_name": "\"memory\".\"main\".\"fct_model_fanout\"",
            "raw_code": "with all_dag_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- find all models without children\nmodels_without_children as (\n    select\n        parent\n    from all_dag_relationships\n    where parent_resource_type = 'model'\n    group by 1\n    having max(distance) = 0\n),\n\n-- all parents with more direct children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)\n    -- Note: only counts \"leaf children\" - direct chilren that are models AND are child-less (are at the right-most-point in the DAG)\nmodel_fanout as (\n    select \n        all_dag_relationships.parent,\n        all_dag_relationships.parent_model_type,\n        all_dag_relationships.child\n    from all_dag_relationships\n    inner join models_without_children\n        on all_dag_relationships.child = models_without_children.parent\n    where all_dag_relationships.distance = 1 and all_dag_relationships.child_resource_type = 'model'\n    group by 1, 2, 3\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2, 3\n),\n\nmodel_fanout_agg as (\n    select\n        parent,\n        parent_model_type,\n        {{ dbt.listagg(\n            measure = 'child', \n            delimiter_text = \"', '\", \n            order_by_clause = 'order by child' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as leaf_children\n    from model_fanout\n    group by 1, 2\n    having count(*) >= {{ var('models_fanout_threshold') }}\n)\n\nselect * from model_fanout_agg\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_dag_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.listagg",
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_dag_relationships",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_source_fanout": {
            "database": "memory",
            "schema": "main",
            "name": "fct_source_fanout",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/dag/fct_source_fanout.sql",
            "original_file_path": "models/marts/dag/fct_source_fanout.sql",
            "unique_id": "model.dbt_project_evaluator.fct_source_fanout",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "fct_source_fanout"
            ],
            "alias": "fct_source_fanout",
            "checksum": {
                "name": "sha256",
                "checksum": "14d519f1f662fce3c381f4605765d18e1543ba1dfd157e304b74c0cb59a918b2"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This table shows each instance where a source is the direct parent of multiple resources in the DAG.",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.706562,
            "relation_name": "\"memory\".\"main\".\"fct_source_fanout\"",
            "raw_code": "-- this model finds cases where a source is used in multiple direct downstream models\nwith direct_source_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by child\n),\n\nsource_fanout as (\n    select\n        parent,\n        {{ dbt.listagg(\n            measure='child', \n            delimiter_text=\"', '\", \n            order_by_clause='order by child' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as model_children\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from source_fanout\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_dag_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.listagg",
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_dag_relationships",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_duplicate_sources": {
            "database": "memory",
            "schema": "main",
            "name": "fct_duplicate_sources",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/dag/fct_duplicate_sources.sql",
            "original_file_path": "models/marts/dag/fct_duplicate_sources.sql",
            "unique_id": "model.dbt_project_evaluator.fct_duplicate_sources",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "fct_duplicate_sources"
            ],
            "alias": "fct_duplicate_sources",
            "checksum": {
                "name": "sha256",
                "checksum": "eef33cda125cf6de675c136a274c52dc87afd8e0175e85c887349a11d9a872e0"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This table shows each source database location with more than one node in your dbt project.",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7039096,
            "relation_name": "\"memory\".\"main\".\"fct_duplicate_sources\"",
            "raw_code": "with sources as (\n    select\n        resource_name,\n        case \n            -- if you're using databricks but not the unity catalog, database will be null\n            when database is NULL then {{ dbt.concat([\"schema\", \"'.'\", \"identifier\"]) }} \n            else {{ dbt.concat([\"database\", \"'.'\", \"schema\", \"'.'\", \"identifier\"]) }} \n        end as source_db_location \n    from {{ ref('int_all_graph_resources') }}\n    where resource_type = 'source'\n    and not is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nsource_duplicates as (\n    select\n        source_db_location,\n        {{ dbt.listagg(\n            measure = 'resource_name', \n            delimiter_text = \"', '\", \n            order_by_clause = 'order by resource_name' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as source_names\n    from sources\n    group by source_db_location\n    having count(*) > 1\n)\n\nselect * from source_duplicates",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_graph_resources",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.concat",
                    "macro.dbt.listagg"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_graph_resources"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_staging_dependent_on_staging": {
            "database": "memory",
            "schema": "main",
            "name": "fct_staging_dependent_on_staging",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/dag/fct_staging_dependent_on_staging.sql",
            "original_file_path": "models/marts/dag/fct_staging_dependent_on_staging.sql",
            "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_staging",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "fct_staging_dependent_on_staging"
            ],
            "alias": "fct_staging_dependent_on_staging",
            "checksum": {
                "name": "sha256",
                "checksum": "3ec2cb7f884acdde9d1753cc3924ea1ee40540b92cb88524b5fe99f40e7707d9"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This table shows each parent/child relationship where models in the staging layer are dependent on each other.",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7071946,
            "relation_name": "\"memory\".\"main\".\"fct_staging_dependent_on_staging\"",
            "raw_code": "-- check for cases where models in the staging layer are dependent on each other\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type in ('model', 'snapshot')\n    and child_resource_type in ('model', 'snapshot')\n    and not parent_is_excluded\n    and not child_is_excluded\n    and distance = 1\n),\n\nbending_connections as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where parent_model_type = 'staging'\n    and child_model_type = 'staging'\n)\n\nselect * from bending_connections\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_dag_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_dag_relationships",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_too_many_joins": {
            "database": "memory",
            "schema": "main",
            "name": "fct_too_many_joins",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/dag/fct_too_many_joins.sql",
            "original_file_path": "models/marts/dag/fct_too_many_joins.sql",
            "unique_id": "model.dbt_project_evaluator.fct_too_many_joins",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "fct_too_many_joins"
            ],
            "alias": "fct_too_many_joins",
            "checksum": {
                "name": "sha256",
                "checksum": "4c49a1daa1a81c2047f76417a4fee57f56f8f21583d1443b068b485c14651d63"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This returns models referencing more than 7 or more dependencies. Per dbt best practices, models should be designed in a way that depend on fewer than 7 joins.",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7085433,
            "relation_name": "\"memory\".\"main\".\"fct_too_many_joins\"",
            "raw_code": "with all_dag_relationships as (\n    select\n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where not child_is_excluded\n    and child_resource_type = 'model'\n),\n\nfinal as (\n    select\n        child as resource_name,\n        child_file_path as file_path,\n        count(distinct parent) as join_count\n    from all_dag_relationships\n    where distance = 1\n    group by 1, 2\n    having count(distinct parent) >= {{ var('too_many_joins_threshold') }}\n)\n\nselect * from final\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_dag_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_dag_relationships",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": {
            "database": "memory",
            "schema": "main",
            "name": "fct_staging_dependent_on_marts_or_intermediate",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql",
            "original_file_path": "models/marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql",
            "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "fct_staging_dependent_on_marts_or_intermediate"
            ],
            "alias": "fct_staging_dependent_on_marts_or_intermediate",
            "checksum": {
                "name": "sha256",
                "checksum": "c8d013ff07426f83d621211293096386fdc508365316947e94bdea3708c786e2"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This table shows each parent/child relationship where models in the staging layer are dependent on models in the marts and/or intermediate layer.",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.706886,
            "relation_name": "\"memory\".\"main\".\"fct_staging_dependent_on_marts_or_intermediate\"",
            "raw_code": "-- cases where a staging model depends on a marts/intermediate model\n-- data should flow from raw -> staging -> intermediate -> marts\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'model'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where child_model_type = 'staging'\n    and parent_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_dag_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_dag_relationships",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_multiple_sources_joined": {
            "database": "memory",
            "schema": "main",
            "name": "fct_multiple_sources_joined",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/dag/fct_multiple_sources_joined.sql",
            "original_file_path": "models/marts/dag/fct_multiple_sources_joined.sql",
            "unique_id": "model.dbt_project_evaluator.fct_multiple_sources_joined",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "fct_multiple_sources_joined"
            ],
            "alias": "fct_multiple_sources_joined",
            "checksum": {
                "name": "sha256",
                "checksum": "83eb58c45643770dc386ca0180ec384ff959fced06a692d39edb11670d6a59d5"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This table shows each instance where a model references more than one source.",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7055159,
            "relation_name": "\"memory\".\"main\".\"fct_multiple_sources_joined\"",
            "raw_code": "-- this model finds cases where a model references more than one source\nwith direct_source_relationships as (\n    select distinct\n        child,\n        parent\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nmultiple_sources_joined as (\n    select\n        child,\n        {{ dbt.listagg(\n            measure='parent', \n            delimiter_text=\"', '\", \n            order_by_clause='order by parent' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as source_parents\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from multiple_sources_joined\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_dag_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.listagg",
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_dag_relationships",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_model_naming_conventions": {
            "database": "memory",
            "schema": "main",
            "name": "fct_model_naming_conventions",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/structure/fct_model_naming_conventions.sql",
            "original_file_path": "models/marts/structure/fct_model_naming_conventions.sql",
            "unique_id": "model.dbt_project_evaluator.fct_model_naming_conventions",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "structure",
                "fct_model_naming_conventions"
            ],
            "alias": "fct_model_naming_conventions",
            "checksum": {
                "name": "sha256",
                "checksum": "198a5db340a7d57d4333b9fe0d2083c28e8d3bb306794a90e68119eaa0ed5443"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This finds all cases where a model does NOT have the appropriate prefix.",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7584136,
            "relation_name": "\"memory\".\"main\".\"fct_model_naming_conventions\"",
            "raw_code": "-- all models with inappropriate (or lack of) pre-fix\n-- ensure dbt project has consistent naming conventions\n\nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n    -- exclude required metricflow time spine\n    and resource_name != 'metricflow_time_spine'\n),\n\nnaming_convention_prefixes as (\n    select * from {{ ref('stg_naming_convention_prefixes') }}\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by prefix_value\n), \n\nappropriate_prefixes as (\n    select \n        model_type, \n        {{ dbt.listagg(\n            measure='prefix_value', \n            delimiter_text=\"', '\", \n            order_by_clause='order by prefix_value' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as appropriate_prefixes\n    from naming_convention_prefixes\n    group by model_type\n), \n\nmodels as (\n    select\n        all_graph_resources.resource_name,\n        all_graph_resources.prefix,\n        all_graph_resources.model_type,\n        naming_convention_prefixes.prefix_value\n    from all_graph_resources \n    left join naming_convention_prefixes\n        on all_graph_resources.model_type = naming_convention_prefixes.model_type\n        and all_graph_resources.prefix = naming_convention_prefixes.prefix_value\n    where resource_type = 'model'\n),\n\ninappropriate_model_names as (\n    select \n        models.resource_name,\n        models.prefix,\n        models.model_type,\n        appropriate_prefixes.appropriate_prefixes\n    from models\n    left join appropriate_prefixes\n        on models.model_type = appropriate_prefixes.model_type\n    where models.prefix_value is null\n\n)\n\nselect * from inappropriate_model_names\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_graph_resources",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_naming_convention_prefixes",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.listagg",
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_graph_resources",
                    "model.dbt_project_evaluator.stg_naming_convention_prefixes",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_model_directories": {
            "database": "memory",
            "schema": "main",
            "name": "fct_model_directories",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/structure/fct_model_directories.sql",
            "original_file_path": "models/marts/structure/fct_model_directories.sql",
            "unique_id": "model.dbt_project_evaluator.fct_model_directories",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "structure",
                "fct_model_directories"
            ],
            "alias": "fct_model_directories",
            "checksum": {
                "name": "sha256",
                "checksum": "56c25e3298aecc9e1432b197cf0db47eeaf8c86a840d51dd70654a6662324342"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This finds all cases where a model is NOT in the appropriate subdirectory.",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7579486,
            "relation_name": "\"memory\".\"main\".\"fct_model_directories\"",
            "raw_code": "-- This model finds all cases where a model is NOT in the appropriate subdirectory:\n    -- For staging models: The files should be in nested in the staging folder in a subfolder that matches their source parent's name.\n    -- For non-staging models: The files should be nested closest to their appropriate folder.  \n{% set directory_pattern = get_directory_pattern() %}\n \nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nfolders as (\n    select * from {{ ref('stg_naming_convention_folders') }}\n), \n\nall_dag_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n    where not child_is_excluded\n),\n\nstaging_models as (\n    select  \n        child,\n        child_resource_type,\n        child_model_type,\n        child_file_path,\n        child_directory_path,\n        child_file_name,\n        parent_source_name\n    from all_dag_relationships\n    where parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and child_model_type = 'staging'\n),\n\n-- find all staging models that are NOT in their source parent's subdirectory\ninappropriate_subdirectories_staging as (\n    select distinct -- must do distinct to avoid duplicates when staging model has multiple paths to a given source\n        child as resource_name,\n        child_resource_type as resource_type,\n        child_model_type as model_type,\n        child_file_path as current_file_path,\n        'models{{ directory_pattern }}' || '{{ var(\"staging_folder_name\") }}' || '{{ directory_pattern }}' || parent_source_name || '{{ directory_pattern }}' || child_file_name as change_file_path_to\n    from staging_models\n    where child_directory_path not like '%' || parent_source_name || '%'\n),\n\n-- find all non-staging models that are NOT nested closest to their appropriate folder\ninnappropriate_subdirectories_non_staging_models as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        all_graph_resources.file_path as current_file_path,\n        'models' || '{{ directory_pattern }}...{{ directory_pattern }}' || folders.folder_name_value || '{{ directory_pattern }}...{{ directory_pattern }}' || all_graph_resources.file_name as change_file_path_to\n    from all_graph_resources\n    left join folders \n        on folders.model_type = all_graph_resources.model_type \n    -- either appropriate folder_name is not in the current_directory_path or a inappropriate folder name is closer to the file_name\n    where all_graph_resources.model_type <> all_graph_resources.model_type_folder \n),\n\nunioned as (\n    select * from inappropriate_subdirectories_staging\n    union all\n    select * from innappropriate_subdirectories_non_staging_models\n)\n\nselect * from unioned\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_graph_resources",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_naming_convention_folders",
                    "package": null,
                    "version": null
                },
                {
                    "name": "int_all_dag_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.get_directory_pattern",
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_graph_resources",
                    "model.dbt_project_evaluator.stg_naming_convention_folders",
                    "model.dbt_project_evaluator.int_all_dag_relationships",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_test_directories": {
            "database": "memory",
            "schema": "main",
            "name": "fct_test_directories",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/structure/fct_test_directories.sql",
            "original_file_path": "models/marts/structure/fct_test_directories.sql",
            "unique_id": "model.dbt_project_evaluator.fct_test_directories",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "structure",
                "fct_test_directories"
            ],
            "alias": "fct_test_directories",
            "checksum": {
                "name": "sha256",
                "checksum": "036ab595e5844a2e326b03b6f0341dd10f37dbc6250f99397cf0fc30cdcf44d4"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This finds all cases where the yml file for model tests is NOT in the same subdirectory as the corresponding model.",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7592158,
            "relation_name": "\"memory\".\"main\".\"fct_test_directories\"",
            "raw_code": "with\n\nresources as (\n\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nrelationships as (\n\n    select * from {{ ref('int_direct_relationships') }}\n\n),\n\nmodels_per_test as (\n\n    select\n        resource_name as test_name,\n        resource_id as test_id,\n        direct_parent_id as parent_model_id\n    from relationships\n    where resource_type = 'test'\n    and is_primary_test_relationship\n\n),\n\nmodel_file_paths as (\n\n    select\n        resources.resource_id as model_id,\n        resources.resource_name as model_name,\n        resources.directory_path as model_directory_path,\n        models_per_test.test_id,\n        models_per_test.parent_model_id\n    from resources\n    inner join models_per_test\n    on models_per_test.parent_model_id = resources.resource_id\n    where resource_type = 'model'\n\n),\n\ntest_file_paths as (\n\n    select\n        resource_id as test_id,\n        resource_name as test_name,\n        file_name as test_yml_name,\n        directory_path as test_yml_directory_path\n    from resources\n    where \n        resource_type = 'test'\n        and is_generic_test\n\n),\n\nall_file_paths as (\n\n    select\n        test_file_paths.test_id,\n        test_file_paths.test_name,\n        test_file_paths.test_yml_directory_path,\n        test_file_paths.test_yml_name,\n        model_file_paths.model_id,\n        model_file_paths.model_name,\n        model_file_paths.model_directory_path\n    from model_file_paths\n    inner join test_file_paths\n    on model_file_paths.test_id = test_file_paths.test_id\n\n),\n\ndifferent_directories as (\n\n    select\n        test_name,\n        model_name,\n        test_yml_directory_path as current_test_directory,\n        model_directory_path as change_test_directory_to\n    from all_file_paths\n    where model_directory_path != test_yml_directory_path\n\n)\n\nselect * from different_directories\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_graph_resources",
                    "package": null,
                    "version": null
                },
                {
                    "name": "int_direct_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_graph_resources",
                    "model.dbt_project_evaluator.int_direct_relationships",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_source_directories": {
            "database": "memory",
            "schema": "main",
            "name": "fct_source_directories",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/structure/fct_source_directories.sql",
            "original_file_path": "models/marts/structure/fct_source_directories.sql",
            "unique_id": "model.dbt_project_evaluator.fct_source_directories",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "structure",
                "fct_source_directories"
            ],
            "alias": "fct_source_directories",
            "checksum": {
                "name": "sha256",
                "checksum": "6f8a1d0d64c5cc3b0a40eef7ab06c914651e74da6c2e52b151e9ade07aee03ac"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This finds all cases where a source definition is NOT in the appropriate subdirectory.",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7588243,
            "relation_name": "\"memory\".\"main\".\"fct_source_directories\"",
            "raw_code": "-- Because we often work with multiple data sources, in our staging directory, we create one directory per source.\n\n-- This model finds all cases where a source definition is NOT in the appropriate subdirectory.\n\n{% set directory_pattern = get_directory_pattern() %}\n\nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\n-- find all sources that are definied in a .yml file NOT in their subdirectory\ninappropriate_subdirectories_sources as (\n    select \n        resource_name,\n        resource_type,\n        file_path as current_file_path,\n        'models{{ directory_pattern  }}' || '{{ var(\"staging_folder_name\") }}' || '{{ directory_pattern }}' || source_name || '{{ directory_pattern }}' || file_name as change_file_path_to\n    from all_graph_resources\n    where resource_type = 'source'\n    and directory_path not like '%' || source_name || '%'\n)\n\nselect * from inappropriate_subdirectories_sources\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_graph_resources",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.get_directory_pattern",
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_graph_resources",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_test_coverage": {
            "database": "memory",
            "schema": "main",
            "name": "fct_test_coverage",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/tests/fct_test_coverage.sql",
            "original_file_path": "models/marts/tests/fct_test_coverage.sql",
            "unique_id": "model.dbt_project_evaluator.fct_test_coverage",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "tests",
                "fct_test_coverage"
            ],
            "alias": "fct_test_coverage",
            "checksum": {
                "name": "sha256",
                "checksum": "a3b1d352c46a32242658d1fa8f5ae98a189c0ae7baed12ac962cebb13596dbe8"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "this model shows a few key metrics related to how well tested your dbt project is.",
            "columns": {
                "test_to_model_ratio": {
                    "name": "test_to_model_ratio",
                    "description": "the total number of tests in the project divided by the total number of models in the project",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "test_coverage_pct": {
                    "name": "test_coverage_pct",
                    "description": "the number of models in the project with at least one test configured divided by the total number of models in the project",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/tests/testing.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7710698,
            "relation_name": "\"memory\".\"main\".\"fct_test_coverage\"",
            "raw_code": "with\n\ntest_counts as (\n    select * from {{ ref('int_model_test_summary') }}\n    where resource_type = 'model'\n),\n\nconversion as (\n    select\n        resource_name,\n        case when number_of_tests_on_model > 0 then 1 else 0 end as is_tested_model,\n        {% for model_type in var('model_types') %}\n            case when model_type = '{{ model_type }}' then 1.0 else NULL end as is_{{ model_type }}_model,\n            case when number_of_tests_on_model > 0 and model_type = '{{ model_type }}' then 1.0 else 0 end as is_tested_{{ model_type }}_model{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from test_counts\n),\n\nfinal as (\n    select\n        {{ dbt.current_timestamp() if target.type != 'trino' else 'current_timestamp(6)' }} as measured_at,\n        count(*) as total_models,\n        sum(number_of_tests_on_model) as total_tests,\n        sum(is_tested_model) as tested_models,\n        round(sum(is_tested_model) * 100.0 / count(*), 2) as test_coverage_pct,\n        {% for model_type in var('model_types') %}\n            round(\n                {{ dbt_utils.safe_divide(\n                    numerator = \"sum(is_tested_\" ~ model_type ~ \"_model) * 100.0\", \n                    denominator = \"count(is_\" ~ model_type ~ \"_model)\"\n                ) }}\n            , 2) as {{ model_type }}_test_coverage_pct,\n        {% endfor %}\n        round(sum(number_of_tests_on_model) * 1.0000 / count(*), 4) as test_to_model_ratio\n\n    from test_counts\n    left join conversion\n    on test_counts.resource_name = conversion.resource_name\n)\n\nselect * from final",
            "language": "sql",
            "refs": [
                {
                    "name": "int_model_test_summary",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp",
                    "macro.dbt_utils.safe_divide"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_model_test_summary"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_missing_primary_key_tests": {
            "database": "memory",
            "schema": "main",
            "name": "fct_missing_primary_key_tests",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/tests/fct_missing_primary_key_tests.sql",
            "original_file_path": "models/marts/tests/fct_missing_primary_key_tests.sql",
            "unique_id": "model.dbt_project_evaluator.fct_missing_primary_key_tests",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "tests",
                "fct_missing_primary_key_tests"
            ],
            "alias": "fct_missing_primary_key_tests",
            "checksum": {
                "name": "sha256",
                "checksum": "355794c483e0f8d42f26c2aff9f8a3f8a2398d7bb103b557fd66c8970cbef336"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "this model has one record for every model without unique and not null tests configured on a single column",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/tests/testing.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.77146,
            "relation_name": "\"memory\".\"main\".\"fct_missing_primary_key_tests\"",
            "raw_code": "with \n\ntests as (\n    select * from {{ ref('int_model_test_summary') }} \n    where resource_type in\n    (\n        {% for resource_type in var('enforced_primary_key_node_types') %}'{{ resource_type }}'{% if not loop.last %},{% endif %}\n        {% endfor %}\n    )\n),\n\nfinal as (\n\n    select \n        *\n    from tests\n    where not(is_primary_key_tested)\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_model_test_summary",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_model_test_summary",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.int_model_test_summary": {
            "database": "memory",
            "schema": "main",
            "name": "int_model_test_summary",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/tests/intermediate/int_model_test_summary.sql",
            "original_file_path": "models/marts/tests/intermediate/int_model_test_summary.sql",
            "unique_id": "model.dbt_project_evaluator.int_model_test_summary",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "tests",
                "intermediate",
                "int_model_test_summary"
            ],
            "alias": "int_model_test_summary",
            "checksum": {
                "name": "sha256",
                "checksum": "2233b8537a9e271787d5b4e7d5dffabe765e07889cfc805027cd588d01b97d02"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.2878268,
            "relation_name": "\"memory\".\"main\".\"int_model_test_summary\"",
            "raw_code": "with \n\nall_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nrelationships as (\n    select * from {{ ref('int_direct_relationships') }}\n),\n\ncount_column_tests as (\n    \n    select \n        relationships.direct_parent_id, \n        all_graph_resources.column_name,\n        sum(case\n                when all_graph_resources.is_test_unique\n                then 1\n                else 0\n            end\n         ) as test_unique_count,\n        {%- for test_set in var('primary_key_test_macros') %}\n            {%- set outer_loop = loop -%}\n        count(distinct case when \n                {%- for test in test_set %} \n                all_graph_resources.is_{{ test.split('.')[1] }} {%- if not loop.last %} or {% endif %} \n                {%- endfor %}\n            then relationships.resource_id else null end\n        ) as primary_key_method_{{ outer_loop.index }}_count,\n        {%- endfor %}\n        count(distinct relationships.resource_id) as tests_count\n    from all_graph_resources\n    left join relationships\n        on all_graph_resources.resource_id = relationships.resource_id\n    where all_graph_resources.resource_type = 'test'\n    and relationships.is_primary_test_relationship\n    group by 1,2\n),\n\ncount_column_constraints as (\n\n    select\n        node_unique_id as direct_parent_id,\n        name as column_name,\n        case\n            when has_not_null_constraint\n            then 1\n            else 0\n        end as constraint_not_null_count,\n        constraints_count\n    from {{ ref('base_node_columns') }}\n\n),\n\ncombine_column_counts as (\n\n    select\n        count_column_tests.*,\n        count_column_tests.test_unique_count + count_column_constraints.constraint_not_null_count as primary_key_mixed_method_count,\n        count_column_constraints.constraints_count\n    from count_column_tests\n    left join count_column_constraints\n        on count_column_tests.direct_parent_id = count_column_constraints.direct_parent_id\n        and count_column_tests.column_name = count_column_constraints.column_name\n\n),\n\nagg_test_relationships as (\n\n    select \n        direct_parent_id, \n        sum(case \n                when (\n                    {%- for test_set in var('primary_key_test_macros') %}\n                        {%- set compare_value = test_set | length %}\n                    primary_key_method_{{ loop.index }}_count >= {{ compare_value}}\n                        or\n                    {%- endfor %}\n                    primary_key_mixed_method_count >= 2\n                ) then 1 \n                else 0 \n            end\n        ) >= 1 as is_primary_key_tested,\n        sum(tests_count) as number_of_tests_on_model,\n        sum(constraints_count) as number_of_constraints_on_model\n    from combine_column_counts\n    group by 1\n\n),\n\nfinal as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        coalesce(agg_test_relationships.is_primary_key_tested, FALSE) as is_primary_key_tested,\n        coalesce(agg_test_relationships.number_of_tests_on_model, 0) as number_of_tests_on_model,\n        coalesce(agg_test_relationships.number_of_constraints_on_model, 0) as number_of_constraints_on_model\n    from all_graph_resources\n    left join agg_test_relationships\n        on all_graph_resources.resource_id = agg_test_relationships.direct_parent_id\n    where\n        all_graph_resources.resource_type in ('model', 'seed', 'source', 'snapshot')\n)\n\nselect * from final",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_graph_resources",
                    "package": null,
                    "version": null
                },
                {
                    "name": "int_direct_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "base_node_columns",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_graph_resources",
                    "model.dbt_project_evaluator.int_direct_relationships",
                    "model.dbt_project_evaluator.base_node_columns"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_undocumented_models": {
            "database": "memory",
            "schema": "main",
            "name": "fct_undocumented_models",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/documentation/fct_undocumented_models.sql",
            "original_file_path": "models/marts/documentation/fct_undocumented_models.sql",
            "unique_id": "model.dbt_project_evaluator.fct_undocumented_models",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "documentation",
                "fct_undocumented_models"
            ],
            "alias": "fct_undocumented_models",
            "checksum": {
                "name": "sha256",
                "checksum": "c8667f2c44681081d01b644a1cec9f8a0d5d62c1f89d132b5e9fa3e8cace2554"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This model contains all models that do not have a description configured in a YML file. \n",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7823884,
            "relation_name": "\"memory\".\"main\".\"fct_undocumented_models\"",
            "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name,\n        model_type\n\n    from all_resources\n    where not is_described and resource_type = 'model'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_graph_resources",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_graph_resources",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_documentation_coverage": {
            "database": "memory",
            "schema": "main",
            "name": "fct_documentation_coverage",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/documentation/fct_documentation_coverage.sql",
            "original_file_path": "models/marts/documentation/fct_documentation_coverage.sql",
            "unique_id": "model.dbt_project_evaluator.fct_documentation_coverage",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "documentation",
                "fct_documentation_coverage"
            ],
            "alias": "fct_documentation_coverage",
            "checksum": {
                "name": "sha256",
                "checksum": "8c7533262412230d48b530bd7c237acf553b666818af0e75d850162ae7087ff5"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This model calculates the percent of enabled models in the project that have a configured description.  We recommend you describe at least 75 percent of your models. \n",
            "columns": {
                "documentation_coverage_pct": {
                    "name": "documentation_coverage_pct",
                    "description": "the number of models in the project with a description divided by the total number of models in the project",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7819479,
            "relation_name": "\"memory\".\"main\".\"fct_documentation_coverage\"",
            "raw_code": "with\n\nmodels as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nconversion as (\n    select\n        resource_id,\n        case when is_described then 1 else 0 end as is_described_model,\n        {% for model_type in var('model_types') %}\n            case when model_type = '{{ model_type }}' then 1.0 else NULL end as is_{{ model_type }}_model,\n            case when is_described and model_type = '{{ model_type }}' then 1.0 else 0 end as is_described_{{ model_type }}_model{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from models\n),\n\nfinal as (\n    select\n        {{ dbt.current_timestamp() if target.type != 'trino' else 'current_timestamp(6)' }} as measured_at,\n        count(*) as total_models,\n        sum(is_described_model) as documented_models,\n        round(sum(is_described_model) * 100.00 / count(*), 2) as documentation_coverage_pct,\n        {% for model_type in var('model_types') %}\n            round(\n                {{ dbt_utils.safe_divide(\n                    numerator = \"sum(is_described_\" ~ model_type ~ \"_model) * 100\", \n                    denominator = \"count(is_\" ~ model_type ~ \"_model)\"\n                ) }}\n            , 2) as {{ model_type }}_documentation_coverage_pct{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from models\n    left join conversion\n    on models.resource_id = conversion.resource_id\n)\n\nselect * from final",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_graph_resources",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp",
                    "macro.dbt_utils.safe_divide"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_graph_resources"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_undocumented_source_tables": {
            "database": "memory",
            "schema": "main",
            "name": "fct_undocumented_source_tables",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/documentation/fct_undocumented_source_tables.sql",
            "original_file_path": "models/marts/documentation/fct_undocumented_source_tables.sql",
            "unique_id": "model.dbt_project_evaluator.fct_undocumented_source_tables",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "documentation",
                "fct_undocumented_source_tables"
            ],
            "alias": "fct_undocumented_source_tables",
            "checksum": {
                "name": "sha256",
                "checksum": "ccbde566a67506d88bd664fe2bab505f2736ab003510e6280772b02cc7e20394"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This model contains all source tables that do not have a description configured in a YML file. \n",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.783085,
            "relation_name": "\"memory\".\"main\".\"fct_undocumented_source_tables\"",
            "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name\n\n    from all_resources\n    where not is_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_graph_resources",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_graph_resources",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_undocumented_sources": {
            "database": "memory",
            "schema": "main",
            "name": "fct_undocumented_sources",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/documentation/fct_undocumented_sources.sql",
            "original_file_path": "models/marts/documentation/fct_undocumented_sources.sql",
            "unique_id": "model.dbt_project_evaluator.fct_undocumented_sources",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "documentation",
                "fct_undocumented_sources"
            ],
            "alias": "fct_undocumented_sources",
            "checksum": {
                "name": "sha256",
                "checksum": "ca85ce862cbe9416515290c5f7e0b4732394c94caad12a0e6d7e0262ca6410be"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This model contains all sources that do not have a description configured in a YML file. \n",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7834349,
            "relation_name": "\"memory\".\"main\".\"fct_undocumented_sources\"",
            "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        source_name\n\n    from all_resources\n    where not is_source_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_graph_resources",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_graph_resources",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.int_all_dag_relationships": {
            "database": "memory",
            "schema": "main",
            "name": "int_all_dag_relationships",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/core/int_all_dag_relationships.sql",
            "original_file_path": "models/marts/core/int_all_dag_relationships.sql",
            "unique_id": "model.dbt_project_evaluator.int_all_dag_relationships",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "core",
                "int_all_dag_relationships"
            ],
            "alias": "int_all_dag_relationships",
            "checksum": {
                "name": "sha256",
                "checksum": "b4c408aa270f14f715b34649af63bf54609d14d2995c38005e858574b531b731"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['bigquery', 'redshift', 'databricks'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.314747,
            "relation_name": "\"memory\".\"main\".\"int_all_dag_relationships\"",
            "raw_code": "-- creates a cte called all_relationships that will either use \"with recursive\" or loops depending on the DW\n{{ dbt_project_evaluator.recursive_dag() }}\n\nselect * from all_relationships\norder by parent, distance",
            "language": "sql",
            "refs": [
                {
                    "name": "int_direct_relationships",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.recursive_dag"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_direct_relationships"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.int_direct_relationships": {
            "database": "memory",
            "schema": "main",
            "name": "int_direct_relationships",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/core/int_direct_relationships.sql",
            "original_file_path": "models/marts/core/int_direct_relationships.sql",
            "unique_id": "model.dbt_project_evaluator.int_direct_relationships",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "core",
                "int_direct_relationships"
            ],
            "alias": "int_direct_relationships",
            "checksum": {
                "name": "sha256",
                "checksum": "2da880c84d8da5c7709b7b073ff320159243b5833a672a2f0fb6adae341b0ca1"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "view",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['bigquery', 'redshift', 'databricks'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.3307016,
            "relation_name": "\"memory\".\"main\".\"int_direct_relationships\"",
            "raw_code": "-- one record for each resource in the graph and its direct parent\nwith \n\nall_graph_resources as (\n    select\n        resource_id,\n        resource_name,\n        resource_type,\n        file_path,\n        directory_path, \n        file_name,\n        model_type,\n        materialized,\n        is_public, \n        access, \n        source_name,\n        is_excluded\n    from {{ ref('int_all_graph_resources') }}\n),\n\ndirect_model_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_node_relationships')}}\n),\n\ndirect_exposure_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_exposure_relationships')}}\n),\n\ndirect_metrics_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_metric_relationships')}}\n),\n\n-- for all resources in the graph, find their direct parent\ndirect_relationships as (\n    select\n        all_graph_resources.*,\n        case \n            when all_graph_resources.resource_type = 'source' then null\n            when all_graph_resources.resource_type = 'exposure' then exposures.direct_parent_id\n            when all_graph_resources.resource_type = 'metric' then metrics.direct_parent_id\n            when all_graph_resources.resource_type in ('model', 'snapshot', 'test') then models.direct_parent_id\n            else null\n        end as direct_parent_id,\n        (\n            all_graph_resources.resource_type = 'test'\n            and models.is_primary_relationship\n        ) as is_primary_test_relationship\n    from all_graph_resources\n    left join direct_model_relationships as models\n        on all_graph_resources.resource_id = models.resource_id\n    left join direct_exposure_relationships as exposures\n        on all_graph_resources.resource_id = exposures.resource_id\n    left join direct_metrics_relationships as metrics\n        on all_graph_resources.resource_id = metrics.resource_id\n),\n\nfinal as (\n    select\n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id,\n        *\n    from direct_relationships\n)\n\nselect * from final",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_graph_resources",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_node_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_exposure_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_metric_relationships",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.generate_surrogate_key"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_graph_resources",
                    "model.dbt_project_evaluator.stg_node_relationships",
                    "model.dbt_project_evaluator.stg_exposure_relationships",
                    "model.dbt_project_evaluator.stg_metric_relationships"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.int_all_graph_resources": {
            "database": "memory",
            "schema": "main",
            "name": "int_all_graph_resources",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/core/int_all_graph_resources.sql",
            "original_file_path": "models/marts/core/int_all_graph_resources.sql",
            "unique_id": "model.dbt_project_evaluator.int_all_graph_resources",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "core",
                "int_all_graph_resources"
            ],
            "alias": "int_all_graph_resources",
            "checksum": {
                "name": "sha256",
                "checksum": "883edb3a2903268789ebbda46f2390942c87e123be2f65042c44bb54705d853e"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "materialized": "table",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.336045,
            "relation_name": "\"memory\".\"main\".\"int_all_graph_resources\"",
            "raw_code": "-- one row for each resource in the graph\n\n{# flatten the sets of permissable primary key test sets to one level for later iteration #}\n{%- set test_macro_list = [] %}\n{%- for test_set in var('primary_key_test_macros') -%}\n      {%- for test in test_set %}\n        {%- do test_macro_list.append(test) -%}\n      {%- endfor %}\n{%- endfor -%}\n\n{%- set quoted_directory_pattern = wrap_string_with_quotes(get_directory_pattern()) %}\n\nwith unioned as (\n\n    {{ dbt_utils.union_relations([\n        ref('stg_nodes'),\n        ref('stg_exposures'),\n        ref('stg_metrics'),\n        ref('stg_sources')\n    ])}}\n\n),\n\nnaming_convention_prefixes as (\n    select * from {{ ref('stg_naming_convention_prefixes') }}\n), \n\nnaming_convention_folders as (\n    select * from {{ ref('stg_naming_convention_folders') }}\n), \n\nunioned_with_calc as (\n    select \n        *,\n        case \n            when resource_type = 'source' then  {{ dbt.concat(['source_name',\"'.'\",'name']) }}\n            when coalesce(version, '') != '' then {{ dbt.concat(['name',\"'.v'\",'version']) }} \n            else name \n        end as resource_name,\n        case\n            when resource_type = 'source' then null\n            else {{ dbt.split_part('name', \"'_'\", 1) }}||'_' \n        end as prefix,\n        {{ get_dbtreplace_directory_pattern() }} as directory_path,\n        regexp_replace(file_path,'.*{{ get_regexp_directory_pattern() }}','') as file_name\n    from unioned\n    where coalesce(is_enabled, True) = True and package_name != 'dbt_project_evaluator'\n), \n\njoined as (\n\n    select\n        unioned_with_calc.unique_id as resource_id, \n        unioned_with_calc.resource_name, \n        unioned_with_calc.prefix, \n        unioned_with_calc.resource_type, \n        unioned_with_calc.file_path, \n        unioned_with_calc.directory_path,\n        unioned_with_calc.is_generic_test,\n        unioned_with_calc.file_name,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            else naming_convention_prefixes.model_type \n        end as model_type_prefix,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            when {{ dbt.position(dbt.concat([quoted_directory_pattern, 'naming_convention_folders.folder_name_value', quoted_directory_pattern]),'unioned_with_calc.directory_path') }} = 0 then null\n            else naming_convention_folders.model_type \n        end as model_type_folder,\n        {{ dbt.position(dbt.concat([quoted_directory_pattern, 'naming_convention_folders.folder_name_value', quoted_directory_pattern]),'unioned_with_calc.directory_path') }} as position_folder,  \n        nullif(unioned_with_calc.column_name, '') as column_name,\n        {% for test in test_macro_list %}\n        unioned_with_calc.macro_dependencies like '%macro.{{ test }}%' and unioned_with_calc.resource_type = 'test' as is_{{ test.split('.')[1] }},  \n        {% endfor %}\n        unioned_with_calc.is_enabled, \n        unioned_with_calc.materialized, \n        unioned_with_calc.on_schema_change, \n        unioned_with_calc.database, \n        unioned_with_calc.schema, \n        unioned_with_calc.package_name, \n        unioned_with_calc.alias, \n        unioned_with_calc.is_described, \n        unioned_with_calc.model_group, \n        unioned_with_calc.access, \n        unioned_with_calc.access = 'public' as is_public, \n        unioned_with_calc.latest_version, \n        unioned_with_calc.version, \n        unioned_with_calc.deprecation_date, \n        unioned_with_calc.is_contract_enforced, \n        unioned_with_calc.total_defined_columns, \n        unioned_with_calc.total_described_columns, \n        unioned_with_calc.exposure_type, \n        unioned_with_calc.maturity, \n        unioned_with_calc.url, \n        unioned_with_calc.owner_name,\n        unioned_with_calc.owner_email,\n        unioned_with_calc.meta,\n        unioned_with_calc.macro_dependencies,\n        unioned_with_calc.metric_type, \n        unioned_with_calc.label, \n        unioned_with_calc.metric_filter,\n        unioned_with_calc.metric_measure,\n        unioned_with_calc.metric_measure_alias,\n        unioned_with_calc.numerator,\n        unioned_with_calc.denominator,\n        unioned_with_calc.expr,\n        unioned_with_calc.metric_window,\n        unioned_with_calc.grain_to_date,\n        unioned_with_calc.source_name, -- NULL for non-source resources\n        unioned_with_calc.is_source_described, \n        unioned_with_calc.loaded_at_field, \n        unioned_with_calc.loader, \n        unioned_with_calc.identifier,\n        unioned_with_calc.hard_coded_references, -- NULL for non-model resources\n        unioned_with_calc.number_lines, -- NULL for non-model resources\n        unioned_with_calc.sql_complexity, -- NULL for non-model resources\n        unioned_with_calc.is_excluded -- NULL for metrics and exposures\n\n    from unioned_with_calc\n    left join naming_convention_prefixes\n        on unioned_with_calc.prefix = naming_convention_prefixes.prefix_value\n\n    cross join naming_convention_folders   \n\n), \n\ncalculate_model_type as (\n    select \n        *, \n        case \n            when resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            -- by default we will define the model type based on its prefix in the case prefix and folder types are different\n            else coalesce(model_type_prefix, model_type_folder, 'other') \n        end as model_type,\n        row_number() over (partition by resource_id order by position_folder desc) as folder_name_rank\n    from joined\n),\n\nfinal as (\n    select\n        *\n    from calculate_model_type\n    where folder_name_rank = 1\n)\n\nselect \n    *\nfrom final",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_nodes",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_exposures",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_metrics",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_sources",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_naming_convention_prefixes",
                    "package": null,
                    "version": null
                },
                {
                    "name": "stg_naming_convention_folders",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.get_directory_pattern",
                    "macro.dbt_project_evaluator.wrap_string_with_quotes",
                    "macro.dbt_utils.union_relations",
                    "macro.dbt.concat",
                    "macro.dbt.split_part",
                    "macro.dbt_project_evaluator.get_dbtreplace_directory_pattern",
                    "macro.dbt_project_evaluator.get_regexp_directory_pattern",
                    "macro.dbt.position"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.stg_nodes",
                    "model.dbt_project_evaluator.stg_exposures",
                    "model.dbt_project_evaluator.stg_metrics",
                    "model.dbt_project_evaluator.stg_sources",
                    "model.dbt_project_evaluator.stg_naming_convention_prefixes",
                    "model.dbt_project_evaluator.stg_naming_convention_folders"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models": {
            "database": "memory",
            "schema": "main",
            "name": "fct_exposures_dependent_on_private_models",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/governance/fct_exposures_dependent_on_private_models.sql",
            "original_file_path": "models/marts/governance/fct_exposures_dependent_on_private_models.sql",
            "unique_id": "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "governance",
                "fct_exposures_dependent_on_private_models"
            ],
            "alias": "fct_exposures_dependent_on_private_models",
            "checksum": {
                "name": "sha256",
                "checksum": "b08d3667b3752cd9b0dd8981ec7e55af29c109e2d590c65ab84b77cb213d5a38"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This table shows each direct relationship between a parent resource and a downstream exposure where the parent resource is not a public model",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/governance/governance.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7954478,
            "relation_name": "\"memory\".\"main\".\"fct_exposures_dependent_on_private_models\"",
            "raw_code": "with \n\ndirect_exposure_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and not (\n                parent_resource_type = 'model'\n                and parent_is_public\n            )\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        child as exposure_name,\n        parent as parent_resource_name,\n        parent_access,\n        parent_resource_type\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_dag_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_dag_relationships",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_public_models_without_contract": {
            "database": "memory",
            "schema": "main",
            "name": "fct_public_models_without_contract",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/governance/fct_public_models_without_contract.sql",
            "original_file_path": "models/marts/governance/fct_public_models_without_contract.sql",
            "unique_id": "model.dbt_project_evaluator.fct_public_models_without_contract",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "governance",
                "fct_public_models_without_contract"
            ],
            "alias": "fct_public_models_without_contract",
            "checksum": {
                "name": "sha256",
                "checksum": "76f602dad9bd99ea230d3ecfe7de6503d1d5b0e20ddd1b9f0609d2bfe34244c0"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This table shows each public model that does not have an enforced contract",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/governance/governance.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7948043,
            "relation_name": "\"memory\".\"main\".\"fct_public_models_without_contract\"",
            "raw_code": "with \n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nfinal as (\n\n    select \n        resource_name,\n        is_public,\n        is_contract_enforced\n        \n    from all_resources\n    where \n        is_public \n        and not is_contract_enforced\n)\n\nselect * from final\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_graph_resources",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_graph_resources",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_undocumented_public_models": {
            "database": "memory",
            "schema": "main",
            "name": "fct_undocumented_public_models",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/governance/fct_undocumented_public_models.sql",
            "original_file_path": "models/marts/governance/fct_undocumented_public_models.sql",
            "unique_id": "model.dbt_project_evaluator.fct_undocumented_public_models",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "governance",
                "fct_undocumented_public_models"
            ],
            "alias": "fct_undocumented_public_models",
            "checksum": {
                "name": "sha256",
                "checksum": "ee476e5f468028cb08f6d0f29adc42829534800da3b524adc2f87c04bd76cef5"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This table shows each public model that does not have both a model level description, and a description for each of the columns in the model",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/governance/governance.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7951286,
            "relation_name": "\"memory\".\"main\".\"fct_undocumented_public_models\"",
            "raw_code": "with \n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nfinal as (\n    select \n        resource_name,\n        access, \n        is_described, \n        total_defined_columns,\n        total_described_columns\n    \n    from all_resources\n    where \n        is_public \n        and (\n            -- no model level description\n            not is_described\n            -- not all columns defined have descriptions\n            or total_described_columns < total_defined_columns\n            -- no columns defined at all\n            or total_defined_columns = 0\n        )\n)\n\nselect * from final\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_graph_resources",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_graph_resources",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_exposure_parents_materializations": {
            "database": "memory",
            "schema": "main",
            "name": "fct_exposure_parents_materializations",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/performance/fct_exposure_parents_materializations.sql",
            "original_file_path": "models/marts/performance/fct_exposure_parents_materializations.sql",
            "unique_id": "model.dbt_project_evaluator.fct_exposure_parents_materializations",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "performance",
                "fct_exposure_parents_materializations"
            ],
            "alias": "fct_exposure_parents_materializations",
            "checksum": {
                "name": "sha256",
                "checksum": "5e3c973f43ea703994fa8cfc427ec015dd5f23441d4592ef023e2174c241c658"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This table shows each direct parent of an exposure that is not materialized as a table or incremental.",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.7078218,
            "relation_name": "\"memory\".\"main\".\"fct_exposure_parents_materializations\"",
            "raw_code": "with \n\ndirect_exposure_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and ((\n                parent_resource_type = 'model'\n                and parent_materialized in ('view', 'ephemeral')\n            )\n            or (\n                parent_resource_type = 'source'\n            )\n        )\n        -- no test on child_is_excluded because exposures are never excluded\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        parent_resource_type,\n        parent as parent_resource_name,\n        child as exposure_name,\n        parent_materialized as parent_model_materialization\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_dag_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_dag_relationships",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "model.dbt_project_evaluator.fct_chained_views_dependencies": {
            "database": "memory",
            "schema": "main",
            "name": "fct_chained_views_dependencies",
            "resource_type": "model",
            "package_name": "dbt_project_evaluator",
            "path": "marts/performance/fct_chained_views_dependencies.sql",
            "original_file_path": "models/marts/performance/fct_chained_views_dependencies.sql",
            "unique_id": "model.dbt_project_evaluator.fct_chained_views_dependencies",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "performance",
                "fct_chained_views_dependencies"
            ],
            "alias": "fct_chained_views_dependencies",
            "checksum": {
                "name": "sha256",
                "checksum": "aef70a6fecdec6f947f788d52b889e9a7e5e2067e87769c94c30c56d956f2af9"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "table",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {},
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "access": "protected",
                "dbt_bouncer": null
            },
            "tags": [],
            "description": "This returns models dependent on chains of \"non-physically-materialized\" models (views and ephemerals), highlighting potential cases for improving performance by switching the materialization of model(s) within  the chain to table or incremental. \n",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/marts/performance/performance.yml",
            "build_path": null,
            "unrendered_config": {
                "materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}",
                "dbt_bouncer": null
            },
            "created_at": 1721827582.8039374,
            "relation_name": "\"memory\".\"main\".\"fct_chained_views_dependencies\"",
            "raw_code": "with all_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance <> 0\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent,\n        child, -- the model with potentially long run time / compilation time, improve performance by breaking the upstream chain of views\n        distance,\n        path\n    from all_relationships\n    where is_dependent_on_chain_of_views\n    and child_resource_type = 'model'\n    and distance > {{ var('chained_views_threshold') }}\n)\n\nselect * from final\n\n{{ filter_exceptions() }}\n\norder by distance desc",
            "language": "sql",
            "refs": [
                {
                    "name": "int_all_dag_relationships",
                    "package": null,
                    "version": null
                },
                {
                    "name": "dbt_project_evaluator_exceptions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.filter_exceptions"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.int_all_dag_relationships",
                    "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "access": "protected",
            "constraints": [],
            "version": null,
            "latest_version": null,
            "deprecation_date": null
        },
        "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": {
            "database": "memory",
            "schema": "main",
            "name": "dbt_project_evaluator_exceptions",
            "resource_type": "seed",
            "package_name": "dbt_project_evaluator",
            "path": "dbt_project_evaluator_exceptions.csv",
            "original_file_path": "seeds/dbt_project_evaluator_exceptions.csv",
            "unique_id": "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions",
            "fqn": [
                "dbt_project_evaluator",
                "dbt_project_evaluator_exceptions"
            ],
            "alias": "dbt_project_evaluator_exceptions",
            "checksum": {
                "name": "sha256",
                "checksum": "55374346a29c2ef9f7ac7b8d3f249e818f60dbd9586ab2645c294d3438f094d9"
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": null,
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "seed",
                "incremental_strategy": null,
                "persist_docs": {},
                "post-hook": [],
                "pre-hook": [],
                "quoting": {},
                "column_types": {
                    "fct_name": "string",
                    "column_name": "string",
                    "id_to_exclude": "string",
                    "comment": "string"
                },
                "full_refresh": null,
                "unique_key": null,
                "on_schema_change": "ignore",
                "on_configuration_change": "apply",
                "grants": {},
                "packages": [],
                "docs": {
                    "show": true,
                    "node_color": null
                },
                "contract": {
                    "enforced": false,
                    "alias_types": true
                },
                "delimiter": ",",
                "quote_columns": null
            },
            "tags": [],
            "description": "List of exceptions not to be reported.",
            "columns": {
                "fct_name": {
                    "name": "fct_name",
                    "description": "Name of the fact table to define exceptions.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "column_name": {
                    "name": "column_name",
                    "description": "Column name from fct_name to define exceptions.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "id_to_exclude": {
                    "name": "id_to_exclude",
                    "description": "Values (or like pattern) to exclude for column_name.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                },
                "comment": {
                    "name": "comment",
                    "description": "Field to document why a given exception is legitimate.",
                    "meta": {},
                    "data_type": null,
                    "constraints": [],
                    "quote": null,
                    "tags": []
                }
            },
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://seeds/seeds.yml",
            "build_path": null,
            "unrendered_config": {
                "column_types": {
                    "fct_name": "string",
                    "column_name": "string",
                    "id_to_exclude": "string",
                    "comment": "string"
                }
            },
            "created_at": 1721827582.833064,
            "relation_name": "\"memory\".\"main\".\"dbt_project_evaluator_exceptions\"",
            "raw_code": "",
            "root_path": "dbt_project/dbt_packages/dbt_project_evaluator",
            "depends_on": {
                "macros": []
            }
        },
        "test.dbt_bouncer_test_project.not_null_stg_model_1_id.595dde4889": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "not_null_stg_model_1_id",
            "resource_type": "test",
            "package_name": "dbt_bouncer_test_project",
            "path": "not_null_stg_model_1_id.sql",
            "original_file_path": "models/staging/_schema.yml",
            "unique_id": "test.dbt_bouncer_test_project.not_null_stg_model_1_id.595dde4889",
            "fqn": [
                "dbt_bouncer_test_project",
                "staging",
                "not_null_stg_model_1_id"
            ],
            "alias": "not_null_stg_model_1_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1721827582.6901207,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_model_1",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ],
                "nodes": [
                    "model.dbt_bouncer_test_project.stg_model_1"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "id",
            "file_key_name": "models.stg_model_1",
            "attached_node": "model.dbt_bouncer_test_project.stg_model_1",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(ref('stg_model_1')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_bouncer_test_project.unique_stg_model_2_id.7a2824b68f": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "unique_stg_model_2_id",
            "resource_type": "test",
            "package_name": "dbt_bouncer_test_project",
            "path": "unique_stg_model_2_id.sql",
            "original_file_path": "models/staging/_schema.yml",
            "unique_id": "test.dbt_bouncer_test_project.unique_stg_model_2_id.7a2824b68f",
            "fqn": [
                "dbt_bouncer_test_project",
                "staging",
                "unique_stg_model_2_id"
            ],
            "alias": "unique_stg_model_2_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1721827582.6916387,
            "relation_name": null,
            "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "stg_model_2",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_unique"
                ],
                "nodes": [
                    "model.dbt_bouncer_test_project.stg_model_2"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "id",
            "file_key_name": "models.stg_model_2",
            "attached_node": "model.dbt_bouncer_test_project.stg_model_2",
            "test_metadata": {
                "name": "unique",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(ref('stg_model_2')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_bouncer_test_project.not_null_int_model_1_id.da20a8abb3": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "not_null_int_model_1_id",
            "resource_type": "test",
            "package_name": "dbt_bouncer_test_project",
            "path": "not_null_int_model_1_id.sql",
            "original_file_path": "models/intermediate/_schema.yml",
            "unique_id": "test.dbt_bouncer_test_project.not_null_int_model_1_id.da20a8abb3",
            "fqn": [
                "dbt_bouncer_test_project",
                "intermediate",
                "not_null_int_model_1_id"
            ],
            "alias": "not_null_int_model_1_id",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "ERROR",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {},
            "created_at": 1721827582.693583,
            "relation_name": null,
            "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "int_model_1",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt.test_not_null"
                ],
                "nodes": [
                    "model.dbt_bouncer_test_project.int_model_1"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "id",
            "file_key_name": "models.int_model_1",
            "attached_node": "model.dbt_bouncer_test_project.int_model_1",
            "test_metadata": {
                "name": "not_null",
                "kwargs": {
                    "column_name": "id",
                    "model": "{{ get_where_subquery(ref('int_model_1')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_direct_join_to_source_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_direct_join_to_source_.sql",
            "original_file_path": "models/marts/dag/dag.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "is_empty_fct_direct_join_to_source_"
            ],
            "alias": "is_empty_fct_direct_join_to_source_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7092633,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_direct_join_to_source",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_direct_join_to_source"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_direct_join_to_source",
            "attached_node": "model.dbt_project_evaluator.fct_direct_join_to_source",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_direct_join_to_source')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_duplicate_sources_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_duplicate_sources_.sql",
            "original_file_path": "models/marts/dag/dag.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "is_empty_fct_duplicate_sources_"
            ],
            "alias": "is_empty_fct_duplicate_sources_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7220879,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_duplicate_sources",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_duplicate_sources"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_duplicate_sources",
            "attached_node": "model.dbt_project_evaluator.fct_duplicate_sources",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_duplicate_sources')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_marts_or_intermediate_dependent_on_source_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_marts_or_intermediate_dependent_on_source_.sql",
            "original_file_path": "models/marts/dag/dag.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "is_empty_fct_marts_or_intermediate_dependent_on_source_"
            ],
            "alias": "is_empty_fct_marts_or_intermediate_dependent_on_source_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7247105,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_marts_or_intermediate_dependent_on_source",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_marts_or_intermediate_dependent_on_source",
            "attached_node": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_marts_or_intermediate_dependent_on_source')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_model_fanout_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_model_fanout_.sql",
            "original_file_path": "models/marts/dag/dag.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "is_empty_fct_model_fanout_"
            ],
            "alias": "is_empty_fct_model_fanout_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.727378,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_model_fanout",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_model_fanout"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_model_fanout",
            "attached_node": "model.dbt_project_evaluator.fct_model_fanout",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_model_fanout')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_multiple_sources_joined_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_multiple_sources_joined_.sql",
            "original_file_path": "models/marts/dag/dag.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "is_empty_fct_multiple_sources_joined_"
            ],
            "alias": "is_empty_fct_multiple_sources_joined_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7301419,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_multiple_sources_joined",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_multiple_sources_joined"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_multiple_sources_joined",
            "attached_node": "model.dbt_project_evaluator.fct_multiple_sources_joined",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_multiple_sources_joined')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_rejoining_of_upstream_concepts_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_rejoining_of_upstream_concepts_.sql",
            "original_file_path": "models/marts/dag/dag.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "is_empty_fct_rejoining_of_upstream_concepts_"
            ],
            "alias": "is_empty_fct_rejoining_of_upstream_concepts_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7329335,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_rejoining_of_upstream_concepts",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_rejoining_of_upstream_concepts",
            "attached_node": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_rejoining_of_upstream_concepts')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_root_models_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_root_models_.sql",
            "original_file_path": "models/marts/dag/dag.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "is_empty_fct_root_models_"
            ],
            "alias": "is_empty_fct_root_models_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7351933,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_root_models",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_root_models"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_root_models",
            "attached_node": "model.dbt_project_evaluator.fct_root_models",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_root_models')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_source_fanout_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_source_fanout_.sql",
            "original_file_path": "models/marts/dag/dag.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "is_empty_fct_source_fanout_"
            ],
            "alias": "is_empty_fct_source_fanout_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7373917,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_source_fanout",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_source_fanout"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_source_fanout",
            "attached_node": "model.dbt_project_evaluator.fct_source_fanout",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_source_fanout')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_staging_dependent_on_marts_or_intermediate_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_staging_dependent_on_marts_or_intermediate_.sql",
            "original_file_path": "models/marts/dag/dag.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "is_empty_fct_staging_dependent_on_marts_or_intermediate_"
            ],
            "alias": "is_empty_fct_staging_dependent_on_marts_or_intermediate_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.74024,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_staging_dependent_on_marts_or_intermediate",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_staging_dependent_on_marts_or_intermediate",
            "attached_node": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_staging_dependent_on_marts_or_intermediate')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_staging_dependent_on_staging_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_staging_dependent_on_staging_.sql",
            "original_file_path": "models/marts/dag/dag.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "is_empty_fct_staging_dependent_on_staging_"
            ],
            "alias": "is_empty_fct_staging_dependent_on_staging_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7431827,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_staging_dependent_on_staging",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_staging_dependent_on_staging"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_staging_dependent_on_staging",
            "attached_node": "model.dbt_project_evaluator.fct_staging_dependent_on_staging",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_staging_dependent_on_staging')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_unused_sources_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_unused_sources_.sql",
            "original_file_path": "models/marts/dag/dag.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "is_empty_fct_unused_sources_"
            ],
            "alias": "is_empty_fct_unused_sources_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7456815,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_unused_sources",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_unused_sources"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_unused_sources",
            "attached_node": "model.dbt_project_evaluator.fct_unused_sources",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_unused_sources')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_exposure_parents_materializations_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_exposure_parents_materializations_.sql",
            "original_file_path": "models/marts/dag/dag.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "is_empty_fct_exposure_parents_materializations_"
            ],
            "alias": "is_empty_fct_exposure_parents_materializations_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7490497,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_exposure_parents_materializations",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_exposure_parents_materializations"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_exposure_parents_materializations",
            "attached_node": "model.dbt_project_evaluator.fct_exposure_parents_materializations",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_exposure_parents_materializations')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_hard_coded_references_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_hard_coded_references_.sql",
            "original_file_path": "models/marts/dag/dag.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "is_empty_fct_hard_coded_references_"
            ],
            "alias": "is_empty_fct_hard_coded_references_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7519734,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_hard_coded_references",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_hard_coded_references"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_hard_coded_references",
            "attached_node": "model.dbt_project_evaluator.fct_hard_coded_references",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_hard_coded_references')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_too_many_joins_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_too_many_joins_.sql",
            "original_file_path": "models/marts/dag/dag.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "dag",
                "is_empty_fct_too_many_joins_"
            ],
            "alias": "is_empty_fct_too_many_joins_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.755357,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_too_many_joins",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_too_many_joins"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_too_many_joins",
            "attached_node": "model.dbt_project_evaluator.fct_too_many_joins",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_too_many_joins')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_model_directories_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_model_directories_.sql",
            "original_file_path": "models/marts/structure/structure.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "structure",
                "is_empty_fct_model_directories_"
            ],
            "alias": "is_empty_fct_model_directories_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7599041,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_model_directories",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_model_directories"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_model_directories",
            "attached_node": "model.dbt_project_evaluator.fct_model_directories",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_model_directories')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_model_naming_conventions_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_model_naming_conventions_.sql",
            "original_file_path": "models/marts/structure/structure.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "structure",
                "is_empty_fct_model_naming_conventions_"
            ],
            "alias": "is_empty_fct_model_naming_conventions_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7624934,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_model_naming_conventions",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_model_naming_conventions"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_model_naming_conventions",
            "attached_node": "model.dbt_project_evaluator.fct_model_naming_conventions",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_model_naming_conventions')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_source_directories_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_source_directories_.sql",
            "original_file_path": "models/marts/structure/structure.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "structure",
                "is_empty_fct_source_directories_"
            ],
            "alias": "is_empty_fct_source_directories_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.766095,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_source_directories",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_source_directories"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_source_directories",
            "attached_node": "model.dbt_project_evaluator.fct_source_directories",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_source_directories')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_test_directories_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_test_directories_.sql",
            "original_file_path": "models/marts/structure/structure.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "structure",
                "is_empty_fct_test_directories_"
            ],
            "alias": "is_empty_fct_test_directories_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7682297,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_test_directories",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_test_directories"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_test_directories",
            "attached_node": "model.dbt_project_evaluator.fct_test_directories",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_test_directories')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.valid_test_coverage.df03f31e09": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "valid_test_coverage",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "valid_test_coverage.sql",
            "original_file_path": "models/marts/tests/testing.yml",
            "unique_id": "test.dbt_project_evaluator.valid_test_coverage.df03f31e09",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "tests",
                "valid_test_coverage"
            ],
            "alias": "valid_test_coverage",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn"
            },
            "created_at": 1721827582.7723148,
            "relation_name": null,
            "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_test_coverage",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_accepted_range",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_test_coverage"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "test_coverage_pct",
            "file_key_name": "models.fct_test_coverage",
            "attached_node": "model.dbt_project_evaluator.fct_test_coverage",
            "test_metadata": {
                "name": "accepted_range",
                "kwargs": {
                    "min_value": "{{ var('test_coverage_target') }}",
                    "column_name": "test_coverage_pct",
                    "model": "{{ get_where_subquery(ref('fct_test_coverage')) }}"
                },
                "namespace": "dbt_utils"
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_missing_primary_key_tests_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_missing_primary_key_tests_.sql",
            "original_file_path": "models/marts/tests/testing.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "tests",
                "is_empty_fct_missing_primary_key_tests_"
            ],
            "alias": "is_empty_fct_missing_primary_key_tests_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7786803,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_missing_primary_key_tests",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_missing_primary_key_tests"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_missing_primary_key_tests",
            "attached_node": "model.dbt_project_evaluator.fct_missing_primary_key_tests",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_missing_primary_key_tests')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "valid_documentation_coverage",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "valid_documentation_coverage.sql",
            "original_file_path": "models/marts/documentation/documentation.yml",
            "unique_id": "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "documentation",
                "valid_documentation_coverage"
            ],
            "alias": "valid_documentation_coverage",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "count(*)",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn"
            },
            "created_at": 1721827582.7840552,
            "relation_name": null,
            "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_documentation_coverage",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.test_accepted_range",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_documentation_coverage"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": "documentation_coverage_pct",
            "file_key_name": "models.fct_documentation_coverage",
            "attached_node": "model.dbt_project_evaluator.fct_documentation_coverage",
            "test_metadata": {
                "name": "accepted_range",
                "kwargs": {
                    "min_value": "{{ var('documentation_coverage_target') }}",
                    "column_name": "documentation_coverage_pct",
                    "model": "{{ get_where_subquery(ref('fct_documentation_coverage')) }}"
                },
                "namespace": "dbt_utils"
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_undocumented_models_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_undocumented_models_.sql",
            "original_file_path": "models/marts/documentation/documentation.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "documentation",
                "is_empty_fct_undocumented_models_"
            ],
            "alias": "is_empty_fct_undocumented_models_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7870824,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_undocumented_models",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_undocumented_models"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_undocumented_models",
            "attached_node": "model.dbt_project_evaluator.fct_undocumented_models",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_undocumented_models')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_undocumented_source_tables_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_undocumented_source_tables_.sql",
            "original_file_path": "models/marts/documentation/documentation.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "documentation",
                "is_empty_fct_undocumented_source_tables_"
            ],
            "alias": "is_empty_fct_undocumented_source_tables_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7902546,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_undocumented_source_tables",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_undocumented_source_tables"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_undocumented_source_tables",
            "attached_node": "model.dbt_project_evaluator.fct_undocumented_source_tables",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_undocumented_source_tables')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_undocumented_sources_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_undocumented_sources_.sql",
            "original_file_path": "models/marts/documentation/documentation.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "documentation",
                "is_empty_fct_undocumented_sources_"
            ],
            "alias": "is_empty_fct_undocumented_sources_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.792668,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_undocumented_sources",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_undocumented_sources"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_undocumented_sources",
            "attached_node": "model.dbt_project_evaluator.fct_undocumented_sources",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_undocumented_sources')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_public_models_without_contract_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_public_models_without_contract_.sql",
            "original_file_path": "models/marts/governance/governance.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "governance",
                "is_empty_fct_public_models_without_contract_"
            ],
            "alias": "is_empty_fct_public_models_without_contract_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.7960596,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_public_models_without_contract",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_public_models_without_contract"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_public_models_without_contract",
            "attached_node": "model.dbt_project_evaluator.fct_public_models_without_contract",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_public_models_without_contract')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_undocumented_public_models_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_undocumented_public_models_.sql",
            "original_file_path": "models/marts/governance/governance.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "governance",
                "is_empty_fct_undocumented_public_models_"
            ],
            "alias": "is_empty_fct_undocumented_public_models_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.798936,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_undocumented_public_models",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_undocumented_public_models"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_undocumented_public_models",
            "attached_node": "model.dbt_project_evaluator.fct_undocumented_public_models",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_undocumented_public_models')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_exposures_dependent_on_private_models_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_exposures_dependent_on_private_models_.sql",
            "original_file_path": "models/marts/governance/governance.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "governance",
                "is_empty_fct_exposures_dependent_on_private_models_"
            ],
            "alias": "is_empty_fct_exposures_dependent_on_private_models_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.801216,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_exposures_dependent_on_private_models",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_exposures_dependent_on_private_models",
            "attached_node": "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_exposures_dependent_on_private_models')) }}"
                },
                "namespace": null
            }
        },
        "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33": {
            "database": "memory",
            "schema": "main_dbt_test__audit",
            "name": "is_empty_fct_chained_views_dependencies_",
            "resource_type": "test",
            "package_name": "dbt_project_evaluator",
            "path": "is_empty_fct_chained_views_dependencies_.sql",
            "original_file_path": "models/marts/performance/performance.yml",
            "unique_id": "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33",
            "fqn": [
                "dbt_project_evaluator",
                "marts",
                "performance",
                "is_empty_fct_chained_views_dependencies_"
            ],
            "alias": "is_empty_fct_chained_views_dependencies_",
            "checksum": {
                "name": "none",
                "checksum": ""
            },
            "config": {
                "enabled": true,
                "alias": null,
                "schema": "dbt_test__audit",
                "database": null,
                "tags": [],
                "meta": {},
                "group": null,
                "materialized": "test",
                "severity": "warn",
                "store_failures": null,
                "store_failures_as": null,
                "where": null,
                "limit": null,
                "fail_calc": "n_records",
                "warn_if": "!= 0",
                "error_if": "!= 0"
            },
            "tags": [],
            "description": "",
            "columns": {},
            "meta": {},
            "group": null,
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "build_path": null,
            "unrendered_config": {
                "severity": "warn",
                "fail_calc": "n_records"
            },
            "created_at": 1721827582.8050096,
            "relation_name": null,
            "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}",
            "language": "sql",
            "refs": [
                {
                    "name": "fct_chained_views_dependencies",
                    "package": null,
                    "version": null
                }
            ],
            "sources": [],
            "metrics": [],
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.test_is_empty",
                    "macro.dbt.get_where_subquery"
                ],
                "nodes": [
                    "model.dbt_project_evaluator.fct_chained_views_dependencies"
                ]
            },
            "compiled_path": null,
            "contract": {
                "enforced": false,
                "alias_types": true,
                "checksum": null
            },
            "column_name": null,
            "file_key_name": "models.fct_chained_views_dependencies",
            "attached_node": "model.dbt_project_evaluator.fct_chained_views_dependencies",
            "test_metadata": {
                "name": "is_empty",
                "kwargs": {
                    "model": "{{ get_where_subquery(ref('fct_chained_views_dependencies')) }}"
                },
                "namespace": null
            }
        }
    },
    "sources": {
        "source.dbt_bouncer_test_project.source.source_1": {
            "database": "memory",
            "schema": "source",
            "name": "source_1",
            "resource_type": "source",
            "package_name": "dbt_bouncer_test_project",
            "path": "models/staging/_source.yml",
            "original_file_path": "models/staging/_source.yml",
            "unique_id": "source.dbt_bouncer_test_project.source.source_1",
            "fqn": [
                "dbt_bouncer_test_project",
                "staging",
                "source",
                "source_1"
            ],
            "source_name": "source",
            "source_description": "",
            "loader": "",
            "identifier": "source_1",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {
                "contact": {
                    "email": "anna@email.com",
                    "name": {
                        "first": "Anna",
                        "last": "Anderson"
                    },
                    "slack": "@anna"
                },
                "maturity": "high",
                "owner": "Anna"
            },
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"memory\".\"source\".\"source_1\"",
            "created_at": 1721832513.1296437
        },
        "source.dbt_bouncer_test_project.source.source_2": {
            "database": "memory",
            "schema": "source",
            "name": "source_2",
            "resource_type": "source",
            "package_name": "dbt_bouncer_test_project",
            "path": "models/staging/_source.yml",
            "original_file_path": "models/staging/_source.yml",
            "unique_id": "source.dbt_bouncer_test_project.source.source_2",
            "fqn": [
                "dbt_bouncer_test_project",
                "staging",
                "source",
                "source_2"
            ],
            "source_name": "source",
            "source_description": "",
            "loader": "",
            "identifier": "source_2",
            "quoting": {
                "database": null,
                "schema": null,
                "identifier": null,
                "column": null
            },
            "loaded_at_field": null,
            "freshness": {
                "warn_after": {
                    "count": null,
                    "period": null
                },
                "error_after": {
                    "count": null,
                    "period": null
                },
                "filter": null
            },
            "external": null,
            "description": "",
            "columns": {},
            "meta": {
                "contact": {
                    "email": "annabelle@email.com",
                    "slack": "@therealanna"
                },
                "owner": "Annabelle"
            },
            "source_meta": {},
            "tags": [],
            "config": {
                "enabled": true
            },
            "patch_path": null,
            "unrendered_config": {},
            "relation_name": "\"memory\".\"source\".\"source_2\"",
            "created_at": 1721832513.1356952
        }
    },
    "macros": {
        "macro.dbt_bouncer_test_project.cents_to_dollars": {
            "name": "cents_to_dollars",
            "resource_type": "macro",
            "package_name": "dbt_bouncer_test_project",
            "path": "macros/cents_to_dollars.sql",
            "original_file_path": "macros/cents_to_dollars.sql",
            "unique_id": "macro.dbt_bouncer_test_project.cents_to_dollars",
            "macro_sql": "{% macro cents_to_dollars(column_name) %} ({{ column_name }} / 100) {% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "Macro to converts values in cents to dollars",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_bouncer_test_project://macros/_macros.yml",
            "arguments": [
                {
                    "name": "amount",
                    "type": null,
                    "description": "A column that contains values in cents"
                }
            ],
            "created_at": 1721827582.514028,
            "supported_languages": null
        },
        "macro.dbt_bouncer_test_project.generate_schema_name": {
            "name": "generate_schema_name",
            "resource_type": "macro",
            "package_name": "dbt_bouncer_test_project",
            "path": "macros/generate_schema_name.sql",
            "original_file_path": "macros/generate_schema_name.sql",
            "unique_id": "macro.dbt_bouncer_test_project.generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {#\n        Enter this block when run on stg or prd (except for CICD runs).\n        We want the same dataset and table names to be used across all environments.\n        For example, `marts.dim_customer` should exist in stg and prd, i.e. there should be no references to the project in the dataset name.\n        This will allow other tooling (BI, CICD scripts, etc.) to work across all environments without the need for differing logic per environment.\n    #}\n    {% if env_var(\"DBT_CICD_RUN\", \"false\") == \"true\" %} {{ env_var(\"DBT_DATASET\") }}\n\n    {% elif target.name in [\"stg\", \"prd\"] and env_var(\n        \"DBT_CICD_RUN\", \"false\"\n    ) == \"false\" %}\n\n        {{ node.config.schema }}\n\n    {% else %} {{ default__generate_schema_name(custom_schema_name, node) }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_schema_name"
                ]
            },
            "description": "A macro that uses the DBT_DATASET env var only when using the dev target. On the stg and prd targets this env var is not used. This ensures that systems that read from the stg and prd BigQuery instances can use the same dataset and table names, they only need to vary the GCP project id.",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_bouncer_test_project://macros/_macros.yml",
            "arguments": [],
            "created_at": 1721827582.5147047,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__create_schema": {
            "name": "duckdb__create_schema",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__create_schema",
            "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    {% set sql %}\n        select type from duckdb_databases()\n        where database_name='{{ relation.database }}'\n        and type='sqlite'\n    {% endset %}\n    {% set results = run_query(sql) %}\n    {% if results|length == 0 %}\n        create schema if not exists {{ relation.without_identifier() }}\n    {% else %}\n        {% if relation.schema!='main' %}\n            {{ exceptions.raise_compiler_error(\n                \"Schema must be 'main' when writing to sqlite \"\n                ~ \"instead got \" ~ relation.schema\n            )}}\n        {% endif %}\n    {% endif %}\n  {%- endcall -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8654876,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__drop_schema": {
            "name": "duckdb__drop_schema",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__drop_schema",
            "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {%- endcall -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8657556,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__list_schemas": {
            "name": "duckdb__list_schemas",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__list_schemas",
            "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from system.information_schema.schemata\n    {% if database is not none %}\n    where catalog_name = '{{ database }}'\n    {% endif %}\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8661299,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__check_schema_exists": {
            "name": "duckdb__check_schema_exists",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists",
            "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from system.information_schema.schemata\n        where schema_name = '{{ schema }}'\n        and catalog_name = '{{ information_schema.database }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8664646,
            "supported_languages": null
        },
        "macro.dbt_duckdb.get_column_names": {
            "name": "get_column_names",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.get_column_names",
            "macro_sql": "{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8669152,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__create_table_as": {
            "name": "duckdb__create_table_as",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__create_table_as",
            "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(compiled_code) }}\n    {% endif %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% if contract_config.enforced and not temporary %}\n    {#-- DuckDB doesnt support constraints on temp tables --#}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }} (\n      {{ get_select_subquery(compiled_code) }}\n    );\n  {% else %}\n    as (\n      {{ compiled_code }}\n    );\n  {% endif %}\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent",
                    "macro.dbt.get_table_columns_and_constraints",
                    "macro.dbt_duckdb.get_column_names",
                    "macro.dbt.get_select_subquery",
                    "macro.dbt_duckdb.py_write_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8682516,
            "supported_languages": null
        },
        "macro.dbt_duckdb.py_write_table": {
            "name": "py_write_table",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.py_write_table",
            "macro_sql": "{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n    finally:\n        if pyarrow_available and isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    con.execute('create table {{ relation }} as select * from df')\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.868468,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__create_view_as": {
            "name": "duckdb__create_view_as",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__create_view_as",
            "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8695219,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__get_columns_in_relation": {
            "name": "duckdb__get_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation",
            "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from system.information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n      {% if relation.schema %}\n      and table_schema = '{{ relation.schema }}'\n      {% endif %}\n      {% if relation.database %}\n      and table_catalog = '{{ relation.database }}'\n      {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.sql_convert_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.870207,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__list_relations_without_caching": {
            "name": "duckdb__list_relations_without_caching",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching",
            "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from system.information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n    and table_catalog = '{{ schema_relation.database }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8706386,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__drop_relation": {
            "name": "duckdb__drop_relation",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__drop_relation",
            "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8709133,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__rename_relation": {
            "name": "duckdb__rename_relation",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__rename_relation",
            "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8713112,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__make_temp_relation": {
            "name": "duckdb__make_temp_relation",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation",
            "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.py_current_timestring"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8717782,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__current_timestamp": {
            "name": "duckdb__current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__current_timestamp",
            "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.871905,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {
            "name": "duckdb__snapshot_string_as_time",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time",
            "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8721743,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__snapshot_get_time": {
            "name": "duckdb__snapshot_get_time",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time",
            "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8723357,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__get_incremental_default_sql": {
            "name": "duckdb__get_incremental_default_sql",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_default_sql",
            "macro_sql": "{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_incremental_delete_insert_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.872573,
            "supported_languages": null
        },
        "macro.dbt_duckdb.location_exists": {
            "name": "location_exists",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.location_exists",
            "macro_sql": "{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.872804,
            "supported_languages": null
        },
        "macro.dbt_duckdb.write_to_file": {
            "name": "write_to_file",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.write_to_file",
            "macro_sql": "{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8731363,
            "supported_languages": null
        },
        "macro.dbt_duckdb.store_relation": {
            "name": "store_relation",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.store_relation",
            "macro_sql": "{% macro store_relation(plugin, relation, location, format, config) -%}\n  {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n  {% do adapter.store_relation(plugin, relation, column_list, location, format, config) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8735132,
            "supported_languages": null
        },
        "macro.dbt_duckdb.render_write_options": {
            "name": "render_write_options",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/adapters.sql",
            "original_file_path": "macros/adapters.sql",
            "unique_id": "macro.dbt_duckdb.render_write_options",
            "macro_sql": "{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% if options is not mapping %}\n    {% do exceptions.raise_compiler_error(\"The options argument must be a dictionary\") %}\n  {% endif %}\n\n  {% for k in options %}\n    {% set _ = options.update({k: render(options[k])}) %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8753955,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__get_catalog": {
            "name": "duckdb__get_catalog",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/catalog.sql",
            "original_file_path": "macros/catalog.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__get_catalog",
            "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    with relations AS (\n      select\n        t.table_name\n        , t.database_name\n        , t.schema_name\n        , 'BASE TABLE' as table_type\n        , {{ adapter.catalog_comment('t') }} as table_comment\n      from duckdb_tables() t\n      WHERE t.database_name = '{{ database }}'\n      UNION ALL\n      SELECT v.view_name as table_name\n      , v.database_name\n      , v.schema_name\n      , 'VIEW' as table_type\n      , {{ adapter.catalog_comment('v') }} as table_comment\n      from duckdb_views() v\n      WHERE v.database_name = '{{ database }}'\n    )\n    select\n        '{{ database }}' as table_database,\n        r.schema_name as table_schema,\n        r.table_name,\n        r.table_type,\n        r.table_comment,\n        c.column_name,\n        c.column_index as column_index,\n        c.data_type as column_type,\n        {{ adapter.catalog_comment('c') }} as column_comment,\n        '' as table_owner\n    FROM relations r JOIN duckdb_columns() c ON r.schema_name = c.schema_name AND r.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(r.schema_name) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    ORDER BY\n        r.schema_name,\n        r.table_name,\n        c.column_index\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8767946,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__get_binding_char": {
            "name": "duckdb__get_binding_char",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/seed.sql",
            "original_file_path": "macros/seed.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__get_binding_char",
            "macro_sql": "{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.878605,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__get_batch_size": {
            "name": "duckdb__get_batch_size",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/seed.sql",
            "original_file_path": "macros/seed.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__get_batch_size",
            "macro_sql": "{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8789053,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__load_csv_rows": {
            "name": "duckdb__load_csv_rows",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/seed.sql",
            "original_file_path": "macros/seed.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows",
            "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% if config.get('fast', true) %}\n        {% set seed_file_path = adapter.get_seed_file_path(model) %}\n        {% set delimiter = config.get('delimiter', ',') %}\n        {% set sql %}\n          COPY {{ this.render() }} FROM '{{ seed_file_path }}' (FORMAT CSV, HEADER TRUE, DELIMITER '{{ delimiter }}')\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n        {{ return(sql) }}\n    {% endif %}\n\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_batch_size",
                    "macro.dbt.get_seed_column_quoted_csv",
                    "macro.dbt.get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8813603,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb_escape_comment": {
            "name": "duckdb_escape_comment",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/persist_docs.sql",
            "original_file_path": "macros/persist_docs.sql",
            "unique_id": "macro.dbt_duckdb.duckdb_escape_comment",
            "macro_sql": "{% macro duckdb_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8825605,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__alter_relation_comment": {
            "name": "duckdb__alter_relation_comment",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/persist_docs.sql",
            "original_file_path": "macros/persist_docs.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_comment",
            "macro_sql": "{% macro duckdb__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = duckdb_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb_escape_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8828335,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__alter_column_comment": {
            "name": "duckdb__alter_column_comment",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/persist_docs.sql",
            "original_file_path": "macros/persist_docs.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__alter_column_comment",
            "macro_sql": "{% macro duckdb__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = duckdb_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb_escape_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8835268,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns": {
            "name": "duckdb__alter_relation_add_remove_columns",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/columns.sql",
            "original_file_path": "macros/columns.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns",
            "macro_sql": "{% macro duckdb__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n    {% for column in add_columns %}\n      {% set sql -%}\n         alter {{ relation.type }} {{ relation }} add column\n           {{ column.name }} {{ column.data_type }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n  {% if remove_columns %}\n    {% for column in remove_columns %}\n      {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n          {{ column.name }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.884668,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql": {
            "name": "duckdb__get_delete_insert_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/incremental_helper.sql",
            "original_file_path": "macros/incremental_helper.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql",
            "macro_sql": "{% macro duckdb__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }} as DBT_INCREMENTAL_TARGET\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = DBT_INCREMENTAL_TARGET.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8869436,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {
            "name": "duckdb__snapshot_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/snapshot_helper.sql",
            "original_file_path": "macros/snapshot_helper.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql",
            "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }} as DBT_INTERNAL_TARGET\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = DBT_INTERNAL_TARGET.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and DBT_INTERNAL_TARGET.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8880408,
            "supported_languages": null
        },
        "macro.dbt_duckdb.build_snapshot_staging_table": {
            "name": "build_snapshot_staging_table",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/snapshot_helper.sql",
            "original_file_path": "macros/snapshot_helper.sql",
            "unique_id": "macro.dbt_duckdb.build_snapshot_staging_table",
            "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.snapshot_staging_table",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8886504,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__post_snapshot": {
            "name": "duckdb__post_snapshot",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/snapshot_helper.sql",
            "original_file_path": "macros/snapshot_helper.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__post_snapshot",
            "macro_sql": "{% macro duckdb__post_snapshot(staging_relation) %}\n    {% do return(drop_relation(staging_relation)) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.drop_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8893065,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__datediff": {
            "name": "duckdb__datediff",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__datediff",
            "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n    date_diff('{{ datepart }}', {{ first_date }}::timestamp, {{ second_date}}::timestamp )\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8896341,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__dateadd": {
            "name": "duckdb__dateadd",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__dateadd",
            "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    date_add({{ from_date_or_timestamp }}, interval ({{ interval }}) {{ datepart }})\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8899064,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__last_day": {
            "name": "duckdb__last_day",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/utils/lastday.sql",
            "original_file_path": "macros/utils/lastday.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__last_day",
            "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.date_trunc",
                    "macro.dbt.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8905194,
            "supported_languages": null
        },
        "macro.dbt_duckdb.register_upstream_external_models": {
            "name": "register_upstream_external_models",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/utils/upstream.sql",
            "original_file_path": "macros/utils/upstream.sql",
            "unique_id": "macro.dbt_duckdb.register_upstream_external_models",
            "macro_sql": "{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.external_location",
                    "macro.dbt_duckdb.render_write_options",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.893772,
            "supported_languages": null
        },
        "macro.dbt_duckdb.external_location": {
            "name": "external_location",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/utils/external_location.sql",
            "original_file_path": "macros/utils/external_location.sql",
            "unique_id": "macro.dbt_duckdb.external_location",
            "macro_sql": "{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8945296,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__listagg": {
            "name": "duckdb__listagg",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__listagg",
            "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8952894,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__any_value": {
            "name": "duckdb__any_value",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/utils/any_value.sql",
            "original_file_path": "macros/utils/any_value.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__any_value",
            "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8954735,
            "supported_languages": null
        },
        "macro.dbt_duckdb.duckdb__split_part": {
            "name": "duckdb__split_part",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/utils/splitpart.sql",
            "original_file_path": "macros/utils/splitpart.sql",
            "unique_id": "macro.dbt_duckdb.duckdb__split_part",
            "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n    string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ]\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.8958054,
            "supported_languages": null
        },
        "macro.dbt_duckdb.materialization_incremental_duckdb": {
            "name": "materialization_incremental_duckdb",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/materializations/incremental.sql",
            "original_file_path": "macros/materializations/incremental.sql",
            "unique_id": "macro.dbt_duckdb.materialization_incremental_duckdb",
            "macro_sql": "{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n  -- only create temp tables if using local duckdb, as it is not currently supported for remote databases\n  {%- set temporary = not adapter.is_motherduck() -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if not temporary %}\n      -- if not using a temporary table we will update the temp relation to use a different temp schema (\"dbt_temp\" by default)\n      {% set temp_relation = temp_relation.incorporate(path=adapter.get_temp_relation_path(this)) %}\n      {% do run_query(create_schema(temp_relation)) %}\n      -- then drop the temp relation after we insert the incremental data into the target relation\n      {% do to_drop.append(temp_relation) %}\n    {% endif %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(temporary, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.create_table_as",
                    "macro.dbt.run_query",
                    "macro.dbt.create_schema",
                    "macro.dbt.statement",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9040182,
            "supported_languages": [
                "sql",
                "python"
            ]
        },
        "macro.dbt_duckdb.materialization_external_duckdb": {
            "name": "materialization_external_duckdb",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/materializations/external.sql",
            "original_file_path": "macros/materializations/external.sql",
            "unique_id": "macro.dbt_duckdb.materialization_external_duckdb",
            "macro_sql": "{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n  {%- set format = config.get('format', 'parquet') -%}\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- write an temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n  -- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    create or replace view {{ intermediate_relation }} as (\n        select * from '{{ read_location }}'\n    );\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set plugin_name = config.get('plugin') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {%- set partition_columns = config.get('partition_columns', []) -%}\n  {% if plugin_name is not none or glue_register is true %}\n    {% if glue_register %}\n      {# legacy hack to set the glue database name, deprecate this #}\n      {%- set plugin_name = 'glue|' ~ config.get('glue_database', 'default') -%}\n    {% endif %}\n    {% do store_relation(plugin_name, target_relation, location, format, config) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.external_location",
                    "macro.dbt_duckdb.render_write_options",
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt_duckdb.write_to_file",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt_duckdb.store_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9109318,
            "supported_languages": [
                "sql",
                "python"
            ]
        },
        "macro.dbt_duckdb.materialization_table_duckdb": {
            "name": "materialization_table_duckdb",
            "resource_type": "macro",
            "package_name": "dbt_duckdb",
            "path": "macros/materializations/table.sql",
            "original_file_path": "macros/materializations/table.sql",
            "unique_id": "macro.dbt_duckdb.materialization_table_duckdb",
            "macro_sql": "{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as",
                    "macro.dbt.create_indexes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9150012,
            "supported_languages": [
                "sql",
                "python"
            ]
        },
        "macro.dbt.get_fixture_sql": {
            "name": "get_fixture_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/unit_test_sql/get_fixture_sql.sql",
            "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql",
            "unique_id": "macro.dbt.get_fixture_sql",
            "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_relation",
                    "macro.dbt.safe_cast",
                    "macro.dbt.format_row"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9187942,
            "supported_languages": null
        },
        "macro.dbt.get_expected_sql": {
            "name": "get_expected_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/unit_test_sql/get_fixture_sql.sql",
            "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql",
            "unique_id": "macro.dbt.get_expected_sql",
            "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.format_row"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.91954,
            "supported_languages": null
        },
        "macro.dbt.format_row": {
            "name": "format_row",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/unit_test_sql/get_fixture_sql.sql",
            "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql",
            "unique_id": "macro.dbt.format_row",
            "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.string_literal",
                    "macro.dbt.escape_single_quotes",
                    "macro.dbt.safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9210556,
            "supported_languages": null
        },
        "macro.dbt.escape_single_quotes": {
            "name": "escape_single_quotes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/escape_single_quotes.sql",
            "original_file_path": "macros/utils/escape_single_quotes.sql",
            "unique_id": "macro.dbt.escape_single_quotes",
            "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.92144,
            "supported_languages": null
        },
        "macro.dbt.default__escape_single_quotes": {
            "name": "default__escape_single_quotes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/escape_single_quotes.sql",
            "original_file_path": "macros/utils/escape_single_quotes.sql",
            "unique_id": "macro.dbt.default__escape_single_quotes",
            "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9216487,
            "supported_languages": null
        },
        "macro.dbt.split_part": {
            "name": "split_part",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "unique_id": "macro.dbt.split_part",
            "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9222708,
            "supported_languages": null
        },
        "macro.dbt.default__split_part": {
            "name": "default__split_part",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "unique_id": "macro.dbt.default__split_part",
            "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9224894,
            "supported_languages": null
        },
        "macro.dbt._split_part_negative": {
            "name": "_split_part_negative",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/split_part.sql",
            "original_file_path": "macros/utils/split_part.sql",
            "unique_id": "macro.dbt._split_part_negative",
            "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.922774,
            "supported_languages": null
        },
        "macro.dbt.string_literal": {
            "name": "string_literal",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/literal.sql",
            "original_file_path": "macros/utils/literal.sql",
            "unique_id": "macro.dbt.string_literal",
            "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.923086,
            "supported_languages": null
        },
        "macro.dbt.default__string_literal": {
            "name": "default__string_literal",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/literal.sql",
            "original_file_path": "macros/utils/literal.sql",
            "unique_id": "macro.dbt.default__string_literal",
            "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.923226,
            "supported_languages": null
        },
        "macro.dbt.datediff": {
            "name": "datediff",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "unique_id": "macro.dbt.datediff",
            "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9236298,
            "supported_languages": null
        },
        "macro.dbt.default__datediff": {
            "name": "default__datediff",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/datediff.sql",
            "original_file_path": "macros/utils/datediff.sql",
            "unique_id": "macro.dbt.default__datediff",
            "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9238489,
            "supported_languages": null
        },
        "macro.dbt.array_concat": {
            "name": "array_concat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_concat.sql",
            "original_file_path": "macros/utils/array_concat.sql",
            "unique_id": "macro.dbt.array_concat",
            "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__array_concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.924193,
            "supported_languages": null
        },
        "macro.dbt.default__array_concat": {
            "name": "default__array_concat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_concat.sql",
            "original_file_path": "macros/utils/array_concat.sql",
            "unique_id": "macro.dbt.default__array_concat",
            "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9243648,
            "supported_languages": null
        },
        "macro.dbt.dateadd": {
            "name": "dateadd",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "unique_id": "macro.dbt.dateadd",
            "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9252098,
            "supported_languages": null
        },
        "macro.dbt.default__dateadd": {
            "name": "default__dateadd",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/dateadd.sql",
            "original_file_path": "macros/utils/dateadd.sql",
            "unique_id": "macro.dbt.default__dateadd",
            "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9254854,
            "supported_languages": null
        },
        "macro.dbt.cast": {
            "name": "cast",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/cast.sql",
            "original_file_path": "macros/utils/cast.sql",
            "unique_id": "macro.dbt.cast",
            "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9258947,
            "supported_languages": null
        },
        "macro.dbt.default__cast": {
            "name": "default__cast",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/cast.sql",
            "original_file_path": "macros/utils/cast.sql",
            "unique_id": "macro.dbt.default__cast",
            "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.92656,
            "supported_languages": null
        },
        "macro.dbt.array_append": {
            "name": "array_append",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_append.sql",
            "original_file_path": "macros/utils/array_append.sql",
            "unique_id": "macro.dbt.array_append",
            "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__array_append"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9270382,
            "supported_languages": null
        },
        "macro.dbt.default__array_append": {
            "name": "default__array_append",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_append.sql",
            "original_file_path": "macros/utils/array_append.sql",
            "unique_id": "macro.dbt.default__array_append",
            "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9272664,
            "supported_languages": null
        },
        "macro.dbt.concat": {
            "name": "concat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/concat.sql",
            "original_file_path": "macros/utils/concat.sql",
            "unique_id": "macro.dbt.concat",
            "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9276392,
            "supported_languages": null
        },
        "macro.dbt.default__concat": {
            "name": "default__concat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/concat.sql",
            "original_file_path": "macros/utils/concat.sql",
            "unique_id": "macro.dbt.default__concat",
            "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9278357,
            "supported_languages": null
        },
        "macro.dbt.type_string": {
            "name": "type_string",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_string",
            "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9290805,
            "supported_languages": null
        },
        "macro.dbt.default__type_string": {
            "name": "default__type_string",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_string",
            "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.929329,
            "supported_languages": null
        },
        "macro.dbt.type_timestamp": {
            "name": "type_timestamp",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_timestamp",
            "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9295907,
            "supported_languages": null
        },
        "macro.dbt.default__type_timestamp": {
            "name": "default__type_timestamp",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_timestamp",
            "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9298365,
            "supported_languages": null
        },
        "macro.dbt.type_float": {
            "name": "type_float",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_float",
            "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_float"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.930104,
            "supported_languages": null
        },
        "macro.dbt.default__type_float": {
            "name": "default__type_float",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_float",
            "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9303198,
            "supported_languages": null
        },
        "macro.dbt.type_numeric": {
            "name": "type_numeric",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_numeric",
            "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.930529,
            "supported_languages": null
        },
        "macro.dbt.default__type_numeric": {
            "name": "default__type_numeric",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_numeric",
            "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9307556,
            "supported_languages": null
        },
        "macro.dbt.type_bigint": {
            "name": "type_bigint",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_bigint",
            "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_bigint"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9309635,
            "supported_languages": null
        },
        "macro.dbt.default__type_bigint": {
            "name": "default__type_bigint",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_bigint",
            "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.931161,
            "supported_languages": null
        },
        "macro.dbt.type_int": {
            "name": "type_int",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_int",
            "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_int"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.931361,
            "supported_languages": null
        },
        "macro.dbt.default__type_int": {
            "name": "default__type_int",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_int",
            "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.931543,
            "supported_languages": null
        },
        "macro.dbt.type_boolean": {
            "name": "type_boolean",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.type_boolean",
            "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__type_boolean"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9317448,
            "supported_languages": null
        },
        "macro.dbt.default__type_boolean": {
            "name": "default__type_boolean",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/data_types.sql",
            "original_file_path": "macros/utils/data_types.sql",
            "unique_id": "macro.dbt.default__type_boolean",
            "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9319353,
            "supported_languages": null
        },
        "macro.dbt.array_construct": {
            "name": "array_construct",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_construct.sql",
            "original_file_path": "macros/utils/array_construct.sql",
            "unique_id": "macro.dbt.array_construct",
            "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__array_construct"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9328454,
            "supported_languages": null
        },
        "macro.dbt.default__array_construct": {
            "name": "default__array_construct",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/array_construct.sql",
            "original_file_path": "macros/utils/array_construct.sql",
            "unique_id": "macro.dbt.default__array_construct",
            "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9331722,
            "supported_languages": null
        },
        "macro.dbt.date": {
            "name": "date",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date.sql",
            "original_file_path": "macros/utils/date.sql",
            "unique_id": "macro.dbt.date",
            "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__date"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9335845,
            "supported_languages": null
        },
        "macro.dbt.default__date": {
            "name": "default__date",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date.sql",
            "original_file_path": "macros/utils/date.sql",
            "unique_id": "macro.dbt.default__date",
            "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.933967,
            "supported_languages": null
        },
        "macro.dbt.bool_or": {
            "name": "bool_or",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/bool_or.sql",
            "original_file_path": "macros/utils/bool_or.sql",
            "unique_id": "macro.dbt.bool_or",
            "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__bool_or"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.934287,
            "supported_languages": null
        },
        "macro.dbt.default__bool_or": {
            "name": "default__bool_or",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/bool_or.sql",
            "original_file_path": "macros/utils/bool_or.sql",
            "unique_id": "macro.dbt.default__bool_or",
            "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.934431,
            "supported_languages": null
        },
        "macro.dbt.right": {
            "name": "right",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/right.sql",
            "original_file_path": "macros/utils/right.sql",
            "unique_id": "macro.dbt.right",
            "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__right"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9347854,
            "supported_languages": null
        },
        "macro.dbt.default__right": {
            "name": "default__right",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/right.sql",
            "original_file_path": "macros/utils/right.sql",
            "unique_id": "macro.dbt.default__right",
            "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.934956,
            "supported_languages": null
        },
        "macro.dbt.position": {
            "name": "position",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/position.sql",
            "original_file_path": "macros/utils/position.sql",
            "unique_id": "macro.dbt.position",
            "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__position"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9352863,
            "supported_languages": null
        },
        "macro.dbt.default__position": {
            "name": "default__position",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/position.sql",
            "original_file_path": "macros/utils/position.sql",
            "unique_id": "macro.dbt.default__position",
            "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9354465,
            "supported_languages": null
        },
        "macro.dbt.last_day": {
            "name": "last_day",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "unique_id": "macro.dbt.last_day",
            "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9358068,
            "supported_languages": null
        },
        "macro.dbt.default_last_day": {
            "name": "default_last_day",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "unique_id": "macro.dbt.default_last_day",
            "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9361026,
            "supported_languages": null
        },
        "macro.dbt.default__last_day": {
            "name": "default__last_day",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/last_day.sql",
            "original_file_path": "macros/utils/last_day.sql",
            "unique_id": "macro.dbt.default__last_day",
            "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default_last_day"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9362686,
            "supported_languages": null
        },
        "macro.dbt.listagg": {
            "name": "listagg",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "unique_id": "macro.dbt.listagg",
            "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__listagg"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.936912,
            "supported_languages": null
        },
        "macro.dbt.default__listagg": {
            "name": "default__listagg",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/listagg.sql",
            "original_file_path": "macros/utils/listagg.sql",
            "unique_id": "macro.dbt.default__listagg",
            "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9373925,
            "supported_languages": null
        },
        "macro.dbt.replace": {
            "name": "replace",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/replace.sql",
            "original_file_path": "macros/utils/replace.sql",
            "unique_id": "macro.dbt.replace",
            "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.937815,
            "supported_languages": null
        },
        "macro.dbt.default__replace": {
            "name": "default__replace",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/replace.sql",
            "original_file_path": "macros/utils/replace.sql",
            "unique_id": "macro.dbt.default__replace",
            "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9380782,
            "supported_languages": null
        },
        "macro.dbt.length": {
            "name": "length",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/length.sql",
            "original_file_path": "macros/utils/length.sql",
            "unique_id": "macro.dbt.length",
            "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__length"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9384387,
            "supported_languages": null
        },
        "macro.dbt.default__length": {
            "name": "default__length",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/length.sql",
            "original_file_path": "macros/utils/length.sql",
            "unique_id": "macro.dbt.default__length",
            "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9386063,
            "supported_languages": null
        },
        "macro.dbt.intersect": {
            "name": "intersect",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/intersect.sql",
            "original_file_path": "macros/utils/intersect.sql",
            "unique_id": "macro.dbt.intersect",
            "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__intersect"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.93894,
            "supported_languages": null
        },
        "macro.dbt.default__intersect": {
            "name": "default__intersect",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/intersect.sql",
            "original_file_path": "macros/utils/intersect.sql",
            "unique_id": "macro.dbt.default__intersect",
            "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.939127,
            "supported_languages": null
        },
        "macro.dbt.except": {
            "name": "except",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/except.sql",
            "original_file_path": "macros/utils/except.sql",
            "unique_id": "macro.dbt.except",
            "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9393978,
            "supported_languages": null
        },
        "macro.dbt.default__except": {
            "name": "default__except",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/except.sql",
            "original_file_path": "macros/utils/except.sql",
            "unique_id": "macro.dbt.default__except",
            "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9394968,
            "supported_languages": null
        },
        "macro.dbt.date_trunc": {
            "name": "date_trunc",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_trunc.sql",
            "original_file_path": "macros/utils/date_trunc.sql",
            "unique_id": "macro.dbt.date_trunc",
            "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__date_trunc"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9398222,
            "supported_languages": null
        },
        "macro.dbt.default__date_trunc": {
            "name": "default__date_trunc",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_trunc.sql",
            "original_file_path": "macros/utils/date_trunc.sql",
            "unique_id": "macro.dbt.default__date_trunc",
            "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.939997,
            "supported_languages": null
        },
        "macro.dbt.safe_cast": {
            "name": "safe_cast",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/safe_cast.sql",
            "original_file_path": "macros/utils/safe_cast.sql",
            "unique_id": "macro.dbt.safe_cast",
            "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__safe_cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9408107,
            "supported_languages": null
        },
        "macro.dbt.default__safe_cast": {
            "name": "default__safe_cast",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/safe_cast.sql",
            "original_file_path": "macros/utils/safe_cast.sql",
            "unique_id": "macro.dbt.default__safe_cast",
            "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9410098,
            "supported_languages": null
        },
        "macro.dbt.any_value": {
            "name": "any_value",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/any_value.sql",
            "original_file_path": "macros/utils/any_value.sql",
            "unique_id": "macro.dbt.any_value",
            "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__any_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.941336,
            "supported_languages": null
        },
        "macro.dbt.default__any_value": {
            "name": "default__any_value",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/any_value.sql",
            "original_file_path": "macros/utils/any_value.sql",
            "unique_id": "macro.dbt.default__any_value",
            "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9415078,
            "supported_languages": null
        },
        "macro.dbt.cast_bool_to_text": {
            "name": "cast_bool_to_text",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/cast_bool_to_text.sql",
            "original_file_path": "macros/utils/cast_bool_to_text.sql",
            "unique_id": "macro.dbt.cast_bool_to_text",
            "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9418933,
            "supported_languages": null
        },
        "macro.dbt.default__cast_bool_to_text": {
            "name": "default__cast_bool_to_text",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/cast_bool_to_text.sql",
            "original_file_path": "macros/utils/cast_bool_to_text.sql",
            "unique_id": "macro.dbt.default__cast_bool_to_text",
            "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9421725,
            "supported_languages": null
        },
        "macro.dbt.get_powers_of_two": {
            "name": "get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/generate_series.sql",
            "original_file_path": "macros/utils/generate_series.sql",
            "unique_id": "macro.dbt.get_powers_of_two",
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9430726,
            "supported_languages": null
        },
        "macro.dbt.default__get_powers_of_two": {
            "name": "default__get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/generate_series.sql",
            "original_file_path": "macros/utils/generate_series.sql",
            "unique_id": "macro.dbt.default__get_powers_of_two",
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9435685,
            "supported_languages": null
        },
        "macro.dbt.generate_series": {
            "name": "generate_series",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/generate_series.sql",
            "original_file_path": "macros/utils/generate_series.sql",
            "unique_id": "macro.dbt.generate_series",
            "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_series"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9437897,
            "supported_languages": null
        },
        "macro.dbt.default__generate_series": {
            "name": "default__generate_series",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/generate_series.sql",
            "original_file_path": "macros/utils/generate_series.sql",
            "unique_id": "macro.dbt.default__generate_series",
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9444003,
            "supported_languages": null
        },
        "macro.dbt.get_intervals_between": {
            "name": "get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_spine.sql",
            "original_file_path": "macros/utils/date_spine.sql",
            "unique_id": "macro.dbt.get_intervals_between",
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_intervals_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9452057,
            "supported_languages": null
        },
        "macro.dbt.default__get_intervals_between": {
            "name": "default__get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_spine.sql",
            "original_file_path": "macros/utils/date_spine.sql",
            "unique_id": "macro.dbt.default__get_intervals_between",
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9464204,
            "supported_languages": null
        },
        "macro.dbt.date_spine": {
            "name": "date_spine",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_spine.sql",
            "original_file_path": "macros/utils/date_spine.sql",
            "unique_id": "macro.dbt.date_spine",
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9467523,
            "supported_languages": null
        },
        "macro.dbt.default__date_spine": {
            "name": "default__date_spine",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/date_spine.sql",
            "original_file_path": "macros/utils/date_spine.sql",
            "unique_id": "macro.dbt.default__date_spine",
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.generate_series",
                    "macro.dbt.get_intervals_between",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9472456,
            "supported_languages": null
        },
        "macro.dbt.hash": {
            "name": "hash",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/hash.sql",
            "original_file_path": "macros/utils/hash.sql",
            "unique_id": "macro.dbt.hash",
            "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__hash"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.947586,
            "supported_languages": null
        },
        "macro.dbt.default__hash": {
            "name": "default__hash",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/utils/hash.sql",
            "original_file_path": "macros/utils/hash.sql",
            "unique_id": "macro.dbt.default__hash",
            "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.947797,
            "supported_languages": null
        },
        "macro.dbt.generate_schema_name": {
            "name": "generate_schema_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "unique_id": "macro.dbt.generate_schema_name",
            "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9483805,
            "supported_languages": null
        },
        "macro.dbt.default__generate_schema_name": {
            "name": "default__generate_schema_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "unique_id": "macro.dbt.default__generate_schema_name",
            "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.949019,
            "supported_languages": null
        },
        "macro.dbt.generate_schema_name_for_env": {
            "name": "generate_schema_name_for_env",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_schema.sql",
            "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
            "unique_id": "macro.dbt.generate_schema_name_for_env",
            "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9494138,
            "supported_languages": null
        },
        "macro.dbt.generate_alias_name": {
            "name": "generate_alias_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_alias.sql",
            "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
            "unique_id": "macro.dbt.generate_alias_name",
            "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_alias_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9499273,
            "supported_languages": null
        },
        "macro.dbt.default__generate_alias_name": {
            "name": "default__generate_alias_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_alias.sql",
            "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
            "unique_id": "macro.dbt.default__generate_alias_name",
            "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9504204,
            "supported_languages": null
        },
        "macro.dbt.generate_database_name": {
            "name": "generate_database_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_database.sql",
            "original_file_path": "macros/get_custom_name/get_custom_database.sql",
            "unique_id": "macro.dbt.generate_database_name",
            "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__generate_database_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9508605,
            "supported_languages": null
        },
        "macro.dbt.default__generate_database_name": {
            "name": "default__generate_database_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/get_custom_name/get_custom_database.sql",
            "original_file_path": "macros/get_custom_name/get_custom_database.sql",
            "unique_id": "macro.dbt.default__generate_database_name",
            "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.951184,
            "supported_languages": null
        },
        "macro.dbt.set_sql_header": {
            "name": "set_sql_header",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "unique_id": "macro.dbt.set_sql_header",
            "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.951625,
            "supported_languages": null
        },
        "macro.dbt.should_full_refresh": {
            "name": "should_full_refresh",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "unique_id": "macro.dbt.should_full_refresh",
            "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9520144,
            "supported_languages": null
        },
        "macro.dbt.should_store_failures": {
            "name": "should_store_failures",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/configs.sql",
            "original_file_path": "macros/materializations/configs.sql",
            "unique_id": "macro.dbt.should_store_failures",
            "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.952378,
            "supported_languages": null
        },
        "macro.dbt.run_hooks": {
            "name": "run_hooks",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "unique_id": "macro.dbt.run_hooks",
            "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9536436,
            "supported_languages": null
        },
        "macro.dbt.make_hook_config": {
            "name": "make_hook_config",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "unique_id": "macro.dbt.make_hook_config",
            "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.953907,
            "supported_languages": null
        },
        "macro.dbt.before_begin": {
            "name": "before_begin",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "unique_id": "macro.dbt.before_begin",
            "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9541054,
            "supported_languages": null
        },
        "macro.dbt.in_transaction": {
            "name": "in_transaction",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "unique_id": "macro.dbt.in_transaction",
            "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9543009,
            "supported_languages": null
        },
        "macro.dbt.after_commit": {
            "name": "after_commit",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/hooks.sql",
            "original_file_path": "macros/materializations/hooks.sql",
            "unique_id": "macro.dbt.after_commit",
            "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_hook_config"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9544873,
            "supported_languages": null
        },
        "macro.dbt.materialization_snapshot_default": {
            "name": "materialization_snapshot_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/snapshot.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot.sql",
            "unique_id": "macro.dbt.materialization_snapshot_default",
            "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_or_create_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.strategy_dispatch",
                    "macro.dbt.build_snapshot_table",
                    "macro.dbt.create_table_as",
                    "macro.dbt.build_snapshot_staging_table",
                    "macro.dbt.create_columns",
                    "macro.dbt.snapshot_merge_sql",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes",
                    "macro.dbt.post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9611967,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.snapshot_merge_sql": {
            "name": "snapshot_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/snapshot_merge.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
            "unique_id": "macro.dbt.snapshot_merge_sql",
            "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__snapshot_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9618273,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_merge_sql": {
            "name": "default__snapshot_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/snapshot_merge.sql",
            "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
            "unique_id": "macro.dbt.default__snapshot_merge_sql",
            "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9624426,
            "supported_languages": null
        },
        "macro.dbt.create_columns": {
            "name": "create_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.create_columns",
            "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9663384,
            "supported_languages": null
        },
        "macro.dbt.default__create_columns": {
            "name": "default__create_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.default__create_columns",
            "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.966681,
            "supported_languages": null
        },
        "macro.dbt.post_snapshot": {
            "name": "post_snapshot",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.post_snapshot",
            "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__post_snapshot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9668782,
            "supported_languages": null
        },
        "macro.dbt.default__post_snapshot": {
            "name": "default__post_snapshot",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.default__post_snapshot",
            "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9669895,
            "supported_languages": null
        },
        "macro.dbt.get_true_sql": {
            "name": "get_true_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.get_true_sql",
            "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_true_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9671617,
            "supported_languages": null
        },
        "macro.dbt.default__get_true_sql": {
            "name": "default__get_true_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.default__get_true_sql",
            "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.967298,
            "supported_languages": null
        },
        "macro.dbt.snapshot_staging_table": {
            "name": "snapshot_staging_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.snapshot_staging_table",
            "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_staging_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9675336,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_staging_table": {
            "name": "default__snapshot_staging_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.default__snapshot_staging_table",
            "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9684925,
            "supported_languages": null
        },
        "macro.dbt.build_snapshot_table": {
            "name": "build_snapshot_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.build_snapshot_table",
            "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__build_snapshot_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9688761,
            "supported_languages": null
        },
        "macro.dbt.default__build_snapshot_table": {
            "name": "default__build_snapshot_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.default__build_snapshot_table",
            "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9694383,
            "supported_languages": null
        },
        "macro.dbt.build_snapshot_staging_table": {
            "name": "build_snapshot_staging_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/helpers.sql",
            "original_file_path": "macros/materializations/snapshots/helpers.sql",
            "unique_id": "macro.dbt.build_snapshot_staging_table",
            "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.snapshot_staging_table",
                    "macro.dbt.statement",
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9699852,
            "supported_languages": null
        },
        "macro.dbt.strategy_dispatch": {
            "name": "strategy_dispatch",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.strategy_dispatch",
            "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9739,
            "supported_languages": null
        },
        "macro.dbt.snapshot_hash_arguments": {
            "name": "snapshot_hash_arguments",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.snapshot_hash_arguments",
            "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.974115,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_hash_arguments": {
            "name": "default__snapshot_hash_arguments",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.default__snapshot_hash_arguments",
            "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9743876,
            "supported_languages": null
        },
        "macro.dbt.snapshot_timestamp_strategy": {
            "name": "snapshot_timestamp_strategy",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.snapshot_timestamp_strategy",
            "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9752276,
            "supported_languages": null
        },
        "macro.dbt.snapshot_string_as_time": {
            "name": "snapshot_string_as_time",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.snapshot_string_as_time",
            "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__snapshot_string_as_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9754214,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_string_as_time": {
            "name": "default__snapshot_string_as_time",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.default__snapshot_string_as_time",
            "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9756355,
            "supported_languages": null
        },
        "macro.dbt.snapshot_check_all_get_existing_columns": {
            "name": "snapshot_check_all_get_existing_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
            "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.978024,
            "supported_languages": null
        },
        "macro.dbt.snapshot_check_strategy": {
            "name": "snapshot_check_strategy",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/snapshots/strategies.sql",
            "original_file_path": "macros/materializations/snapshots/strategies.sql",
            "unique_id": "macro.dbt.snapshot_check_strategy",
            "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.snapshot_get_time",
                    "macro.dbt.snapshot_check_all_get_existing_columns",
                    "macro.dbt.get_true_sql",
                    "macro.dbt.snapshot_hash_arguments"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9799938,
            "supported_languages": null
        },
        "macro.dbt.materialization_seed_default": {
            "name": "materialization_seed_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/seed.sql",
            "original_file_path": "macros/materializations/seeds/seed.sql",
            "unique_id": "macro.dbt.materialization_seed_default",
            "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.run_hooks",
                    "macro.dbt.reset_csv_table",
                    "macro.dbt.create_csv_table",
                    "macro.dbt.load_csv_rows",
                    "macro.dbt.noop_statement",
                    "macro.dbt.get_csv_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9839916,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.create_csv_table": {
            "name": "create_csv_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.create_csv_table",
            "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.989158,
            "supported_languages": null
        },
        "macro.dbt.default__create_csv_table": {
            "name": "default__create_csv_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__create_csv_table",
            "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9904172,
            "supported_languages": null
        },
        "macro.dbt.reset_csv_table": {
            "name": "reset_csv_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.reset_csv_table",
            "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__reset_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.990706,
            "supported_languages": null
        },
        "macro.dbt.default__reset_csv_table": {
            "name": "default__reset_csv_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__reset_csv_table",
            "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_csv_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.991312,
            "supported_languages": null
        },
        "macro.dbt.get_csv_sql": {
            "name": "get_csv_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.get_csv_sql",
            "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_csv_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.991595,
            "supported_languages": null
        },
        "macro.dbt.default__get_csv_sql": {
            "name": "default__get_csv_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__get_csv_sql",
            "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9917943,
            "supported_languages": null
        },
        "macro.dbt.get_binding_char": {
            "name": "get_binding_char",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.get_binding_char",
            "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9920037,
            "supported_languages": null
        },
        "macro.dbt.default__get_binding_char": {
            "name": "default__get_binding_char",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__get_binding_char",
            "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.992177,
            "supported_languages": null
        },
        "macro.dbt.get_batch_size": {
            "name": "get_batch_size",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.get_batch_size",
            "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__get_batch_size"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.99241,
            "supported_languages": null
        },
        "macro.dbt.default__get_batch_size": {
            "name": "default__get_batch_size",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__get_batch_size",
            "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9925876,
            "supported_languages": null
        },
        "macro.dbt.get_seed_column_quoted_csv": {
            "name": "get_seed_column_quoted_csv",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.get_seed_column_quoted_csv",
            "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9932733,
            "supported_languages": null
        },
        "macro.dbt.load_csv_rows": {
            "name": "load_csv_rows",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.load_csv_rows",
            "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__load_csv_rows"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9935267,
            "supported_languages": null
        },
        "macro.dbt.default__load_csv_rows": {
            "name": "default__load_csv_rows",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/seeds/helpers.sql",
            "original_file_path": "macros/materializations/seeds/helpers.sql",
            "unique_id": "macro.dbt.default__load_csv_rows",
            "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_batch_size",
                    "macro.dbt.get_seed_column_quoted_csv",
                    "macro.dbt.get_binding_char"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.995182,
            "supported_languages": null
        },
        "macro.dbt.materialization_view_default": {
            "name": "materialization_view_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/view.sql",
            "original_file_path": "macros/materializations/models/view.sql",
            "unique_id": "macro.dbt.materialization_view_default",
            "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.run_hooks",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827580.9990551,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.materialization_materialized_view_default": {
            "name": "materialization_materialized_view_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialization_materialized_view_default",
            "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.materialized_view_setup",
                    "macro.dbt.materialized_view_get_build_sql",
                    "macro.dbt.materialized_view_execute_no_op",
                    "macro.dbt.materialized_view_execute_build_sql",
                    "macro.dbt.materialized_view_teardown"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.003939,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.materialized_view_setup": {
            "name": "materialized_view_setup",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_setup",
            "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.004379,
            "supported_languages": null
        },
        "macro.dbt.materialized_view_teardown": {
            "name": "materialized_view_teardown",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_teardown",
            "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0052671,
            "supported_languages": null
        },
        "macro.dbt.materialized_view_get_build_sql": {
            "name": "materialized_view_get_build_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_get_build_sql",
            "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.get_create_materialized_view_as_sql",
                    "macro.dbt.get_replace_sql",
                    "macro.dbt.get_materialized_view_configuration_changes",
                    "macro.dbt.refresh_materialized_view",
                    "macro.dbt.get_alter_materialized_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0068767,
            "supported_languages": null
        },
        "macro.dbt.materialized_view_execute_no_op": {
            "name": "materialized_view_execute_no_op",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_execute_no_op",
            "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0071363,
            "supported_languages": null
        },
        "macro.dbt.materialized_view_execute_build_sql": {
            "name": "materialized_view_execute_build_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/materialized_view.sql",
            "original_file_path": "macros/materializations/models/materialized_view.sql",
            "unique_id": "macro.dbt.materialized_view_execute_build_sql",
            "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0078623,
            "supported_languages": null
        },
        "macro.dbt.materialization_table_default": {
            "name": "materialization_table_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/table.sql",
            "original_file_path": "macros/materializations/models/table.sql",
            "unique_id": "macro.dbt.materialization_table_default",
            "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.create_indexes",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.012092,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.is_incremental": {
            "name": "is_incremental",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/is_incremental.sql",
            "original_file_path": "macros/materializations/models/incremental/is_incremental.sql",
            "unique_id": "macro.dbt.is_incremental",
            "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_full_refresh"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0129979,
            "supported_languages": null
        },
        "macro.dbt.materialization_incremental_default": {
            "name": "materialization_incremental_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/incremental.sql",
            "original_file_path": "macros/materializations/models/incremental/incremental.sql",
            "unique_id": "macro.dbt.materialization_incremental_default",
            "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.incremental_validate_on_schema_change",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.run_hooks",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.run_query",
                    "macro.dbt.process_schema_changes",
                    "macro.dbt.statement",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs",
                    "macro.dbt.create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0186486,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.get_incremental_append_sql": {
            "name": "get_incremental_append_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_append_sql",
            "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0195868,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_append_sql": {
            "name": "default__get_incremental_append_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_append_sql",
            "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_into_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0198803,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_delete_insert_sql": {
            "name": "get_incremental_delete_insert_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_delete_insert_sql",
            "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_delete_insert_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.020093,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_delete_insert_sql": {
            "name": "default__get_incremental_delete_insert_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql",
            "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.02043,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_merge_sql": {
            "name": "get_incremental_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_merge_sql",
            "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0206475,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_merge_sql": {
            "name": "default__get_incremental_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_merge_sql",
            "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.021485,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_insert_overwrite_sql": {
            "name": "get_incremental_insert_overwrite_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql",
            "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_incremental_insert_overwrite_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0217714,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_insert_overwrite_sql": {
            "name": "default__get_incremental_insert_overwrite_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql",
            "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0226033,
            "supported_languages": null
        },
        "macro.dbt.get_incremental_default_sql": {
            "name": "get_incremental_default_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_incremental_default_sql",
            "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__get_incremental_default_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0228734,
            "supported_languages": null
        },
        "macro.dbt.default__get_incremental_default_sql": {
            "name": "default__get_incremental_default_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.default__get_incremental_default_sql",
            "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_incremental_append_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0230641,
            "supported_languages": null
        },
        "macro.dbt.get_insert_into_sql": {
            "name": "get_insert_into_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/strategies.sql",
            "original_file_path": "macros/materializations/models/incremental/strategies.sql",
            "unique_id": "macro.dbt.get_insert_into_sql",
            "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.023416,
            "supported_languages": null
        },
        "macro.dbt.incremental_validate_on_schema_change": {
            "name": "incremental_validate_on_schema_change",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "unique_id": "macro.dbt.incremental_validate_on_schema_change",
            "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0291982,
            "supported_languages": null
        },
        "macro.dbt.check_for_schema_changes": {
            "name": "check_for_schema_changes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "unique_id": "macro.dbt.check_for_schema_changes",
            "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.diff_columns",
                    "macro.dbt.diff_column_data_types"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0309055,
            "supported_languages": null
        },
        "macro.dbt.sync_column_schemas": {
            "name": "sync_column_schemas",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "unique_id": "macro.dbt.sync_column_schemas",
            "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.alter_relation_add_remove_columns",
                    "macro.dbt.alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.032367,
            "supported_languages": null
        },
        "macro.dbt.process_schema_changes": {
            "name": "process_schema_changes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/on_schema_change.sql",
            "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
            "unique_id": "macro.dbt.process_schema_changes",
            "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.check_for_schema_changes",
                    "macro.dbt.sync_column_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0333438,
            "supported_languages": null
        },
        "macro.dbt.get_quoted_csv": {
            "name": "get_quoted_csv",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "unique_id": "macro.dbt.get_quoted_csv",
            "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0350752,
            "supported_languages": null
        },
        "macro.dbt.diff_columns": {
            "name": "diff_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "unique_id": "macro.dbt.diff_columns",
            "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0357978,
            "supported_languages": null
        },
        "macro.dbt.diff_column_data_types": {
            "name": "diff_column_data_types",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "unique_id": "macro.dbt.diff_column_data_types",
            "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0366712,
            "supported_languages": null
        },
        "macro.dbt.get_merge_update_columns": {
            "name": "get_merge_update_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "unique_id": "macro.dbt.get_merge_update_columns",
            "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0375247,
            "supported_languages": null
        },
        "macro.dbt.default__get_merge_update_columns": {
            "name": "default__get_merge_update_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/column_helpers.sql",
            "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
            "unique_id": "macro.dbt.default__get_merge_update_columns",
            "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0386298,
            "supported_languages": null
        },
        "macro.dbt.get_merge_sql": {
            "name": "get_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.get_merge_sql",
            "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0445404,
            "supported_languages": null
        },
        "macro.dbt.default__get_merge_sql": {
            "name": "default__get_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.default__get_merge_sql",
            "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv",
                    "macro.dbt.get_merge_update_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0470734,
            "supported_languages": null
        },
        "macro.dbt.get_delete_insert_merge_sql": {
            "name": "get_delete_insert_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.get_delete_insert_merge_sql",
            "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.047429,
            "supported_languages": null
        },
        "macro.dbt.default__get_delete_insert_merge_sql": {
            "name": "default__get_delete_insert_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
            "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.048646,
            "supported_languages": null
        },
        "macro.dbt.get_insert_overwrite_merge_sql": {
            "name": "get_insert_overwrite_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_insert_overwrite_merge_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0489569,
            "supported_languages": null
        },
        "macro.dbt.default__get_insert_overwrite_merge_sql": {
            "name": "default__get_insert_overwrite_merge_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/incremental/merge.sql",
            "original_file_path": "macros/materializations/models/incremental/merge.sql",
            "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
            "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_quoted_csv"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0497596,
            "supported_languages": null
        },
        "macro.dbt.materialization_clone_default": {
            "name": "materialization_clone_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/clone/clone.sql",
            "original_file_path": "macros/materializations/models/clone/clone.sql",
            "unique_id": "macro.dbt.materialization_clone_default",
            "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation",
                    "macro.dbt.can_clone_table",
                    "macro.dbt.drop_relation_if_exists",
                    "macro.dbt.statement",
                    "macro.dbt.create_or_replace_clone",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants",
                    "macro.dbt.persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0541875,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.can_clone_table": {
            "name": "can_clone_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/clone/can_clone_table.sql",
            "original_file_path": "macros/materializations/models/clone/can_clone_table.sql",
            "unique_id": "macro.dbt.can_clone_table",
            "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__can_clone_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.054525,
            "supported_languages": null
        },
        "macro.dbt.default__can_clone_table": {
            "name": "default__can_clone_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/clone/can_clone_table.sql",
            "original_file_path": "macros/materializations/models/clone/can_clone_table.sql",
            "unique_id": "macro.dbt.default__can_clone_table",
            "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0546753,
            "supported_languages": null
        },
        "macro.dbt.create_or_replace_clone": {
            "name": "create_or_replace_clone",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/clone/create_or_replace_clone.sql",
            "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql",
            "unique_id": "macro.dbt.create_or_replace_clone",
            "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_or_replace_clone"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0550153,
            "supported_languages": null
        },
        "macro.dbt.default__create_or_replace_clone": {
            "name": "default__create_or_replace_clone",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/models/clone/create_or_replace_clone.sql",
            "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql",
            "unique_id": "macro.dbt.default__create_or_replace_clone",
            "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0551863,
            "supported_languages": null
        },
        "macro.dbt.get_where_subquery": {
            "name": "get_where_subquery",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/where_subquery.sql",
            "original_file_path": "macros/materializations/tests/where_subquery.sql",
            "unique_id": "macro.dbt.get_where_subquery",
            "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_where_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.055621,
            "supported_languages": null
        },
        "macro.dbt.default__get_where_subquery": {
            "name": "default__get_where_subquery",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/where_subquery.sql",
            "original_file_path": "macros/materializations/tests/where_subquery.sql",
            "unique_id": "macro.dbt.default__get_where_subquery",
            "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0561423,
            "supported_languages": null
        },
        "macro.dbt.get_test_sql": {
            "name": "get_test_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "unique_id": "macro.dbt.get_test_sql",
            "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0573235,
            "supported_languages": null
        },
        "macro.dbt.default__get_test_sql": {
            "name": "default__get_test_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "unique_id": "macro.dbt.default__get_test_sql",
            "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0577424,
            "supported_languages": null
        },
        "macro.dbt.get_unit_test_sql": {
            "name": "get_unit_test_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "unique_id": "macro.dbt.get_unit_test_sql",
            "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_unit_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0580359,
            "supported_languages": null
        },
        "macro.dbt.default__get_unit_test_sql": {
            "name": "default__get_unit_test_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/helpers.sql",
            "original_file_path": "macros/materializations/tests/helpers.sql",
            "unique_id": "macro.dbt.default__get_unit_test_sql",
            "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0588312,
            "supported_languages": null
        },
        "macro.dbt.materialization_unit_default": {
            "name": "materialization_unit_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/unit.sql",
            "original_file_path": "macros/materializations/tests/unit.sql",
            "unique_id": "macro.dbt.materialization_unit_default",
            "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_columns_in_query",
                    "macro.dbt.make_temp_relation",
                    "macro.dbt.run_query",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.get_empty_subquery_sql",
                    "macro.dbt.get_expected_sql",
                    "macro.dbt.get_unit_test_sql",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0616572,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.materialization_test_default": {
            "name": "materialization_test_default",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/materializations/tests/test.sql",
            "original_file_path": "macros/materializations/tests/test.sql",
            "unique_id": "macro.dbt.materialization_test_default",
            "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_sql",
                    "macro.dbt.get_test_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.064864,
            "supported_languages": [
                "sql"
            ]
        },
        "macro.dbt.alter_column_comment": {
            "name": "alter_column_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.alter_column_comment",
            "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0656345,
            "supported_languages": null
        },
        "macro.dbt.default__alter_column_comment": {
            "name": "default__alter_column_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.default__alter_column_comment",
            "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0658455,
            "supported_languages": null
        },
        "macro.dbt.alter_relation_comment": {
            "name": "alter_relation_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.alter_relation_comment",
            "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__alter_relation_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0660944,
            "supported_languages": null
        },
        "macro.dbt.default__alter_relation_comment": {
            "name": "default__alter_relation_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.default__alter_relation_comment",
            "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.066299,
            "supported_languages": null
        },
        "macro.dbt.persist_docs": {
            "name": "persist_docs",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.persist_docs",
            "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__persist_docs"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0666068,
            "supported_languages": null
        },
        "macro.dbt.default__persist_docs": {
            "name": "default__persist_docs",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/persist_docs.sql",
            "original_file_path": "macros/adapters/persist_docs.sql",
            "unique_id": "macro.dbt.default__persist_docs",
            "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.alter_relation_comment",
                    "macro.dbt.alter_column_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0671363,
            "supported_languages": null
        },
        "macro.dbt.get_columns_in_relation": {
            "name": "get_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.get_columns_in_relation",
            "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__get_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.069663,
            "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_relation": {
            "name": "default__get_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__get_columns_in_relation",
            "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0698874,
            "supported_languages": null
        },
        "macro.dbt.sql_convert_columns_in_relation": {
            "name": "sql_convert_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.sql_convert_columns_in_relation",
            "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0703056,
            "supported_languages": null
        },
        "macro.dbt.get_empty_subquery_sql": {
            "name": "get_empty_subquery_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.get_empty_subquery_sql",
            "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_empty_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.070611,
            "supported_languages": null
        },
        "macro.dbt.default__get_empty_subquery_sql": {
            "name": "default__get_empty_subquery_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__get_empty_subquery_sql",
            "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0708928,
            "supported_languages": null
        },
        "macro.dbt.get_empty_schema_sql": {
            "name": "get_empty_schema_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.get_empty_schema_sql",
            "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_empty_schema_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0711427,
            "supported_languages": null
        },
        "macro.dbt.default__get_empty_schema_sql": {
            "name": "default__get_empty_schema_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__get_empty_schema_sql",
            "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.cast"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.072703,
            "supported_languages": null
        },
        "macro.dbt.get_column_schema_from_query": {
            "name": "get_column_schema_from_query",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.get_column_schema_from_query",
            "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_empty_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0731192,
            "supported_languages": null
        },
        "macro.dbt.get_columns_in_query": {
            "name": "get_columns_in_query",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.get_columns_in_query",
            "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_columns_in_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.073334,
            "supported_languages": null
        },
        "macro.dbt.default__get_columns_in_query": {
            "name": "default__get_columns_in_query",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__get_columns_in_query",
            "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.get_empty_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0737605,
            "supported_languages": null
        },
        "macro.dbt.alter_column_type": {
            "name": "alter_column_type",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.alter_column_type",
            "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__alter_column_type"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0740478,
            "supported_languages": null
        },
        "macro.dbt.default__alter_column_type": {
            "name": "default__alter_column_type",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__alter_column_type",
            "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.074822,
            "supported_languages": null
        },
        "macro.dbt.alter_relation_add_remove_columns": {
            "name": "alter_relation_add_remove_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.alter_relation_add_remove_columns",
            "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0751457,
            "supported_languages": null
        },
        "macro.dbt.default__alter_relation_add_remove_columns": {
            "name": "default__alter_relation_add_remove_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/columns.sql",
            "original_file_path": "macros/adapters/columns.sql",
            "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
            "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0761316,
            "supported_languages": null
        },
        "macro.dbt.create_schema": {
            "name": "create_schema",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "unique_id": "macro.dbt.create_schema",
            "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__create_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0765977,
            "supported_languages": null
        },
        "macro.dbt.default__create_schema": {
            "name": "default__create_schema",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "unique_id": "macro.dbt.default__create_schema",
            "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0768309,
            "supported_languages": null
        },
        "macro.dbt.drop_schema": {
            "name": "drop_schema",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "unique_id": "macro.dbt.drop_schema",
            "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__drop_schema"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.077027,
            "supported_languages": null
        },
        "macro.dbt.default__drop_schema": {
            "name": "default__drop_schema",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/schema.sql",
            "original_file_path": "macros/adapters/schema.sql",
            "unique_id": "macro.dbt.default__drop_schema",
            "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.077259,
            "supported_languages": null
        },
        "macro.dbt.make_intermediate_relation": {
            "name": "make_intermediate_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.make_intermediate_relation",
            "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_intermediate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0797887,
            "supported_languages": null
        },
        "macro.dbt.default__make_intermediate_relation": {
            "name": "default__make_intermediate_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.default__make_intermediate_relation",
            "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0800345,
            "supported_languages": null
        },
        "macro.dbt.make_temp_relation": {
            "name": "make_temp_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.make_temp_relation",
            "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__make_temp_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0803292,
            "supported_languages": null
        },
        "macro.dbt.default__make_temp_relation": {
            "name": "default__make_temp_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.default__make_temp_relation",
            "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0807323,
            "supported_languages": null
        },
        "macro.dbt.make_backup_relation": {
            "name": "make_backup_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.make_backup_relation",
            "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__make_backup_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0810544,
            "supported_languages": null
        },
        "macro.dbt.default__make_backup_relation": {
            "name": "default__make_backup_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.default__make_backup_relation",
            "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0814831,
            "supported_languages": null
        },
        "macro.dbt.truncate_relation": {
            "name": "truncate_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.truncate_relation",
            "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__truncate_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0817237,
            "supported_languages": null
        },
        "macro.dbt.default__truncate_relation": {
            "name": "default__truncate_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.default__truncate_relation",
            "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.081941,
            "supported_languages": null
        },
        "macro.dbt.get_or_create_relation": {
            "name": "get_or_create_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.get_or_create_relation",
            "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_or_create_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0822623,
            "supported_languages": null
        },
        "macro.dbt.default__get_or_create_relation": {
            "name": "default__get_or_create_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.default__get_or_create_relation",
            "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0832455,
            "supported_languages": null
        },
        "macro.dbt.load_cached_relation": {
            "name": "load_cached_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.load_cached_relation",
            "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0835419,
            "supported_languages": null
        },
        "macro.dbt.load_relation": {
            "name": "load_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/relation.sql",
            "original_file_path": "macros/adapters/relation.sql",
            "unique_id": "macro.dbt.load_relation",
            "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.load_cached_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0837255,
            "supported_languages": null
        },
        "macro.dbt.get_show_sql": {
            "name": "get_show_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/show.sql",
            "original_file_path": "macros/adapters/show.sql",
            "unique_id": "macro.dbt.get_show_sql",
            "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_limit_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0843196,
            "supported_languages": null
        },
        "macro.dbt.get_limit_subquery_sql": {
            "name": "get_limit_subquery_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/show.sql",
            "original_file_path": "macros/adapters/show.sql",
            "unique_id": "macro.dbt.get_limit_subquery_sql",
            "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_limit_subquery_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0845468,
            "supported_languages": null
        },
        "macro.dbt.default__get_limit_subquery_sql": {
            "name": "default__get_limit_subquery_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/show.sql",
            "original_file_path": "macros/adapters/show.sql",
            "unique_id": "macro.dbt.default__get_limit_subquery_sql",
            "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0847208,
            "supported_languages": null
        },
        "macro.dbt.get_catalog_relations": {
            "name": "get_catalog_relations",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.get_catalog_relations",
            "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_catalog_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0880218,
            "supported_languages": null
        },
        "macro.dbt.default__get_catalog_relations": {
            "name": "default__get_catalog_relations",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__get_catalog_relations",
            "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0883493,
            "supported_languages": null
        },
        "macro.dbt.get_catalog": {
            "name": "get_catalog",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.get_catalog",
            "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__get_catalog"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0886002,
            "supported_languages": null
        },
        "macro.dbt.default__get_catalog": {
            "name": "default__get_catalog",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__get_catalog",
            "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0893812,
            "supported_languages": null
        },
        "macro.dbt.information_schema_name": {
            "name": "information_schema_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.information_schema_name",
            "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__information_schema_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0896232,
            "supported_languages": null
        },
        "macro.dbt.default__information_schema_name": {
            "name": "default__information_schema_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__information_schema_name",
            "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0898354,
            "supported_languages": null
        },
        "macro.dbt.list_schemas": {
            "name": "list_schemas",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.list_schemas",
            "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__list_schemas"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0900683,
            "supported_languages": null
        },
        "macro.dbt.default__list_schemas": {
            "name": "default__list_schemas",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__list_schemas",
            "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.information_schema_name",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0903761,
            "supported_languages": null
        },
        "macro.dbt.check_schema_exists": {
            "name": "check_schema_exists",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.check_schema_exists",
            "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__check_schema_exists"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0906172,
            "supported_languages": null
        },
        "macro.dbt.default__check_schema_exists": {
            "name": "default__check_schema_exists",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__check_schema_exists",
            "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.replace",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0909843,
            "supported_languages": null
        },
        "macro.dbt.list_relations_without_caching": {
            "name": "list_relations_without_caching",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.list_relations_without_caching",
            "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__list_relations_without_caching"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0912185,
            "supported_languages": null
        },
        "macro.dbt.default__list_relations_without_caching": {
            "name": "default__list_relations_without_caching",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__list_relations_without_caching",
            "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0914247,
            "supported_languages": null
        },
        "macro.dbt.get_catalog_for_single_relation": {
            "name": "get_catalog_for_single_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.get_catalog_for_single_relation",
            "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_catalog_for_single_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0916734,
            "supported_languages": null
        },
        "macro.dbt.default__get_catalog_for_single_relation": {
            "name": "default__get_catalog_for_single_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__get_catalog_for_single_relation",
            "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0918818,
            "supported_languages": null
        },
        "macro.dbt.get_relations": {
            "name": "get_relations",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.get_relations",
            "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0921972,
            "supported_languages": null
        },
        "macro.dbt.default__get_relations": {
            "name": "default__get_relations",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__get_relations",
            "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0924056,
            "supported_languages": null
        },
        "macro.dbt.get_relation_last_modified": {
            "name": "get_relation_last_modified",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.get_relation_last_modified",
            "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_relation_last_modified"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0926998,
            "supported_languages": null
        },
        "macro.dbt.default__get_relation_last_modified": {
            "name": "default__get_relation_last_modified",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/metadata.sql",
            "original_file_path": "macros/adapters/metadata.sql",
            "unique_id": "macro.dbt.default__get_relation_last_modified",
            "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0929549,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp": {
            "name": "current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.current_timestamp",
            "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0936053,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp": {
            "name": "default__current_timestamp",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.default__current_timestamp",
            "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0937915,
            "supported_languages": null
        },
        "macro.dbt.snapshot_get_time": {
            "name": "snapshot_get_time",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.snapshot_get_time",
            "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__snapshot_get_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.093973,
            "supported_languages": null
        },
        "macro.dbt.default__snapshot_get_time": {
            "name": "default__snapshot_get_time",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.default__snapshot_get_time",
            "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0941014,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp_backcompat": {
            "name": "current_timestamp_backcompat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.current_timestamp_backcompat",
            "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__current_timestamp_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0942943,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_backcompat": {
            "name": "default__current_timestamp_backcompat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.default__current_timestamp_backcompat",
            "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0943878,
            "supported_languages": null
        },
        "macro.dbt.current_timestamp_in_utc_backcompat": {
            "name": "current_timestamp_in_utc_backcompat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__current_timestamp_in_utc_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0945828,
            "supported_languages": null
        },
        "macro.dbt.default__current_timestamp_in_utc_backcompat": {
            "name": "default__current_timestamp_in_utc_backcompat",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/timestamps.sql",
            "original_file_path": "macros/adapters/timestamps.sql",
            "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat",
            "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.current_timestamp_backcompat",
                    "macro.dbt.default__current_timestamp_backcompat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.094781,
            "supported_languages": null
        },
        "macro.dbt.copy_grants": {
            "name": "copy_grants",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.copy_grants",
            "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0968935,
            "supported_languages": null
        },
        "macro.dbt.default__copy_grants": {
            "name": "default__copy_grants",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__copy_grants",
            "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0970616,
            "supported_languages": null
        },
        "macro.dbt.support_multiple_grantees_per_dcl_statement": {
            "name": "support_multiple_grantees_per_dcl_statement",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement",
            "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0972931,
            "supported_languages": null
        },
        "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {
            "name": "default__support_multiple_grantees_per_dcl_statement",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement",
            "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0974572,
            "supported_languages": null
        },
        "macro.dbt.should_revoke": {
            "name": "should_revoke",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.should_revoke",
            "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.copy_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0979505,
            "supported_languages": null
        },
        "macro.dbt.get_show_grant_sql": {
            "name": "get_show_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.get_show_grant_sql",
            "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_show_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0981936,
            "supported_languages": null
        },
        "macro.dbt.default__get_show_grant_sql": {
            "name": "default__get_show_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__get_show_grant_sql",
            "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0983279,
            "supported_languages": null
        },
        "macro.dbt.get_grant_sql": {
            "name": "get_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.get_grant_sql",
            "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_grant_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0986807,
            "supported_languages": null
        },
        "macro.dbt.default__get_grant_sql": {
            "name": "default__get_grant_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__get_grant_sql",
            "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0989144,
            "supported_languages": null
        },
        "macro.dbt.get_revoke_sql": {
            "name": "get_revoke_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.get_revoke_sql",
            "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_revoke_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.099177,
            "supported_languages": null
        },
        "macro.dbt.default__get_revoke_sql": {
            "name": "default__get_revoke_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__get_revoke_sql",
            "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.099401,
            "supported_languages": null
        },
        "macro.dbt.get_dcl_statement_list": {
            "name": "get_dcl_statement_list",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.get_dcl_statement_list",
            "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_dcl_statement_list"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.0996592,
            "supported_languages": null
        },
        "macro.dbt.default__get_dcl_statement_list": {
            "name": "default__get_dcl_statement_list",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__get_dcl_statement_list",
            "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.support_multiple_grantees_per_dcl_statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1004658,
            "supported_languages": null
        },
        "macro.dbt.call_dcl_statements": {
            "name": "call_dcl_statements",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.call_dcl_statements",
            "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1006927,
            "supported_languages": null
        },
        "macro.dbt.default__call_dcl_statements": {
            "name": "default__call_dcl_statements",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__call_dcl_statements",
            "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1009874,
            "supported_languages": null
        },
        "macro.dbt.apply_grants": {
            "name": "apply_grants",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.apply_grants",
            "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1012807,
            "supported_languages": null
        },
        "macro.dbt.default__apply_grants": {
            "name": "default__apply_grants",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/apply_grants.sql",
            "original_file_path": "macros/adapters/apply_grants.sql",
            "unique_id": "macro.dbt.default__apply_grants",
            "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query",
                    "macro.dbt.get_show_grant_sql",
                    "macro.dbt.get_dcl_statement_list",
                    "macro.dbt.call_dcl_statements"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1031225,
            "supported_languages": null
        },
        "macro.dbt.collect_freshness": {
            "name": "collect_freshness",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "unique_id": "macro.dbt.collect_freshness",
            "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__collect_freshness"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.103636,
            "supported_languages": null
        },
        "macro.dbt.default__collect_freshness": {
            "name": "default__collect_freshness",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/freshness.sql",
            "original_file_path": "macros/adapters/freshness.sql",
            "unique_id": "macro.dbt.default__collect_freshness",
            "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.current_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.10414,
            "supported_languages": null
        },
        "macro.dbt.validate_sql": {
            "name": "validate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/validate_sql.sql",
            "original_file_path": "macros/adapters/validate_sql.sql",
            "unique_id": "macro.dbt.validate_sql",
            "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__validate_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1044738,
            "supported_languages": null
        },
        "macro.dbt.default__validate_sql": {
            "name": "default__validate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/validate_sql.sql",
            "original_file_path": "macros/adapters/validate_sql.sql",
            "unique_id": "macro.dbt.default__validate_sql",
            "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1052012,
            "supported_languages": null
        },
        "macro.dbt.get_create_index_sql": {
            "name": "get_create_index_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.get_create_index_sql",
            "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.106262,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_index_sql": {
            "name": "default__get_create_index_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.default__get_create_index_sql",
            "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1064396,
            "supported_languages": null
        },
        "macro.dbt.create_indexes": {
            "name": "create_indexes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.create_indexes",
            "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__create_indexes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1066456,
            "supported_languages": null
        },
        "macro.dbt.default__create_indexes": {
            "name": "default__create_indexes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.default__create_indexes",
            "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_index_sql",
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1071403,
            "supported_languages": null
        },
        "macro.dbt.get_drop_index_sql": {
            "name": "get_drop_index_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.get_drop_index_sql",
            "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_drop_index_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1074407,
            "supported_languages": null
        },
        "macro.dbt.default__get_drop_index_sql": {
            "name": "default__get_drop_index_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.default__get_drop_index_sql",
            "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1076186,
            "supported_languages": null
        },
        "macro.dbt.get_show_indexes_sql": {
            "name": "get_show_indexes_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.get_show_indexes_sql",
            "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_show_indexes_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.10781,
            "supported_languages": null
        },
        "macro.dbt.default__get_show_indexes_sql": {
            "name": "default__get_show_indexes_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/adapters/indexes.sql",
            "original_file_path": "macros/adapters/indexes.sql",
            "unique_id": "macro.dbt.default__get_show_indexes_sql",
            "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1079583,
            "supported_languages": null
        },
        "macro.dbt.convert_datetime": {
            "name": "convert_datetime",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "unique_id": "macro.dbt.convert_datetime",
            "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1099293,
            "supported_languages": null
        },
        "macro.dbt.dates_in_range": {
            "name": "dates_in_range",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "unique_id": "macro.dbt.dates_in_range",
            "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.convert_datetime"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1113691,
            "supported_languages": null
        },
        "macro.dbt.partition_range": {
            "name": "partition_range",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "unique_id": "macro.dbt.partition_range",
            "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.dates_in_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1128612,
            "supported_languages": null
        },
        "macro.dbt.py_current_timestring": {
            "name": "py_current_timestring",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/datetime.sql",
            "original_file_path": "macros/etc/datetime.sql",
            "unique_id": "macro.dbt.py_current_timestring",
            "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1131945,
            "supported_languages": null
        },
        "macro.dbt.statement": {
            "name": "statement",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "unique_id": "macro.dbt.statement",
            "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1149726,
            "supported_languages": null
        },
        "macro.dbt.noop_statement": {
            "name": "noop_statement",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "unique_id": "macro.dbt.noop_statement",
            "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1156914,
            "supported_languages": null
        },
        "macro.dbt.run_query": {
            "name": "run_query",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/etc/statement.sql",
            "original_file_path": "macros/etc/statement.sql",
            "unique_id": "macro.dbt.run_query",
            "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1160657,
            "supported_languages": null
        },
        "macro.dbt.default__test_not_null": {
            "name": "default__test_not_null",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/generic_test_sql/not_null.sql",
            "original_file_path": "macros/generic_test_sql/not_null.sql",
            "unique_id": "macro.dbt.default__test_not_null",
            "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.116462,
            "supported_languages": null
        },
        "macro.dbt.default__test_relationships": {
            "name": "default__test_relationships",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/generic_test_sql/relationships.sql",
            "original_file_path": "macros/generic_test_sql/relationships.sql",
            "unique_id": "macro.dbt.default__test_relationships",
            "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1168878,
            "supported_languages": null
        },
        "macro.dbt.default__test_accepted_values": {
            "name": "default__test_accepted_values",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/generic_test_sql/accepted_values.sql",
            "original_file_path": "macros/generic_test_sql/accepted_values.sql",
            "unique_id": "macro.dbt.default__test_accepted_values",
            "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1175938,
            "supported_languages": null
        },
        "macro.dbt.default__test_unique": {
            "name": "default__test_unique",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/generic_test_sql/unique.sql",
            "original_file_path": "macros/generic_test_sql/unique.sql",
            "unique_id": "macro.dbt.default__test_unique",
            "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1179016,
            "supported_languages": null
        },
        "macro.dbt.get_rename_intermediate_sql": {
            "name": "get_rename_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename_intermediate.sql",
            "original_file_path": "macros/relations/rename_intermediate.sql",
            "unique_id": "macro.dbt.get_rename_intermediate_sql",
            "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_rename_intermediate_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1183057,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_intermediate_sql": {
            "name": "default__get_rename_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename_intermediate.sql",
            "original_file_path": "macros/relations/rename_intermediate.sql",
            "unique_id": "macro.dbt.default__get_rename_intermediate_sql",
            "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.get_rename_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1185672,
            "supported_languages": null
        },
        "macro.dbt.drop_schema_named": {
            "name": "drop_schema_named",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/schema.sql",
            "original_file_path": "macros/relations/schema.sql",
            "unique_id": "macro.dbt.drop_schema_named",
            "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_schema_named"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1188815,
            "supported_languages": null
        },
        "macro.dbt.default__drop_schema_named": {
            "name": "default__drop_schema_named",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/schema.sql",
            "original_file_path": "macros/relations/schema.sql",
            "unique_id": "macro.dbt.default__drop_schema_named",
            "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1191368,
            "supported_languages": null
        },
        "macro.dbt.get_replace_sql": {
            "name": "get_replace_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/replace.sql",
            "original_file_path": "macros/relations/replace.sql",
            "unique_id": "macro.dbt.get_replace_sql",
            "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_replace_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1198823,
            "supported_languages": null
        },
        "macro.dbt.default__get_replace_sql": {
            "name": "default__get_replace_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/replace.sql",
            "original_file_path": "macros/relations/replace.sql",
            "unique_id": "macro.dbt.default__get_replace_sql",
            "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_replace_view_sql",
                    "macro.dbt.get_replace_table_sql",
                    "macro.dbt.get_replace_materialized_view_sql",
                    "macro.dbt.get_create_intermediate_sql",
                    "macro.dbt.get_create_backup_sql",
                    "macro.dbt.get_rename_intermediate_sql",
                    "macro.dbt.get_drop_backup_sql",
                    "macro.dbt.get_drop_sql",
                    "macro.dbt.get_create_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.122159,
            "supported_languages": null
        },
        "macro.dbt.get_create_backup_sql": {
            "name": "get_create_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create_backup.sql",
            "original_file_path": "macros/relations/create_backup.sql",
            "unique_id": "macro.dbt.get_create_backup_sql",
            "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_backup_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.122654,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_backup_sql": {
            "name": "default__get_create_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create_backup.sql",
            "original_file_path": "macros/relations/create_backup.sql",
            "unique_id": "macro.dbt.default__get_create_backup_sql",
            "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.get_drop_sql",
                    "macro.dbt.get_rename_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1230211,
            "supported_languages": null
        },
        "macro.dbt.get_create_sql": {
            "name": "get_create_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create.sql",
            "original_file_path": "macros/relations/create.sql",
            "unique_id": "macro.dbt.get_create_sql",
            "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1235516,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_sql": {
            "name": "default__get_create_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create.sql",
            "original_file_path": "macros/relations/create.sql",
            "unique_id": "macro.dbt.default__get_create_sql",
            "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.get_create_table_as_sql",
                    "macro.dbt.get_create_materialized_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.124084,
            "supported_languages": null
        },
        "macro.dbt.get_drop_backup_sql": {
            "name": "get_drop_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop_backup.sql",
            "original_file_path": "macros/relations/drop_backup.sql",
            "unique_id": "macro.dbt.get_drop_backup_sql",
            "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_drop_backup_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1244733,
            "supported_languages": null
        },
        "macro.dbt.default__get_drop_backup_sql": {
            "name": "default__get_drop_backup_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop_backup.sql",
            "original_file_path": "macros/relations/drop_backup.sql",
            "unique_id": "macro.dbt.default__get_drop_backup_sql",
            "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_backup_relation",
                    "macro.dbt.get_drop_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.124729,
            "supported_languages": null
        },
        "macro.dbt.get_drop_sql": {
            "name": "get_drop_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop.sql",
            "original_file_path": "macros/relations/drop.sql",
            "unique_id": "macro.dbt.get_drop_sql",
            "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_drop_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1256118,
            "supported_languages": null
        },
        "macro.dbt.default__get_drop_sql": {
            "name": "default__get_drop_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop.sql",
            "original_file_path": "macros/relations/drop.sql",
            "unique_id": "macro.dbt.default__get_drop_sql",
            "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.drop_view",
                    "macro.dbt.drop_table",
                    "macro.dbt.drop_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.126131,
            "supported_languages": null
        },
        "macro.dbt.drop_relation": {
            "name": "drop_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop.sql",
            "original_file_path": "macros/relations/drop.sql",
            "unique_id": "macro.dbt.drop_relation",
            "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__drop_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1266327,
            "supported_languages": null
        },
        "macro.dbt.default__drop_relation": {
            "name": "default__drop_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop.sql",
            "original_file_path": "macros/relations/drop.sql",
            "unique_id": "macro.dbt.default__drop_relation",
            "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.get_drop_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1271777,
            "supported_languages": null
        },
        "macro.dbt.drop_relation_if_exists": {
            "name": "drop_relation_if_exists",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/drop.sql",
            "original_file_path": "macros/relations/drop.sql",
            "unique_id": "macro.dbt.drop_relation_if_exists",
            "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1274908,
            "supported_languages": null
        },
        "macro.dbt.get_rename_sql": {
            "name": "get_rename_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename.sql",
            "original_file_path": "macros/relations/rename.sql",
            "unique_id": "macro.dbt.get_rename_sql",
            "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_rename_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1284955,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_sql": {
            "name": "default__get_rename_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename.sql",
            "original_file_path": "macros/relations/rename.sql",
            "unique_id": "macro.dbt.default__get_rename_sql",
            "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_rename_view_sql",
                    "macro.dbt.get_rename_table_sql",
                    "macro.dbt.get_rename_materialized_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1291583,
            "supported_languages": null
        },
        "macro.dbt.rename_relation": {
            "name": "rename_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename.sql",
            "original_file_path": "macros/relations/rename.sql",
            "unique_id": "macro.dbt.rename_relation",
            "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__rename_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1294432,
            "supported_languages": null
        },
        "macro.dbt.default__rename_relation": {
            "name": "default__rename_relation",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/rename.sql",
            "original_file_path": "macros/relations/rename.sql",
            "unique_id": "macro.dbt.default__rename_relation",
            "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.129833,
            "supported_languages": null
        },
        "macro.dbt.get_create_intermediate_sql": {
            "name": "get_create_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create_intermediate.sql",
            "original_file_path": "macros/relations/create_intermediate.sql",
            "unique_id": "macro.dbt.get_create_intermediate_sql",
            "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_intermediate_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1303334,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_intermediate_sql": {
            "name": "default__get_create_intermediate_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/create_intermediate.sql",
            "original_file_path": "macros/relations/create_intermediate.sql",
            "unique_id": "macro.dbt.default__get_create_intermediate_sql",
            "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.make_intermediate_relation",
                    "macro.dbt.get_drop_sql",
                    "macro.dbt.get_create_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1306763,
            "supported_languages": null
        },
        "macro.dbt.get_table_columns_and_constraints": {
            "name": "get_table_columns_and_constraints",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.get_table_columns_and_constraints",
            "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_table_columns_and_constraints"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.131846,
            "supported_languages": null
        },
        "macro.dbt.default__get_table_columns_and_constraints": {
            "name": "default__get_table_columns_and_constraints",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.default__get_table_columns_and_constraints",
            "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.table_columns_and_constraints"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.132116,
            "supported_languages": null
        },
        "macro.dbt.table_columns_and_constraints": {
            "name": "table_columns_and_constraints",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.table_columns_and_constraints",
            "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1329007,
            "supported_languages": null
        },
        "macro.dbt.get_assert_columns_equivalent": {
            "name": "get_assert_columns_equivalent",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.get_assert_columns_equivalent",
            "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.133135,
            "supported_languages": null
        },
        "macro.dbt.default__get_assert_columns_equivalent": {
            "name": "default__get_assert_columns_equivalent",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.default__get_assert_columns_equivalent",
            "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.133323,
            "supported_languages": null
        },
        "macro.dbt.assert_columns_equivalent": {
            "name": "assert_columns_equivalent",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.assert_columns_equivalent",
            "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_column_schema_from_query",
                    "macro.dbt.get_empty_schema_sql",
                    "macro.dbt.format_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1350482,
            "supported_languages": null
        },
        "macro.dbt.format_columns": {
            "name": "format_columns",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.format_columns",
            "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__format_column"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1355534,
            "supported_languages": null
        },
        "macro.dbt.default__format_column": {
            "name": "default__format_column",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/column/columns_spec_ddl.sql",
            "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
            "unique_id": "macro.dbt.default__format_column",
            "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.135999,
            "supported_languages": null
        },
        "macro.dbt.refresh_materialized_view": {
            "name": "refresh_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/refresh.sql",
            "original_file_path": "macros/relations/materialized_view/refresh.sql",
            "unique_id": "macro.dbt.refresh_materialized_view",
            "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__refresh_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.136409,
            "supported_languages": null
        },
        "macro.dbt.default__refresh_materialized_view": {
            "name": "default__refresh_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/refresh.sql",
            "original_file_path": "macros/relations/materialized_view/refresh.sql",
            "unique_id": "macro.dbt.default__refresh_materialized_view",
            "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.13659,
            "supported_languages": null
        },
        "macro.dbt.get_replace_materialized_view_sql": {
            "name": "get_replace_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/replace.sql",
            "original_file_path": "macros/relations/materialized_view/replace.sql",
            "unique_id": "macro.dbt.get_replace_materialized_view_sql",
            "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_replace_materialized_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.137277,
            "supported_languages": null
        },
        "macro.dbt.default__get_replace_materialized_view_sql": {
            "name": "default__get_replace_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/replace.sql",
            "original_file_path": "macros/relations/materialized_view/replace.sql",
            "unique_id": "macro.dbt.default__get_replace_materialized_view_sql",
            "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1375105,
            "supported_languages": null
        },
        "macro.dbt.get_create_materialized_view_as_sql": {
            "name": "get_create_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/create.sql",
            "original_file_path": "macros/relations/materialized_view/create.sql",
            "unique_id": "macro.dbt.get_create_materialized_view_as_sql",
            "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_materialized_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.13789,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_materialized_view_as_sql": {
            "name": "default__get_create_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/create.sql",
            "original_file_path": "macros/relations/materialized_view/create.sql",
            "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql",
            "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1380959,
            "supported_languages": null
        },
        "macro.dbt.drop_materialized_view": {
            "name": "drop_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/drop.sql",
            "original_file_path": "macros/relations/materialized_view/drop.sql",
            "unique_id": "macro.dbt.drop_materialized_view",
            "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_materialized_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1384315,
            "supported_languages": null
        },
        "macro.dbt.default__drop_materialized_view": {
            "name": "default__drop_materialized_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/drop.sql",
            "original_file_path": "macros/relations/materialized_view/drop.sql",
            "unique_id": "macro.dbt.default__drop_materialized_view",
            "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.138597,
            "supported_languages": null
        },
        "macro.dbt.get_rename_materialized_view_sql": {
            "name": "get_rename_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/rename.sql",
            "original_file_path": "macros/relations/materialized_view/rename.sql",
            "unique_id": "macro.dbt.get_rename_materialized_view_sql",
            "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_rename_materialized_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1389737,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_materialized_view_sql": {
            "name": "default__get_rename_materialized_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/rename.sql",
            "original_file_path": "macros/relations/materialized_view/rename.sql",
            "unique_id": "macro.dbt.default__get_rename_materialized_view_sql",
            "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1391923,
            "supported_languages": null
        },
        "macro.dbt.get_alter_materialized_view_as_sql": {
            "name": "get_alter_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/alter.sql",
            "original_file_path": "macros/relations/materialized_view/alter.sql",
            "unique_id": "macro.dbt.get_alter_materialized_view_as_sql",
            "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_alter_materialized_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1400166,
            "supported_languages": null
        },
        "macro.dbt.default__get_alter_materialized_view_as_sql": {
            "name": "default__get_alter_materialized_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/alter.sql",
            "original_file_path": "macros/relations/materialized_view/alter.sql",
            "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql",
            "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1404018,
            "supported_languages": null
        },
        "macro.dbt.get_materialized_view_configuration_changes": {
            "name": "get_materialized_view_configuration_changes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/alter.sql",
            "original_file_path": "macros/relations/materialized_view/alter.sql",
            "unique_id": "macro.dbt.get_materialized_view_configuration_changes",
            "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_materialized_view_configuration_changes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.140841,
            "supported_languages": null
        },
        "macro.dbt.default__get_materialized_view_configuration_changes": {
            "name": "default__get_materialized_view_configuration_changes",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/materialized_view/alter.sql",
            "original_file_path": "macros/relations/materialized_view/alter.sql",
            "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes",
            "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1410637,
            "supported_languages": null
        },
        "macro.dbt.get_replace_table_sql": {
            "name": "get_replace_table_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/replace.sql",
            "original_file_path": "macros/relations/table/replace.sql",
            "unique_id": "macro.dbt.get_replace_table_sql",
            "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_replace_table_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.141456,
            "supported_languages": null
        },
        "macro.dbt.default__get_replace_table_sql": {
            "name": "default__get_replace_table_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/replace.sql",
            "original_file_path": "macros/relations/table/replace.sql",
            "unique_id": "macro.dbt.default__get_replace_table_sql",
            "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1416817,
            "supported_languages": null
        },
        "macro.dbt.get_create_table_as_sql": {
            "name": "get_create_table_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.get_create_table_as_sql",
            "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_table_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1432889,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_table_as_sql": {
            "name": "default__get_create_table_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.default__get_create_table_as_sql",
            "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1435723,
            "supported_languages": null
        },
        "macro.dbt.create_table_as": {
            "name": "create_table_as",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.create_table_as",
            "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__create_table_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1441808,
            "supported_languages": null
        },
        "macro.dbt.default__create_table_as": {
            "name": "default__create_table_as",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.default__create_table_as",
            "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent",
                    "macro.dbt.get_table_columns_and_constraints",
                    "macro.dbt.get_select_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1450834,
            "supported_languages": null
        },
        "macro.dbt.default__get_column_names": {
            "name": "default__get_column_names",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.default__get_column_names",
            "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1462598,
            "supported_languages": null
        },
        "macro.dbt.get_select_subquery": {
            "name": "get_select_subquery",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.get_select_subquery",
            "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_select_subquery"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.146538,
            "supported_languages": null
        },
        "macro.dbt.default__get_select_subquery": {
            "name": "default__get_select_subquery",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/create.sql",
            "original_file_path": "macros/relations/table/create.sql",
            "unique_id": "macro.dbt.default__get_select_subquery",
            "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.get_column_names",
                    "macro.dbt.default__get_column_names"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1467905,
            "supported_languages": null
        },
        "macro.dbt.drop_table": {
            "name": "drop_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/drop.sql",
            "original_file_path": "macros/relations/table/drop.sql",
            "unique_id": "macro.dbt.drop_table",
            "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1471345,
            "supported_languages": null
        },
        "macro.dbt.default__drop_table": {
            "name": "default__drop_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/drop.sql",
            "original_file_path": "macros/relations/table/drop.sql",
            "unique_id": "macro.dbt.default__drop_table",
            "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1472793,
            "supported_languages": null
        },
        "macro.dbt.get_rename_table_sql": {
            "name": "get_rename_table_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/rename.sql",
            "original_file_path": "macros/relations/table/rename.sql",
            "unique_id": "macro.dbt.get_rename_table_sql",
            "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_rename_table_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1476412,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_table_sql": {
            "name": "default__get_rename_table_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/table/rename.sql",
            "original_file_path": "macros/relations/table/rename.sql",
            "unique_id": "macro.dbt.default__get_rename_table_sql",
            "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.147843,
            "supported_languages": null
        },
        "macro.dbt.get_replace_view_sql": {
            "name": "get_replace_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt.get_replace_view_sql",
            "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_replace_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1488416,
            "supported_languages": null
        },
        "macro.dbt.default__get_replace_view_sql": {
            "name": "default__get_replace_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt.default__get_replace_view_sql",
            "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1490355,
            "supported_languages": null
        },
        "macro.dbt.create_or_replace_view": {
            "name": "create_or_replace_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt.create_or_replace_view",
            "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_hooks",
                    "macro.dbt.handle_existing_table",
                    "macro.dbt.should_full_refresh",
                    "macro.dbt.statement",
                    "macro.dbt.get_create_view_as_sql",
                    "macro.dbt.should_revoke",
                    "macro.dbt.apply_grants"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1505046,
            "supported_languages": null
        },
        "macro.dbt.handle_existing_table": {
            "name": "handle_existing_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt.handle_existing_table",
            "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__handle_existing_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.150748,
            "supported_languages": null
        },
        "macro.dbt.default__handle_existing_table": {
            "name": "default__handle_existing_table",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/replace.sql",
            "original_file_path": "macros/relations/view/replace.sql",
            "unique_id": "macro.dbt.default__handle_existing_table",
            "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1510143,
            "supported_languages": null
        },
        "macro.dbt.get_create_view_as_sql": {
            "name": "get_create_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/create.sql",
            "original_file_path": "macros/relations/view/create.sql",
            "unique_id": "macro.dbt.get_create_view_as_sql",
            "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_create_view_as_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.151524,
            "supported_languages": null
        },
        "macro.dbt.default__get_create_view_as_sql": {
            "name": "default__get_create_view_as_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/create.sql",
            "original_file_path": "macros/relations/view/create.sql",
            "unique_id": "macro.dbt.default__get_create_view_as_sql",
            "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1517313,
            "supported_languages": null
        },
        "macro.dbt.create_view_as": {
            "name": "create_view_as",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/create.sql",
            "original_file_path": "macros/relations/view/create.sql",
            "unique_id": "macro.dbt.create_view_as",
            "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_duckdb.duckdb__create_view_as"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1519642,
            "supported_languages": null
        },
        "macro.dbt.default__create_view_as": {
            "name": "default__create_view_as",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/create.sql",
            "original_file_path": "macros/relations/view/create.sql",
            "unique_id": "macro.dbt.default__create_view_as",
            "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.get_assert_columns_equivalent"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1525068,
            "supported_languages": null
        },
        "macro.dbt.drop_view": {
            "name": "drop_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/drop.sql",
            "original_file_path": "macros/relations/view/drop.sql",
            "unique_id": "macro.dbt.drop_view",
            "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__drop_view"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1528409,
            "supported_languages": null
        },
        "macro.dbt.default__drop_view": {
            "name": "default__drop_view",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/drop.sql",
            "original_file_path": "macros/relations/view/drop.sql",
            "unique_id": "macro.dbt.default__drop_view",
            "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1529872,
            "supported_languages": null
        },
        "macro.dbt.get_rename_view_sql": {
            "name": "get_rename_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/rename.sql",
            "original_file_path": "macros/relations/view/rename.sql",
            "unique_id": "macro.dbt.get_rename_view_sql",
            "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__get_rename_view_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1533616,
            "supported_languages": null
        },
        "macro.dbt.default__get_rename_view_sql": {
            "name": "default__get_rename_view_sql",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/relations/view/rename.sql",
            "original_file_path": "macros/relations/view/rename.sql",
            "unique_id": "macro.dbt.default__get_rename_view_sql",
            "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.15356,
            "supported_languages": null
        },
        "macro.dbt.resolve_model_name": {
            "name": "resolve_model_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.resolve_model_name",
            "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__resolve_model_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1556385,
            "supported_languages": null
        },
        "macro.dbt.default__resolve_model_name": {
            "name": "default__resolve_model_name",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.default__resolve_model_name",
            "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1558948,
            "supported_languages": null
        },
        "macro.dbt.build_ref_function": {
            "name": "build_ref_function",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.build_ref_function",
            "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.resolve_model_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1571193,
            "supported_languages": null
        },
        "macro.dbt.build_source_function": {
            "name": "build_source_function",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.build_source_function",
            "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.resolve_model_name"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1577284,
            "supported_languages": null
        },
        "macro.dbt.build_config_dict": {
            "name": "build_config_dict",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.build_config_dict",
            "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.158544,
            "supported_languages": null
        },
        "macro.dbt.py_script_postfix": {
            "name": "py_script_postfix",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.py_script_postfix",
            "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.build_ref_function",
                    "macro.dbt.build_source_function",
                    "macro.dbt.build_config_dict",
                    "macro.dbt.resolve_model_name",
                    "macro.dbt.is_incremental",
                    "macro.dbt.py_script_comment"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1591434,
            "supported_languages": null
        },
        "macro.dbt.py_script_comment": {
            "name": "py_script_comment",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "macros/python_model/python.sql",
            "original_file_path": "macros/python_model/python.sql",
            "unique_id": "macro.dbt.py_script_comment",
            "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1592453,
            "supported_languages": null
        },
        "macro.dbt.test_unique": {
            "name": "test_unique",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "unique_id": "macro.dbt.test_unique",
            "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_unique"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.159873,
            "supported_languages": null
        },
        "macro.dbt.test_not_null": {
            "name": "test_not_null",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "unique_id": "macro.dbt.test_not_null",
            "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_not_null"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.160193,
            "supported_languages": null
        },
        "macro.dbt.test_accepted_values": {
            "name": "test_accepted_values",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "unique_id": "macro.dbt.test_accepted_values",
            "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1606736,
            "supported_languages": null
        },
        "macro.dbt.test_relationships": {
            "name": "test_relationships",
            "resource_type": "macro",
            "package_name": "dbt",
            "path": "tests/generic/builtin.sql",
            "original_file_path": "tests/generic/builtin.sql",
            "unique_id": "macro.dbt.test_relationships",
            "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.default__test_relationships"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.161052,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.wrap_string_with_quotes": {
            "name": "wrap_string_with_quotes",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/wrap_string_with_quotes.sql",
            "original_file_path": "macros/wrap_string_with_quotes.sql",
            "unique_id": "macro.dbt_project_evaluator.wrap_string_with_quotes",
            "macro_sql": "{% macro wrap_string_with_quotes(str) %}\n  {% if str is none %}\n    {{ return('cast(NULL as ' ~ dbt.type_string() ~ ')') }}\n  {% else %}\n    {{ dbt.string_literal(str) }}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt.string_literal"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1615489,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.bigquery__string_literal": {
            "name": "bigquery__string_literal",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/wrap_string_with_quotes.sql",
            "original_file_path": "macros/wrap_string_with_quotes.sql",
            "unique_id": "macro.dbt_project_evaluator.bigquery__string_literal",
            "macro_sql": "{% macro bigquery__string_literal(value) -%}\n  '''{{ value }}'''\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1616845,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.calculate_sql_complexity": {
            "name": "calculate_sql_complexity",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/calculate_sql_complexity.sql",
            "original_file_path": "macros/calculate_sql_complexity.sql",
            "unique_id": "macro.dbt_project_evaluator.calculate_sql_complexity",
            "macro_sql": "{% macro calculate_sql_complexity(node) %}\n    {{ return(adapter.dispatch('calculate_sql_complexity', 'dbt_project_evaluator')(node)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.default__calculate_sql_complexity"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1628866,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.default__calculate_sql_complexity": {
            "name": "default__calculate_sql_complexity",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/calculate_sql_complexity.sql",
            "original_file_path": "macros/calculate_sql_complexity.sql",
            "unique_id": "macro.dbt_project_evaluator.default__calculate_sql_complexity",
            "macro_sql": "{% macro default__calculate_sql_complexity(node) %}\n\n    {% if node.resource_type == 'model' and node.language == 'sql' %}\n\n        {% if execute %}\n        {%- set model_raw_sql = node.raw_sql or node.raw_code -%}\n        {%- else -%}\n        {%- set model_raw_sql = '' -%}\n        {%- endif -%}\n\n        {%- set re = modules.re -%}\n        {%- set ns = namespace(complexity = 0) -%}\n\n        {# we remove the comments that start with -- , or other characters configured #}\n        {%- set comment_chars_match = \"(\" ~ var('comment_chars') | join(\"|\") ~ \").*\" -%}\n        {%- set model_raw_sql_no_comments = re.sub(comment_chars_match, '', model_raw_sql) -%}\n\n        {%- for token, token_cost in var('token_costs').items() -%}\n\n            {# this is not 100% perfect but it checks more or less if the token exists as a word by itself or followed by \"(\"\" like for least()/greatest() #}\n            {%- set token_with_boundaries = \"\\\\b\" ~ token ~ \"[\\\\t\\\\r\\\\n (]\" -%}\n            {%- set all_regex_matches = re.findall(token_with_boundaries, model_raw_sql_no_comments, re.IGNORECASE) -%}\n            {%- set ns.complexity = ns.complexity + token_cost * (all_regex_matches | length) -%}\n\n        {%- endfor -%}\n\n        {{ return(ns.complexity) }}\n\n    {% endif %}\n\n    {{ return(0) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1643717,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.loop_vars": {
            "name": "loop_vars",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/loop_vars.sql",
            "original_file_path": "macros/loop_vars.sql",
            "unique_id": "macro.dbt_project_evaluator.loop_vars",
            "macro_sql": "{% macro loop_vars(vars) %}\n    {{ return(adapter.dispatch('loop_vars', 'dbt_project_evaluator')(vars)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.default__loop_vars"
                ]
            },
            "description": "A macro that loops through variables and returns them as a SQL query to be used in a model",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": "dbt_project_evaluator://models/staging/variables/variables.yml",
            "arguments": [
                {
                    "name": "vars",
                    "type": "list|string",
                    "description": "A list of variables from dbt_project.yml"
                }
            ],
            "created_at": 1721827582.702015,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.default__loop_vars": {
            "name": "default__loop_vars",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/loop_vars.sql",
            "original_file_path": "macros/loop_vars.sql",
            "unique_id": "macro.dbt_project_evaluator.default__loop_vars",
            "macro_sql": "{% macro default__loop_vars(vars) %}\n{%- set sql_query = [] -%}\n{%- for var_name in vars -%}\n    {%- if var(var_name,[]) is not string -%}\n        {%- for var_value in var(var_name,[]) -%}\n            {% set sql_command %}\n            select '{{ var_name }}' as var_name, '{{ var_value }}' as var_value\n            {% endset %}\n            {%- do sql_query.append(sql_command) -%}\n        {%- endfor -%}\n    {%- else -%}\n        {% set sql_command %}\n        select '{{ var_name }}' as var_name, '{{ var(var_name,[]) }}' as var_value\n        {% endset %}\n        {%- do sql_query.append(sql_command) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- if sql_query -%}\n{{ sql_query | join('union all') }}\n{%- else -%}\nselect '' as var_name, '' as var_value\nlimit 0\n{%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.166083,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.find_all_hard_coded_references": {
            "name": "find_all_hard_coded_references",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/find_all_hard_coded_references.sql",
            "original_file_path": "macros/find_all_hard_coded_references.sql",
            "unique_id": "macro.dbt_project_evaluator.find_all_hard_coded_references",
            "macro_sql": "{% macro find_all_hard_coded_references(node) %}\n    {{ return(adapter.dispatch('find_all_hard_coded_references', 'dbt_project_evaluator')(node)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.default__find_all_hard_coded_references"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1672955,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.default__find_all_hard_coded_references": {
            "name": "default__find_all_hard_coded_references",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/find_all_hard_coded_references.sql",
            "original_file_path": "macros/find_all_hard_coded_references.sql",
            "unique_id": "macro.dbt_project_evaluator.default__find_all_hard_coded_references",
            "macro_sql": "{% macro default__find_all_hard_coded_references(node) %}\n\n    {%- set all_hard_coded_references_list = [] -%}\n\n    {% if node.resource_type == 'model' and node.language == \"sql\" %}\n\n        {% if execute %}\n        {%- set model_raw_sql = node.raw_sql or node.raw_code -%}\n        {%- else -%}\n        {%- set model_raw_sql = '' -%}\n        {%- endif -%}\n\n        {# we remove the comments that start with -- , or other characters configured #}\n        {%- set re = modules.re -%}\n        {%- set comment_chars_match = \"(\" ~ var('comment_chars') | join(\"|\") ~ \").*\" -%}\n        {%- set model_raw_sql_no_comments = re.sub(comment_chars_match, '', model_raw_sql) -%}\n\n        {#-\n            REGEX Explanations\n            \n            # from_var_1\n            - matches (from or join) followed by some spaces and then {{var(<something>)}}\n            \n            # from_var_2\n            - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n            \n            # from_table_1\n            - matches (from or join) followed by some spaces and then <something>.<something_else>\n              where each <something> is enclosed by (` or [ or \" or ' or nothing)\n            \n            # from_table_2\n            - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n              where each <something> is enclosed by (` or [ or \" or ' or nothing)\n            \n            # from_table_3\n            - matches (from or join) followed by some spaces and then <something>\n              where <something> is enclosed by (` or [ or \" or ')\n\n            # notes\n            - all regex matches exclude text that immediately follows \"distinct \"\n\n        -#}\n\n        {%- set re = modules.re -%}\n\n        {%- set from_hard_coded_references = {\n            'from_var_1':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n                ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n                # third matching group\n                # at least 1 of anything except a parenthesis or quotation mark\n                ([^)\\'\\\"]+)\n\n                # fourth matching group\n                # 1 or 0 quotation mark, 0 or more whitespace character(s)\n                ([\\'\\\"]?\\s*)\n\n                # fifth matching group\n                # a closing parenthesis, 0 or more whitespace character(s), closing }}\n                (\\)\\s*}})\n\n                ',\n            'from_var_2':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n                ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n                # third matching group\n                # at least 1 of anything except a parenthesis or quotation mark            \n                ([^)\\'\\\"]+)\n\n                # fourth matching group\n                # 1 or 0 quotation mark, 0 or more whitespace character(s)\n                ([\\'\\\"]?\\s*)\n\n                # fifth matching group\n                # a comma\n                (,)\n\n                # sixth matching group\n                # 0 or more whitespace character(s), 1 or 0 quotation mark            \n                (\\s*[\\'\\\"]?)\n\n                # seventh matching group\n                # at least 1 of anything except a parenthesis or quotation mark            \n                ([^)\\'\\\"]+)\n\n                # eighth matching group\n                # 1 or 0 quotation mark, 0 or more whitespace character(s)            \n                ([\\'\\\"]?\\s*)\n\n                # ninth matching group\n                # a closing parenthesis, 0 or more whitespace character(s), closing }}            \n                (\\)\\s*}})\n\n                ',\n            'from_table_1':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character            \n                (from|join)\\s+\n\n                # second matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # third matching group\n                # at least 1 word character\n                (\\w+-?\\w+)\n\n                # fouth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\]`\\\"\\']?)\n\n                # fifth matching group\n                # a period\n                (\\.)\n\n                # sixth matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # seventh matching group\n                # at least 1 word character\n                (\\w+-?\\w+)\n\n                # eighth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n                ([\\]`\\\"\\']?)(?=\\s|$)\n\n                ',\n            'from_table_2':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # third matching group\n                # at least 1 word character\n                (\\w+-?\\w+)\n\n                # fouth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\]`\\\"\\']?)\n\n                # fifth matching group\n                # a period\n                (\\.)\n\n                # sixth matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # seventh matching group\n                # at least 1 word character\n                (\\w+-?\\w+)\n\n                # eighth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\]`\\\"\\']?)\n\n                # ninth matching group\n                # a period\n                (\\.)\n\n                # tenth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # eleventh matching group\n                # at least 1 word character\n                (\\w+-?\\w+)\n\n                # twelfth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark) followed by a whitespace character or end of string\n                ([\\]`\\\"\\']?)(?=\\s|$)\n\n                ',\n            'from_table_3':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # 1 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\'])\n\n                # third matching group\n                # at least 1 word character\n                (\\w+-?\\w+)\n                \n                # fourth matching group\n                # 1 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n                ([\\]`\\\"\\'])(?=\\s|$)\n\n                '\n        } -%}\n\n        {%- for regex_name, regex_pattern in from_hard_coded_references.items() -%}\n\n            {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql_no_comments) -%}\n                \n                {%- for match in all_regex_matches -%}\n\n                    {%- set raw_reference = match[1:]|join()|trim -%}\n\n                    {%- do all_hard_coded_references_list.append(raw_reference) -%}\n\n                {%- endfor -%}\n        \n        {%- endfor -%}\n\n    {% endif %}\n    \n    {% set all_hard_coded_references = set(all_hard_coded_references_list)|sort|join(', ')|trim %}\n\n    {{ return(all_hard_coded_references) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1693976,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.filter_exceptions": {
            "name": "filter_exceptions",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/filter_exceptions.sql",
            "original_file_path": "macros/filter_exceptions.sql",
            "unique_id": "macro.dbt_project_evaluator.filter_exceptions",
            "macro_sql": "{% macro filter_exceptions() -%}\n    {{ return(adapter.dispatch('filter_exceptions', 'dbt_project_evaluator')()) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.default__filter_exceptions"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1701634,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.default__filter_exceptions": {
            "name": "default__filter_exceptions",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/filter_exceptions.sql",
            "original_file_path": "macros/filter_exceptions.sql",
            "unique_id": "macro.dbt_project_evaluator.default__filter_exceptions",
            "macro_sql": "{% macro default__filter_exceptions() %}\n\n    {% set query_filters %}\n    select\n        column_name,\n        id_to_exclude\n    from {{ ref('dbt_project_evaluator_exceptions') }}\n    where fct_name = '{{ model.name }}'\n    {% endset %}\n\n    {% if execute %}\n    {% set is_default_seed = 'dbt_project_evaluator' in graph.nodes.values() | \n        selectattr('resource_type', 'equalto', 'seed') | \n        selectattr('name', 'equalto', 'dbt_project_evaluator_exceptions') | \n        map(attribute = 'package_name') | list %}\n\n    {% if not is_default_seed %}\n    \n        {% if flags.WHICH not in ['compile'] %}\n            where 1 = 1\n            {% for row_filter in run_query(query_filters) %}\n                and {{ row_filter[0] }} not like '{{ row_filter[1] }}'\n            {% endfor %}\n        {% endif %}\n    \n    {% endif %}\n\n    {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1713252,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.insert_resources_from_graph": {
            "name": "insert_resources_from_graph",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/insert_resources_from_graph.sql",
            "original_file_path": "macros/insert_resources_from_graph.sql",
            "unique_id": "macro.dbt_project_evaluator.insert_resources_from_graph",
            "macro_sql": "{% macro insert_resources_from_graph(relation, resource_type='nodes', relationships=False, columns=False, batch_size=var('insert_batch_size') | int) %}\n  {%- set values = get_resource_values(resource_type, relationships, columns) -%}\n  {%- set values_length = values | length -%}\n  {%- set loop_count = (values_length / batch_size) | round(0, 'ceil') | int -%}\n  \n    {%- for loop_number in range(loop_count) -%}\n        {%- set lower_bound = loop.index0 * batch_size -%}\n        {%- set upper_bound = loop.index * batch_size -%}\n        {%- set values_subset = values[lower_bound : upper_bound] %}\n        {%- set values_list_of_strings = [] -%}\n        {%- for indiv_values in values_subset %}\n            {%- do values_list_of_strings.append( indiv_values | join(\", \\n\")) -%}\n        {%- endfor -%}\n        {%- set values_string = '(' ~ values_list_of_strings | join(\"), \\n\\n(\") ~ ')' %}\n        {%- set insert_statement = \"insert into \" ~ relation ~ \" values \\n\" ~  values_string ~ \";\"%}\n        {% call statement('insert') -%}\n            {{ insert_statement }}\n        {%- endcall %}\n    {% endfor %}\n    \n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.get_resource_values",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1732037,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.set_is_excluded": {
            "name": "set_is_excluded",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/set_is_excluded.sql",
            "original_file_path": "macros/set_is_excluded.sql",
            "unique_id": "macro.dbt_project_evaluator.set_is_excluded",
            "macro_sql": "{% macro set_is_excluded(resource, resource_type) %}\n    {{ return(adapter.dispatch('set_is_excluded', 'dbt_project_evaluator')(resource, resource_type)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.default__set_is_excluded"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.173941,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.default__set_is_excluded": {
            "name": "default__set_is_excluded",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/set_is_excluded.sql",
            "original_file_path": "macros/set_is_excluded.sql",
            "unique_id": "macro.dbt_project_evaluator.default__set_is_excluded",
            "macro_sql": "{% macro default__set_is_excluded(resource, resource_type) %}\n\n    {% set re = modules.re %}\n    {%- set ns = namespace(exclude=false) -%}\n\n    {% if resource_type == 'node' %}\n        {%- set resource_path = resource.original_file_path | replace(\"\\\\\",\"\\\\\\\\\") -%}\n    {% elif resource_type == 'source' %}\n        {%- set resource_path = resource.original_file_path | replace(\"\\\\\",\"\\\\\\\\\") ~ \":\" ~ resource.fqn[-2] ~ \".\" ~ resource.fqn[-1] -%}\n    {% else %}\n        {{ exceptions.raise_compiler_error(\n            \"`set_is_excluded()` macro does not support resource type: \" ~ resource_type\n        ) }}\n    {% endif %}\n    \n\n    {#- we exclude the resource if it is from the current project and matches the pattern -#}\n    {%- for exclude_paths_pattern in var('exclude_paths_from_project',[]) -%}\n        {%- set matched_path = re.search(exclude_paths_pattern, resource_path, re.IGNORECASE) -%}\n        {%- if matched_path and resource.package_name == project_name %}\n            {% set ns.exclude = true %}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {#- we exclude the resource if the package if it is listed in `exclude_packages` or if it is \"all\" -#}\n    {%- if (\n        resource.package_name != project_name) \n        and (resource.package_name in  var('exclude_packages',[]) or 'all' in var('exclude_packages',[])) \n    -%}\n        {% set ns.exclude = true %}\n    {%- endif -%}\n\n    {{ return(ns.exclude) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1757238,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.check_model_is_table": {
            "name": "check_model_is_table",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/check_model_is_table.sql",
            "original_file_path": "macros/check_model_is_table.sql",
            "unique_id": "macro.dbt_project_evaluator.check_model_is_table",
            "macro_sql": "{%- macro check_model_is_table(model) -%}\n    {%- if model.config.materialized != 'table' -%}\n        {%- do exceptions.raise_compiler_error(\n            \"Model must use the table materialization. Please check any model overrides.\"\n        ) -%}\n    {%- endif -%}\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1761682,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.calculate_number_lines": {
            "name": "calculate_number_lines",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/calculate_number_lines.sql",
            "original_file_path": "macros/calculate_number_lines.sql",
            "unique_id": "macro.dbt_project_evaluator.calculate_number_lines",
            "macro_sql": "{% macro calculate_number_lines(node) %}\n    {{ return(adapter.dispatch('calculate_number_lines', 'dbt_project_evaluator')(node)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.default__calculate_number_lines"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.176688,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.default__calculate_number_lines": {
            "name": "default__calculate_number_lines",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/calculate_number_lines.sql",
            "original_file_path": "macros/calculate_number_lines.sql",
            "unique_id": "macro.dbt_project_evaluator.default__calculate_number_lines",
            "macro_sql": "{% macro default__calculate_number_lines(node) %}\n\n    {% if node.resource_type == 'model' %}\n\n        {% if execute %}\n        {%- set model_raw_sql = node.raw_sql or node.raw_code -%}\n        {%- else -%}\n        {%- set model_raw_sql = '' -%}\n        {%- endif -%}\n\n        {{ return(model_raw_sql.count(\"\\n\")) + 1 }}\n\n    {% endif %}\n\n    {{ return(0) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1772766,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.recursive_dag": {
            "name": "recursive_dag",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/recursive_dag.sql",
            "original_file_path": "macros/recursive_dag.sql",
            "unique_id": "macro.dbt_project_evaluator.recursive_dag",
            "macro_sql": "{% macro recursive_dag() %}\n    {{ return(adapter.dispatch('recursive_dag', 'dbt_project_evaluator')()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.default__recursive_dag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.181855,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.default__recursive_dag": {
            "name": "default__recursive_dag",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/recursive_dag.sql",
            "original_file_path": "macros/recursive_dag.sql",
            "unique_id": "macro.dbt_project_evaluator.default__recursive_dag",
            "macro_sql": "{% macro default__recursive_dag() %}\n\nwith recursive direct_relationships as (\n    select\n        *\n    from {{ ref('int_direct_relationships') }}\n    where resource_type <> 'test'\n),\n\n-- should this be a fct_ model?\n\n-- recursive CTE\n-- one record for every resource and each of its downstream children (including itself)\nall_relationships (\n    parent_id,\n    parent,\n    parent_resource_type,\n    parent_model_type,\n    parent_materialized,\n    parent_access,\n    parent_is_public,\n    parent_source_name,\n    parent_file_path,\n    parent_directory_path,\n    parent_file_name,\n    parent_is_excluded,\n    child_id,\n    child,\n    child_resource_type,\n    child_model_type,\n    child_materialized,\n    child_access,\n    child_is_public,\n    child_source_name,\n    child_file_path,\n    child_directory_path,\n    child_file_name,\n    child_is_excluded,\n    distance,\n    path,\n    is_dependent_on_chain_of_views\n) as (\n    -- anchor\n    select distinct\n        resource_id as parent_id,\n        resource_name as parent,\n        resource_type as parent_resource_type,\n        model_type as parent_model_type,\n        materialized as parent_materialized,\n        access as parent_access,\n        is_public as parent_is_public,\n        source_name as parent_source_name,\n        file_path as parent_file_path,\n        directory_path as parent_directory_path,\n        file_name as parent_file_name,\n        is_excluded as parent_is_excluded,\n        resource_id as child_id,\n        resource_name as child,\n        resource_type as child_resource_type,\n        model_type as child_model_type,\n        materialized as child_materialized,\n        access as child_access,\n        is_public as child_is_public,\n        source_name as child_source_name,\n        file_path as child_file_path,\n        directory_path as child_directory_path,\n        file_name as child_file_name,\n        is_excluded as child_is_excluded,\n        0 as distance,\n        {{ dbt.array_construct(['resource_name']) }} as path,\n        cast(null as boolean) as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    -- where direct_parent_id is null {# optional lever to change filtering of anchor clause to only include root resources #}\n\n    union all\n\n    -- recursive clause\n    select\n        all_relationships.parent_id as parent_id,\n        all_relationships.parent as parent,\n        all_relationships.parent_resource_type as parent_resource_type,\n        all_relationships.parent_model_type as parent_model_type,\n        all_relationships.parent_materialized as parent_materialized,\n        all_relationships.parent_access as parent_access,\n        all_relationships.parent_is_public as parent_is_public,\n        all_relationships.parent_source_name as parent_source_name,\n        all_relationships.parent_file_path as parent_file_path,\n        all_relationships.parent_directory_path as parent_directory_path,\n        all_relationships.parent_file_name as parent_file_name,\n        all_relationships.parent_is_excluded as parent_is_excluded,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.resource_name as child,\n        direct_relationships.resource_type as child_resource_type,\n        direct_relationships.model_type as child_model_type,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.access as child_access,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.source_name as child_source_name,\n        direct_relationships.file_path as child_file_path,\n        direct_relationships.directory_path as child_directory_path,\n        direct_relationships.file_name as child_file_name,\n        direct_relationships.is_excluded as child_is_excluded,\n        all_relationships.distance+1 as distance,\n        {{ dbt.array_append('all_relationships.path', 'direct_relationships.resource_name') }} as path,\n        case\n            when\n                all_relationships.child_materialized in ('view', 'ephemeral')\n                and coalesce(all_relationships.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    inner join all_relationships\n        on all_relationships.child_id = direct_relationships.direct_parent_id\n\n    {% if var('max_depth_dag') | int > 0 %}\n        {% if var('max_depth_dag') | int < 2 or var('max_depth_dag') | int < var('chained_views_threshold') | int %}\n            {% do exceptions.raise_compiler_error(\n                'Variable max_depth_dag must be at least 2 and must be greater or equal to than chained_views_threshold.'\n                ) %}\n        {% else %}\n        where distance <= {{ var('max_depth_dag')}}\n        {% endif %}\n    {% endif %}\n\n)\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.array_construct",
                    "macro.dbt.array_append"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1832418,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.bigquery__recursive_dag": {
            "name": "bigquery__recursive_dag",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/recursive_dag.sql",
            "original_file_path": "macros/recursive_dag.sql",
            "unique_id": "macro.dbt_project_evaluator.bigquery__recursive_dag",
            "macro_sql": "{% macro bigquery__recursive_dag() %}\n\n-- as of Feb 2022 BigQuery doesn't support with recursive in the same way as other DWs\n{% set max_depth = var('max_depth_dag') | int %}\n{% if max_depth < 2 or max_depth < var('chained_views_threshold') | int %}\n    {% do exceptions.raise_compiler_error(\n        'Variable max_depth_dag must be at least 2 and must be greater or equal to than chained_views_threshold.'\n        ) %}\n{% endif %}\n\nwith direct_relationships as (\n    select\n        *\n    from {{ ref('int_direct_relationships') }}\n    where resource_type <> 'test'\n)\n\n-- must do distinct prior to creating array because BigQuery doesn't support distinct on array type\n, get_distinct as (\n    select distinct\n        resource_id as parent_id,\n        resource_id as child_id,\n        resource_name,\n        materialized as child_materialized,\n        is_public as child_is_public,\n        access as child_access,\n        is_excluded as child_is_excluded\n\n    from direct_relationships\n)\n\n, cte_0 as (\n    select\n        parent_id,\n        child_id,\n        child_materialized,\n        child_is_public,\n        child_access,\n        child_is_excluded,\n        0 as distance,\n        {{ dbt.array_construct(['resource_name']) }} as path,\n        cast(null as boolean) as is_dependent_on_chain_of_views\n    from get_distinct\n)\n\n{% for i in range(1,max_depth) %}\n{% set prev_cte_path %}cte_{{ i - 1 }}.path{% endset %}\n, cte_{{i}} as (\n    select\n        cte_{{i - 1}}.parent_id as parent_id,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.access as child_access,\n        direct_relationships.is_excluded as child_is_excluded,\n        cte_{{i - 1}}.distance+1 as distance,\n        {{ dbt.array_append(prev_cte_path, 'direct_relationships.resource_name') }} as path,\n        case\n            when\n                cte_{{i - 1}}.child_materialized in ('view', 'ephemeral')\n                and coalesce(cte_{{i - 1}}.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n        from direct_relationships\n            inner join cte_{{i - 1}}\n            on cte_{{i - 1}}.child_id = direct_relationships.direct_parent_id\n)\n{% endfor %}\n\n, all_relationships_unioned as (\n    {% for i in range(max_depth) %}\n    select * from cte_{{i}}\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n)\n\n, resource_info as (\n    select * from {{ ref('int_all_graph_resources') }}\n)\n\n\n, all_relationships as (\n    select\n        parent.resource_id as parent_id,\n        parent.resource_name as parent,\n        parent.resource_type as parent_resource_type,\n        parent.model_type as parent_model_type,\n        parent.materialized as parent_materialized,\n        parent.is_public as parent_is_public,\n        parent.access as parent_access,\n        parent.source_name as parent_source_name,\n        parent.file_path as parent_file_path,\n        parent.directory_path as parent_directory_path,\n        parent.file_name as parent_file_name,\n        parent.is_excluded as parent_is_excluded,\n        child.resource_id as child_id,\n        child.resource_name as child,\n        child.resource_type as child_resource_type,\n        child.model_type as child_model_type,\n        child.materialized as child_materialized,\n        child.is_public as child_is_public,\n        child.access as child_access,\n        child.source_name as child_source_name,\n        child.file_path as child_file_path,\n        child.directory_path as child_directory_path,\n        child.file_name as child_file_name,\n        child.is_excluded as child_is_excluded,\n        all_relationships_unioned.distance,\n        all_relationships_unioned.path,\n        all_relationships_unioned.is_dependent_on_chain_of_views\n\n    from all_relationships_unioned\n    left join resource_info as parent\n        on all_relationships_unioned.parent_id = parent.resource_id\n    left join resource_info as child\n        on all_relationships_unioned.child_id = child.resource_id\n)\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.array_construct",
                    "macro.dbt.array_append"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1852388,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.spark__recursive_dag": {
            "name": "spark__recursive_dag",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/recursive_dag.sql",
            "original_file_path": "macros/recursive_dag.sql",
            "unique_id": "macro.dbt_project_evaluator.spark__recursive_dag",
            "macro_sql": "{% macro spark__recursive_dag() %}\n-- as of June 2022 databricks SQL doesn't support \"with recursive\" in the same way as other DWs\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.bigquery__recursive_dag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1854343,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.trino__recursive_dag": {
            "name": "trino__recursive_dag",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/recursive_dag.sql",
            "original_file_path": "macros/recursive_dag.sql",
            "unique_id": "macro.dbt_project_evaluator.trino__recursive_dag",
            "macro_sql": "{% macro trino__recursive_dag() %}\n{#-- Although Trino supports a recursive WITH-queries,\n-- it is less performant than creating CTEs with loops and union them --#}\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.bigquery__recursive_dag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.185621,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.athena__recursive_dag": {
            "name": "athena__recursive_dag",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/recursive_dag.sql",
            "original_file_path": "macros/recursive_dag.sql",
            "unique_id": "macro.dbt_project_evaluator.athena__recursive_dag",
            "macro_sql": "{% macro athena__recursive_dag() %}\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.bigquery__recursive_dag"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1857805,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.is_not_empty_string": {
            "name": "is_not_empty_string",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/is_not_empty_string.sql",
            "original_file_path": "macros/is_not_empty_string.sql",
            "unique_id": "macro.dbt_project_evaluator.is_not_empty_string",
            "macro_sql": "{% macro is_not_empty_string(str) %}\n    {{ return(adapter.dispatch('is_not_empty_string', 'dbt_project_evaluator')(str)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.default__is_not_empty_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1861267,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.default__is_not_empty_string": {
            "name": "default__is_not_empty_string",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/is_not_empty_string.sql",
            "original_file_path": "macros/is_not_empty_string.sql",
            "unique_id": "macro.dbt_project_evaluator.default__is_not_empty_string",
            "macro_sql": "{% macro default__is_not_empty_string(str) %}\n\n    {% if str %}\n    {{ true }}\n    {% else %}\n    {{ false }}\n    {% endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1863654,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.get_directory_pattern": {
            "name": "get_directory_pattern",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/get_directory_pattern.sql",
            "original_file_path": "macros/get_directory_pattern.sql",
            "unique_id": "macro.dbt_project_evaluator.get_directory_pattern",
            "macro_sql": "{% macro get_directory_pattern() %}\n  {%- set env_var_home_exists = env_var(\"HOME\", \"not_set\") != \"not_set\" -%}\n  {%- set on_mac_or_linux = env_var_home_exists and \"\\\\\\\\\" not in env_var(\"HOME\") -%}\n  {%- if on_mac_or_linux -%}\n    {{ return(\"/\") }}\n  {% else %}\n    {{ return(\"\\\\\\\\\") }}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1874225,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.get_regexp_directory_pattern": {
            "name": "get_regexp_directory_pattern",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/get_directory_pattern.sql",
            "original_file_path": "macros/get_directory_pattern.sql",
            "unique_id": "macro.dbt_project_evaluator.get_regexp_directory_pattern",
            "macro_sql": "{% macro get_regexp_directory_pattern() %}\n  {% set regexp_escaped = get_directory_pattern() | replace(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\") %}\n  {% do return(regexp_escaped) %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.get_directory_pattern"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1877162,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.get_dbtreplace_directory_pattern": {
            "name": "get_dbtreplace_directory_pattern",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/get_directory_pattern.sql",
            "original_file_path": "macros/get_directory_pattern.sql",
            "unique_id": "macro.dbt_project_evaluator.get_dbtreplace_directory_pattern",
            "macro_sql": "{% macro get_dbtreplace_directory_pattern() %}\n  {%- set env_var_home_exists = env_var(\"HOME\", \"not_set\") != \"not_set\" -%}\n  {%- set on_mac_or_linux = env_var_home_exists and \"\\\\\\\\\" not in env_var(\"HOME\") -%}\n  {%- if on_mac_or_linux -%}\n    {{ dbt.replace(\"file_path\", \"regexp_replace(file_path,'.*/','')\", \"''\") }}\n  {% else %}\n    {{ dbt.replace(\"file_path\", \"regexp_replace(file_path,'.*\\\\\\\\\\\\\\\\','')\", \"''\") }}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.replace"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1883078,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.type_large_string": {
            "name": "type_large_string",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/unpack/type_large_string.sql",
            "original_file_path": "macros/unpack/type_large_string.sql",
            "unique_id": "macro.dbt_project_evaluator.type_large_string",
            "macro_sql": "{%- macro type_large_string() -%}\n    {{ return(adapter.dispatch('type_large_string', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.default__type_large_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1886492,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.default__type_large_string": {
            "name": "default__type_large_string",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/unpack/type_large_string.sql",
            "original_file_path": "macros/unpack/type_large_string.sql",
            "unique_id": "macro.dbt_project_evaluator.default__type_large_string",
            "macro_sql": "{%- macro default__type_large_string() -%}\n    {{ return(dbt.type_string()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1888204,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.redshift__type_large_string": {
            "name": "redshift__type_large_string",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/unpack/type_large_string.sql",
            "original_file_path": "macros/unpack/type_large_string.sql",
            "unique_id": "macro.dbt_project_evaluator.redshift__type_large_string",
            "macro_sql": "{%- macro redshift__type_large_string() -%}\n    varchar(5000)\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1889186,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.get_exposure_values": {
            "name": "get_exposure_values",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/unpack/get_exposure_values.sql",
            "original_file_path": "macros/unpack/get_exposure_values.sql",
            "unique_id": "macro.dbt_project_evaluator.get_exposure_values",
            "macro_sql": "{%- macro get_exposure_values() -%}\n    {{ return(adapter.dispatch('get_exposure_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.default__get_exposure_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1895401,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.default__get_exposure_values": {
            "name": "default__get_exposure_values",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/unpack/get_exposure_values.sql",
            "original_file_path": "macros/unpack/get_exposure_values.sql",
            "unique_id": "macro.dbt_project_evaluator.default__get_exposure_values",
            "macro_sql": "{%- macro default__get_exposure_values() -%}\n\n    {%- if execute -%}\n\n        {%- set nodes_list = graph.exposures.values() -%}\n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n\n          {%- set values_line = \n            [\n              wrap_string_with_quotes(node.unique_id),\n              wrap_string_with_quotes(node.name),\n              wrap_string_with_quotes(node.resource_type),\n              wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as boolean)\",\n              wrap_string_with_quotes(node.type),\n              wrap_string_with_quotes(node.maturity),\n              wrap_string_with_quotes(node.package_name),\n              wrap_string_with_quotes(node.url),\n              wrap_string_with_quotes(dbt.escape_single_quotes(node.owner.name)),\n              wrap_string_with_quotes(dbt.escape_single_quotes(node.owner.email)),\n              wrap_string_with_quotes(node.meta | tojson)\n            ]\n          %}\n\n          {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.wrap_string_with_quotes",
                    "macro.dbt_project_evaluator.is_not_empty_string",
                    "macro.dbt.escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1907475,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.get_column_values": {
            "name": "get_column_values",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/unpack/get_column_values.sql",
            "original_file_path": "macros/unpack/get_column_values.sql",
            "unique_id": "macro.dbt_project_evaluator.get_column_values",
            "macro_sql": "{%- macro get_column_values(node_type) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_project_evaluator')(node_type)) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.default__get_column_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1917462,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.default__get_column_values": {
            "name": "default__get_column_values",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/unpack/get_column_values.sql",
            "original_file_path": "macros/unpack/get_column_values.sql",
            "unique_id": "macro.dbt_project_evaluator.default__get_column_values",
            "macro_sql": "{%- macro default__get_column_values(node_type) -%}\n\n    {%- if execute -%}\n        {%- if node_type == 'nodes' %}\n            {% set nodes_list = graph.nodes.values() %}   \n        {%- elif node_type == 'sources' -%}\n            {% set nodes_list = graph.sources.values() %}\n        {%- else -%}\n            {{ exceptions.raise_compiler_error(\"node_type needs to be either nodes or sources, got \" ~ node_type) }}\n        {% endif -%}\n\n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n            {%- for column in node.columns.values() -%}\n\n                {%- set values_line  = \n                    [\n                        wrap_string_with_quotes(node.unique_id),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.name)),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.description)),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.data_type)),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(tojson(column.constraints))),\n                        column.constraints | selectattr('type', 'equalto', 'not_null') | list | length > 0,\n                        column.constraints | length,\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.quote))\n                    ]\n                %}\n\n                {%- do values.append(values_line) -%}\n\n            {%- endfor -%}\n        {%- endfor -%}\n    {{ return(values) }}\n\n    {%- endif -%}\n  \n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.wrap_string_with_quotes",
                    "macro.dbt.escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1934953,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.get_metric_values": {
            "name": "get_metric_values",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/unpack/get_metric_values.sql",
            "original_file_path": "macros/unpack/get_metric_values.sql",
            "unique_id": "macro.dbt_project_evaluator.get_metric_values",
            "macro_sql": "{%- macro get_metric_values() -%}\n    {{ return(adapter.dispatch('get_metric_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.default__get_metric_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1941683,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.default__get_metric_values": {
            "name": "default__get_metric_values",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/unpack/get_metric_values.sql",
            "original_file_path": "macros/unpack/get_metric_values.sql",
            "unique_id": "macro.dbt_project_evaluator.default__get_metric_values",
            "macro_sql": "{%- macro default__get_metric_values() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.metrics.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n   \n          {%- set values_line = \n            [\n            wrap_string_with_quotes(node.unique_id),\n            wrap_string_with_quotes(node.name),\n            wrap_string_with_quotes(node.resource_type),\n            wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n            \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as boolean)\",\n            wrap_string_with_quotes(node.type),\n            wrap_string_with_quotes(dbt.escape_single_quotes(node.label)),\n            wrap_string_with_quotes(node.package_name),\n            wrap_string_with_quotes(dbt.escape_single_quotes(tojson(node.filter))),\n            wrap_string_with_quotes(node.type_params.measure.name),\n            wrap_string_with_quotes(node.type_params.measure.alias),\n            wrap_string_with_quotes(node.type_params.numerator | tojson),\n            wrap_string_with_quotes(node.type_params.denominator | tojson),\n            wrap_string_with_quotes(node.type_params.expr),\n            wrap_string_with_quotes(node.type_params.window | tojson),\n            wrap_string_with_quotes(node.type_params.grain_to_date),\n            wrap_string_with_quotes(node.meta | tojson)\n            ]\n          %}\n\n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.wrap_string_with_quotes",
                    "macro.dbt_project_evaluator.is_not_empty_string",
                    "macro.dbt.escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.196196,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.get_relationship_values": {
            "name": "get_relationship_values",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/unpack/get_relationship_values.sql",
            "original_file_path": "macros/unpack/get_relationship_values.sql",
            "unique_id": "macro.dbt_project_evaluator.get_relationship_values",
            "macro_sql": "{%- macro get_relationship_values(node_type) -%}\n    {{ return(adapter.dispatch('get_relationship_values', 'dbt_project_evaluator')(node_type)) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.default__get_relationship_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1978562,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.default__get_relationship_values": {
            "name": "default__get_relationship_values",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/unpack/get_relationship_values.sql",
            "original_file_path": "macros/unpack/get_relationship_values.sql",
            "unique_id": "macro.dbt_project_evaluator.default__get_relationship_values",
            "macro_sql": "{%- macro default__get_relationship_values(node_type) -%}\n\n    {%- if execute -%}\n        {%- if node_type == 'nodes' %}\n            {% set nodes_list = graph.nodes.values() %}   \n        {%- elif node_type == 'exposures' -%}\n            {% set nodes_list = graph.exposures.values() %}\n        {%- elif node_type == 'metrics' -%}\n            {% set nodes_list = graph.metrics.values() %}\n        {%- else -%}\n            {{ exceptions.raise_compiler_error(\"node_type needs to be either nodes, exposures or metrics, got \" ~ node_type) }}\n        {% endif -%}\n        \n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n\n            {%- if node.get('depends_on',{}).get('nodes',[]) |length == 0 -%}\n\n                {%- set values_line = \n                  [\n                    \"cast('\" ~ node.unique_id ~ \"' as \" ~ dbt.type_string() ~ \")\",\n                    \"cast(NULL as \" ~ dbt.type_string() ~ \")\",\n                    \"FALSE\",\n                  ] \n                %}\n                  \n                {%- do values.append(values_line) -%}\n\n            {%- else -%}       \n\n                {%- for parent in node.get('depends_on',{}).get('nodes',[]) -%}\n\n                    {%- set values_line = \n                        [\n                            \"cast('\" ~ node.unique_id ~ \"' as \" ~ dbt.type_string() ~ \")\",\n                            \"cast('\" ~ parent ~ \"' as \" ~ dbt.type_string() ~ \")\",\n                            \"\" ~ loop.last ~ \"\" if node.unique_id.split('.')[0] == 'test' else \"FALSE\"\n                        ]\n                    %}\n                      \n                    {%- do values.append(values_line) -%}\n\n                {%- endfor -%}\n\n            {%- endif -%}\n\n        {%- endfor -%}\n    \n    {{ return(values) }}\n\n    {%- endif -%}\n  \n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.1996791,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.get_source_values": {
            "name": "get_source_values",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/unpack/get_source_values.sql",
            "original_file_path": "macros/unpack/get_source_values.sql",
            "unique_id": "macro.dbt_project_evaluator.get_source_values",
            "macro_sql": "{%- macro get_source_values() -%}\n    {{ return(adapter.dispatch('get_source_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.default__get_source_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2003956,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.default__get_source_values": {
            "name": "default__get_source_values",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/unpack/get_source_values.sql",
            "original_file_path": "macros/unpack/get_source_values.sql",
            "unique_id": "macro.dbt_project_evaluator.default__get_source_values",
            "macro_sql": "{%- macro default__get_source_values() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.sources.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n\n        {%- set exclude_source = dbt_project_evaluator.set_is_excluded(node, resource_type=\"source\") -%}\n\n         {%- set values_line = \n            [\n              wrap_string_with_quotes(node.unique_id),\n              wrap_string_with_quotes(node.name),\n              wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n              wrap_string_with_quotes(node.alias),\n              wrap_string_with_quotes(node.resource_type),\n              wrap_string_with_quotes(node.source_name),\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.source_description) | trim ~ \" as boolean)\",\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as boolean)\",\n              \"cast(\" ~ node.config.enabled ~ \" as boolean)\",\n              wrap_string_with_quotes(node.loaded_at_field | replace(\"'\", \"_\")),\n              wrap_string_with_quotes(node.database),\n              wrap_string_with_quotes(node.schema),\n              wrap_string_with_quotes(node.package_name),\n              wrap_string_with_quotes(node.loader),\n              wrap_string_with_quotes(node.identifier),\n              wrap_string_with_quotes(node.meta | tojson),\n              \"cast(\" ~ exclude_source ~ \" as boolean)\",\n            ]\n        %}\n            \n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n\n    {{ return(values) }}\n \n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.set_is_excluded",
                    "macro.dbt_project_evaluator.wrap_string_with_quotes",
                    "macro.dbt_project_evaluator.is_not_empty_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2019742,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.get_node_values": {
            "name": "get_node_values",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/unpack/get_node_values.sql",
            "original_file_path": "macros/unpack/get_node_values.sql",
            "unique_id": "macro.dbt_project_evaluator.get_node_values",
            "macro_sql": "{%- macro get_node_values() -%}\n    {{ return(adapter.dispatch('get_node_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.default__get_node_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2032006,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.default__get_node_values": {
            "name": "default__get_node_values",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/unpack/get_node_values.sql",
            "original_file_path": "macros/unpack/get_node_values.sql",
            "unique_id": "macro.dbt_project_evaluator.default__get_node_values",
            "macro_sql": "{%- macro default__get_node_values() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.nodes.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n\n        {%- set hard_coded_references = dbt_project_evaluator.find_all_hard_coded_references(node) -%}\n        {%- set number_lines = dbt_project_evaluator.calculate_number_lines(node) -%}\n        {%- set sql_complexity = dbt_project_evaluator.calculate_sql_complexity(node) -%}\n        {%- set contract = node.contract.enforced if node.contract else false -%}\n        {%- set exclude_node = dbt_project_evaluator.set_is_excluded(node, resource_type=\"node\") -%}\n\n\n        {%- set values_line  = \n            [\n                wrap_string_with_quotes(node.unique_id),\n                wrap_string_with_quotes(node.name),\n                wrap_string_with_quotes(node.resource_type),\n                wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n                \"cast(\" ~ node.config.enabled | trim ~ \" as boolean)\",\n                wrap_string_with_quotes(node.config.materialized),\n                wrap_string_with_quotes(node.config.on_schema_change),\n                wrap_string_with_quotes(node.group),\n                wrap_string_with_quotes(node.access),\n                wrap_string_with_quotes(node.latest_version),\n                wrap_string_with_quotes(node.version),\n                wrap_string_with_quotes(node.deprecation_date),\n                \"cast(\" ~ contract | trim  ~ \" as boolean)\",\n                node.columns.values() | list | length,\n                node.columns.values() | list | selectattr('description') | list | length,\n                wrap_string_with_quotes(node.database),\n                wrap_string_with_quotes(node.schema),\n                wrap_string_with_quotes(node.package_name),\n                wrap_string_with_quotes(node.alias),\n                \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as boolean)\",\n                \"''\" if not node.column_name else wrap_string_with_quotes(dbt.escape_single_quotes(node.column_name)),\n                wrap_string_with_quotes(node.meta | tojson),\n                wrap_string_with_quotes(dbt.escape_single_quotes(hard_coded_references)),\n                number_lines,\n                sql_complexity,\n                wrap_string_with_quotes(node.get('depends_on',{}).get('macros',[]) | tojson),\n                \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.test_metadata) | trim ~ \" as boolean)\",\n                \"cast(\" ~ exclude_node ~ \" as boolean)\",\n            ]\n        %}\n\n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.find_all_hard_coded_references",
                    "macro.dbt_project_evaluator.calculate_number_lines",
                    "macro.dbt_project_evaluator.calculate_sql_complexity",
                    "macro.dbt_project_evaluator.set_is_excluded",
                    "macro.dbt_project_evaluator.wrap_string_with_quotes",
                    "macro.dbt_project_evaluator.is_not_empty_string",
                    "macro.dbt.escape_single_quotes"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2066395,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.get_resource_values": {
            "name": "get_resource_values",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/unpack/get_resource_values.sql",
            "original_file_path": "macros/unpack/get_resource_values.sql",
            "unique_id": "macro.dbt_project_evaluator.get_resource_values",
            "macro_sql": "{% macro get_resource_values(resource=None, relationships=None, columns=None) %}\n  {% if relationships %}\n    {{ return(adapter.dispatch('get_relationship_values', 'dbt_project_evaluator')(node_type=resource)) }}\n  {% elif columns %}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_project_evaluator')(node_type=resource)) }}\n  {% elif resource == 'exposures' %}\n    {{ return(adapter.dispatch('get_exposure_values', 'dbt_project_evaluator')()) }}\n  {% elif resource == 'sources' %}\n    {{ return(adapter.dispatch('get_source_values', 'dbt_project_evaluator')()) }}\n  {% elif resource == 'metrics' %}\n    {{ return(adapter.dispatch('get_metric_values', 'dbt_project_evaluator')()) }}\n  {% elif resource == 'nodes' %}\n    {{ return(adapter.dispatch('get_node_values', 'dbt_project_evaluator')()) }}\n  {% endif %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_project_evaluator.get_relationship_values",
                    "macro.dbt_project_evaluator.default__get_relationship_values",
                    "macro.dbt_project_evaluator.get_column_values",
                    "macro.dbt_project_evaluator.default__get_column_values",
                    "macro.dbt_project_evaluator.get_exposure_values",
                    "macro.dbt_project_evaluator.default__get_exposure_values",
                    "macro.dbt_project_evaluator.get_source_values",
                    "macro.dbt_project_evaluator.default__get_source_values",
                    "macro.dbt_project_evaluator.get_metric_values",
                    "macro.dbt_project_evaluator.default__get_metric_values",
                    "macro.dbt_project_evaluator.get_node_values",
                    "macro.dbt_project_evaluator.default__get_node_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.208276,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.duckdb__split_part": {
            "name": "duckdb__split_part",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/cross_db_shim/duckdb_shims.sql",
            "original_file_path": "macros/cross_db_shim/duckdb_shims.sql",
            "unique_id": "macro.dbt_project_evaluator.duckdb__split_part",
            "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) -%}\n    str_split({{string_text}}, {{delimiter_text}})[{{part_number}}]\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2087398,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.duckdb__listagg": {
            "name": "duckdb__listagg",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/cross_db_shim/duckdb_shims.sql",
            "original_file_path": "macros/cross_db_shim/duckdb_shims.sql",
            "unique_id": "macro.dbt_project_evaluator.duckdb__listagg",
            "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {# \n        This is not the full support for listagg on DuckDB but it allows tests to pass/fail for this package\n        - order_by_clause does not work, so we need to sort the CTE before calling listagg\n        - support for limit_num was not added\n    #}\n\n    {% if limit_num -%}\n        {%- do exceptions.raise_compiler_error(\"listagg on DuckDB doesn't support limit_num\") -%}\n    {%- endif %}\n\n    string_agg(\n        {{ measure }}\n        , {{ delimiter_text }}\n        {{ order_by_clause }}\n        )\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2091553,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.redshift__type_string": {
            "name": "redshift__type_string",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/cross_db_shim/redshift_shims.sql",
            "original_file_path": "macros/cross_db_shim/redshift_shims.sql",
            "unique_id": "macro.dbt_project_evaluator.redshift__type_string",
            "macro_sql": "{%- macro redshift__type_string() -%}\n  {{ \"VARCHAR(600)\" }}\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.209354,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.spark__escape_single_quotes": {
            "name": "spark__escape_single_quotes",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/cross_db_shim/spark_shims.sql",
            "original_file_path": "macros/cross_db_shim/spark_shims.sql",
            "unique_id": "macro.dbt_project_evaluator.spark__escape_single_quotes",
            "macro_sql": "{% macro spark__escape_single_quotes(expression) -%}\n    {{ expression | replace(\"'\",\"\\\\'\") }}  \n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2096035,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.print_dbt_project_evaluator_issues": {
            "name": "print_dbt_project_evaluator_issues",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "macros/on-run-end/print_dbt_project_evaluator_issues.sql",
            "original_file_path": "macros/on-run-end/print_dbt_project_evaluator_issues.sql",
            "unique_id": "macro.dbt_project_evaluator.print_dbt_project_evaluator_issues",
            "macro_sql": "{% macro print_dbt_project_evaluator_issues(format='table', quote=\"\") %}\n\n  {%- if flags.WHICH in [\"build\",\"test\"] -%}\n    {{ print(\"\\n### List of issues raised by dbt_project_evaluator ###\") }}\n\n    {#-\n      if you create custom dbt_project_evaluator rules on your package using the test `dbt_project_evaluator.is_empty`,\n      the test name should start with the same name as the default.\n    -#}\n    {% set test_name_prefix_of_custom_rules = var(\n      \"test_name_prefix_of_custom_rules\",\n      default=\"dbt_project_evaluator_is_empty_\",\n    ) %}\n\n    {% for result in results | selectattr('failures') | selectattr('failures', '>', 0) %}\n      \n      {% set is_test = result.node.config.materialized == \"test\" %}\n      {% set package_name = result.node.package_name %}\n      {% set resource_name = result.node.name %}\n      {% if is_test and (\n        package_name == \"dbt_project_evaluator\"\n        or resource_name.startswith(test_name_prefix_of_custom_rules)\n      ) %}\n        \n        {{ print(\"\\n-- \" ~ result.node.fqn | join(\".\") ~ \" --\") }}\n\n        {% set unique_id_model_checked = result.node.depends_on.nodes[0] %}\n\n        {% set model_details = graph[\"nodes\"][unique_id_model_checked] %}\n        {% set name_model_checked = model_details.alias %}\n        {% set model_schema = quote ~ model_details.schema ~ quote %}\n        {% set model_database = quote ~ model_details.database ~ quote if model_details.database  else None %}\n        {% set db_schema = model_database ~ \".\" ~ model_schema if model_database else model_schema %}\n\n        {% set sql_statement %}\n        select * from {{db_schema}}.{{name_model_checked}}\n        {% endset %}\n\n        {% set query_results = run_query(sql_statement) %}\n        {% if format == 'table' %}\n          {{ print(query_results.print_table(max_column_width=80, max_rows=1000) or \"\") }}\n        {% elif format == 'csv' %}  \n          {{ print(query_results.print_csv() or \"\") }}\n        {% else %}\n            {%- do exceptions.raise_compiler_error(\"format can only be 'table' or 'csv'\") -%}\n        {% endif %}\n\n\n      {% endif %}\n\n    {% endfor %}\n\n    {{ print(\"\\n\") }}\n  {%- endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2136712,
            "supported_languages": null
        },
        "macro.dbt_project_evaluator.test_is_empty": {
            "name": "test_is_empty",
            "resource_type": "macro",
            "package_name": "dbt_project_evaluator",
            "path": "tests/generic/test_is_empty.sql",
            "original_file_path": "tests/generic/test_is_empty.sql",
            "unique_id": "macro.dbt_project_evaluator.test_is_empty",
            "macro_sql": "{% test is_empty(model) %}\n\n    {{ config (\n        severity = 'warn',\n        fail_calc = \"n_records\"\n    ) }}\n\n    select count(*) as n_records\n    from {{ model }}\n\n{% endtest %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.214116,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_host": {
            "name": "get_url_host",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_host.sql",
            "original_file_path": "macros/web/get_url_host.sql",
            "unique_id": "macro.dbt_utils.get_url_host",
            "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_host"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2145722,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_host": {
            "name": "default__get_url_host",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_host.sql",
            "original_file_path": "macros/web/get_url_host.sql",
            "unique_id": "macro.dbt_utils.default__get_url_host",
            "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.split_part",
                    "macro.dbt.replace",
                    "macro.dbt.safe_cast",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2155535,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_parameter": {
            "name": "get_url_parameter",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_parameter.sql",
            "original_file_path": "macros/web/get_url_parameter.sql",
            "unique_id": "macro.dbt_utils.get_url_parameter",
            "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_parameter"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2161684,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_parameter": {
            "name": "default__get_url_parameter",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_parameter.sql",
            "original_file_path": "macros/web/get_url_parameter.sql",
            "unique_id": "macro.dbt_utils.default__get_url_parameter",
            "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.split_part"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2166247,
            "supported_languages": null
        },
        "macro.dbt_utils.get_url_path": {
            "name": "get_url_path",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_path.sql",
            "original_file_path": "macros/web/get_url_path.sql",
            "unique_id": "macro.dbt_utils.get_url_path",
            "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_url_path"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2172127,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_url_path": {
            "name": "default__get_url_path",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/web/get_url_path.sql",
            "original_file_path": "macros/web/get_url_path.sql",
            "unique_id": "macro.dbt_utils.default__get_url_path",
            "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.replace",
                    "macro.dbt.position",
                    "macro.dbt.split_part",
                    "macro.dbt.right",
                    "macro.dbt.length",
                    "macro.dbt.safe_cast",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2180388,
            "supported_languages": null
        },
        "macro.dbt_utils.unpivot": {
            "name": "unpivot",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/unpivot.sql",
            "original_file_path": "macros/sql/unpivot.sql",
            "unique_id": "macro.dbt_utils.unpivot",
            "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__unpivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2193651,
            "supported_languages": null
        },
        "macro.dbt_utils.default__unpivot": {
            "name": "default__unpivot",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/unpivot.sql",
            "original_file_path": "macros/sql/unpivot.sql",
            "unique_id": "macro.dbt_utils.default__unpivot",
            "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.type_string",
                    "macro.dbt.cast_bool_to_text"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2225354,
            "supported_languages": null
        },
        "macro.dbt_utils.group_by": {
            "name": "group_by",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/groupby.sql",
            "original_file_path": "macros/sql/groupby.sql",
            "unique_id": "macro.dbt_utils.group_by",
            "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__group_by"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2229204,
            "supported_languages": null
        },
        "macro.dbt_utils.default__group_by": {
            "name": "default__group_by",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/groupby.sql",
            "original_file_path": "macros/sql/groupby.sql",
            "unique_id": "macro.dbt_utils.default__group_by",
            "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2232332,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_add": {
            "name": "safe_add",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/safe_add.sql",
            "original_file_path": "macros/sql/safe_add.sql",
            "unique_id": "macro.dbt_utils.safe_add",
            "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_add"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2236495,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_add": {
            "name": "default__safe_add",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/safe_add.sql",
            "original_file_path": "macros/sql/safe_add.sql",
            "unique_id": "macro.dbt_utils.default__safe_add",
            "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2242866,
            "supported_languages": null
        },
        "macro.dbt_utils.get_relations_by_prefix": {
            "name": "get_relations_by_prefix",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_relations_by_prefix.sql",
            "original_file_path": "macros/sql/get_relations_by_prefix.sql",
            "unique_id": "macro.dbt_utils.get_relations_by_prefix",
            "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_prefix"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2249646,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_relations_by_prefix": {
            "name": "default__get_relations_by_prefix",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_relations_by_prefix.sql",
            "original_file_path": "macros/sql/get_relations_by_prefix.sql",
            "unique_id": "macro.dbt_utils.default__get_relations_by_prefix",
            "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.226098,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_divide": {
            "name": "safe_divide",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/safe_divide.sql",
            "original_file_path": "macros/sql/safe_divide.sql",
            "unique_id": "macro.dbt_utils.safe_divide",
            "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_divide"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2264726,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_divide": {
            "name": "default__safe_divide",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/safe_divide.sql",
            "original_file_path": "macros/sql/safe_divide.sql",
            "unique_id": "macro.dbt_utils.default__safe_divide",
            "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2266445,
            "supported_languages": null
        },
        "macro.dbt_utils.nullcheck_table": {
            "name": "nullcheck_table",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/nullcheck_table.sql",
            "original_file_path": "macros/sql/nullcheck_table.sql",
            "unique_id": "macro.dbt_utils.nullcheck_table",
            "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck_table"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2269988,
            "supported_languages": null
        },
        "macro.dbt_utils.default__nullcheck_table": {
            "name": "default__nullcheck_table",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/nullcheck_table.sql",
            "original_file_path": "macros/sql/nullcheck_table.sql",
            "unique_id": "macro.dbt_utils.default__nullcheck_table",
            "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2273967,
            "supported_languages": null
        },
        "macro.dbt_utils.get_column_values": {
            "name": "get_column_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_column_values.sql",
            "original_file_path": "macros/sql/get_column_values.sql",
            "unique_id": "macro.dbt_utils.get_column_values",
            "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_column_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2290788,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_column_values": {
            "name": "default__get_column_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_column_values.sql",
            "original_file_path": "macros/sql/get_column_values.sql",
            "unique_id": "macro.dbt_utils.default__get_column_values",
            "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.load_relation",
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.231176,
            "supported_languages": null
        },
        "macro.dbt_utils.nullcheck": {
            "name": "nullcheck",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/nullcheck.sql",
            "original_file_path": "macros/sql/nullcheck.sql",
            "unique_id": "macro.dbt_utils.nullcheck",
            "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__nullcheck"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2315989,
            "supported_languages": null
        },
        "macro.dbt_utils.default__nullcheck": {
            "name": "default__nullcheck",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/nullcheck.sql",
            "original_file_path": "macros/sql/nullcheck.sql",
            "unique_id": "macro.dbt_utils.default__nullcheck",
            "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2320368,
            "supported_languages": null
        },
        "macro.dbt_utils.union_relations": {
            "name": "union_relations",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/union.sql",
            "original_file_path": "macros/sql/union.sql",
            "unique_id": "macro.dbt_utils.union_relations",
            "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__union_relations"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2348983,
            "supported_languages": null
        },
        "macro.dbt_utils.default__union_relations": {
            "name": "default__union_relations",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/union.sql",
            "original_file_path": "macros/sql/union.sql",
            "unique_id": "macro.dbt_utils.default__union_relations",
            "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.string_literal",
                    "macro.dbt.type_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2400327,
            "supported_languages": null
        },
        "macro.dbt_utils.pivot": {
            "name": "pivot",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/pivot.sql",
            "original_file_path": "macros/sql/pivot.sql",
            "unique_id": "macro.dbt_utils.pivot",
            "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pivot"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2415047,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pivot": {
            "name": "default__pivot",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/pivot.sql",
            "original_file_path": "macros/sql/pivot.sql",
            "unique_id": "macro.dbt_utils.default__pivot",
            "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.escape_single_quotes",
                    "macro.dbt_utils.slugify"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2430387,
            "supported_languages": null
        },
        "macro.dbt_utils.width_bucket": {
            "name": "width_bucket",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/width_bucket.sql",
            "original_file_path": "macros/sql/width_bucket.sql",
            "unique_id": "macro.dbt_utils.width_bucket",
            "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__width_bucket"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2440276,
            "supported_languages": null
        },
        "macro.dbt_utils.default__width_bucket": {
            "name": "default__width_bucket",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/width_bucket.sql",
            "original_file_path": "macros/sql/width_bucket.sql",
            "unique_id": "macro.dbt_utils.default__width_bucket",
            "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.safe_cast",
                    "macro.dbt.type_numeric"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2446837,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__width_bucket": {
            "name": "snowflake__width_bucket",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/width_bucket.sql",
            "original_file_path": "macros/sql/width_bucket.sql",
            "unique_id": "macro.dbt_utils.snowflake__width_bucket",
            "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.244943,
            "supported_languages": null
        },
        "macro.dbt_utils.safe_subtract": {
            "name": "safe_subtract",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/safe_subtract.sql",
            "original_file_path": "macros/sql/safe_subtract.sql",
            "unique_id": "macro.dbt_utils.safe_subtract",
            "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__safe_subtract"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2454174,
            "supported_languages": null
        },
        "macro.dbt_utils.default__safe_subtract": {
            "name": "default__safe_subtract",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/safe_subtract.sql",
            "original_file_path": "macros/sql/safe_subtract.sql",
            "unique_id": "macro.dbt_utils.default__safe_subtract",
            "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2461278,
            "supported_languages": null
        },
        "macro.dbt_utils.get_tables_by_prefix_sql": {
            "name": "get_tables_by_prefix_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_prefix_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
            "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql",
            "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_prefix_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.246597,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_tables_by_prefix_sql": {
            "name": "default__get_tables_by_prefix_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_prefix_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
            "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql",
            "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2469275,
            "supported_languages": null
        },
        "macro.dbt_utils.get_table_types_sql": {
            "name": "get_table_types_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_table_types_sql.sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "unique_id": "macro.dbt_utils.get_table_types_sql",
            "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2474344,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_table_types_sql": {
            "name": "default__get_table_types_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_table_types_sql.sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "unique_id": "macro.dbt_utils.default__get_table_types_sql",
            "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2476015,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__get_table_types_sql": {
            "name": "postgres__get_table_types_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_table_types_sql.sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "unique_id": "macro.dbt_utils.postgres__get_table_types_sql",
            "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2477741,
            "supported_languages": null
        },
        "macro.dbt_utils.databricks__get_table_types_sql": {
            "name": "databricks__get_table_types_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_table_types_sql.sql",
            "original_file_path": "macros/sql/get_table_types_sql.sql",
            "unique_id": "macro.dbt_utils.databricks__get_table_types_sql",
            "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2479439,
            "supported_languages": null
        },
        "macro.dbt_utils.deduplicate": {
            "name": "deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.deduplicate",
            "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__deduplicate"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2487562,
            "supported_languages": null
        },
        "macro.dbt_utils.default__deduplicate": {
            "name": "default__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.default__deduplicate",
            "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.249059,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__deduplicate": {
            "name": "redshift__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.redshift__deduplicate",
            "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.249294,
            "supported_languages": null
        },
        "macro.dbt_utils.postgres__deduplicate": {
            "name": "postgres__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.postgres__deduplicate",
            "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2495618,
            "supported_languages": null
        },
        "macro.dbt_utils.snowflake__deduplicate": {
            "name": "snowflake__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.snowflake__deduplicate",
            "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2497933,
            "supported_languages": null
        },
        "macro.dbt_utils.databricks__deduplicate": {
            "name": "databricks__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.databricks__deduplicate",
            "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.250487,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__deduplicate": {
            "name": "bigquery__deduplicate",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/deduplicate.sql",
            "original_file_path": "macros/sql/deduplicate.sql",
            "unique_id": "macro.dbt_utils.bigquery__deduplicate",
            "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2507405,
            "supported_languages": null
        },
        "macro.dbt_utils.star": {
            "name": "star",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/star.sql",
            "original_file_path": "macros/sql/star.sql",
            "unique_id": "macro.dbt_utils.star",
            "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__star"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2520664,
            "supported_languages": null
        },
        "macro.dbt_utils.default__star": {
            "name": "default__star",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/star.sql",
            "original_file_path": "macros/sql/star.sql",
            "unique_id": "macro.dbt_utils.default__star",
            "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt_utils.get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2543838,
            "supported_languages": null
        },
        "macro.dbt_utils.get_relations_by_pattern": {
            "name": "get_relations_by_pattern",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_relations_by_pattern.sql",
            "original_file_path": "macros/sql/get_relations_by_pattern.sql",
            "unique_id": "macro.dbt_utils.get_relations_by_pattern",
            "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_relations_by_pattern"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2552466,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_relations_by_pattern": {
            "name": "default__get_relations_by_pattern",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_relations_by_pattern.sql",
            "original_file_path": "macros/sql/get_relations_by_pattern.sql",
            "unique_id": "macro.dbt_utils.default__get_relations_by_pattern",
            "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt_utils.get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2563639,
            "supported_languages": null
        },
        "macro.dbt_utils.get_tables_by_pattern_sql": {
            "name": "get_tables_by_pattern_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql",
            "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_tables_by_pattern_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2596512,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_tables_by_pattern_sql": {
            "name": "default__get_tables_by_pattern_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql",
            "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.260213,
            "supported_languages": null
        },
        "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {
            "name": "redshift__get_tables_by_pattern_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql",
            "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2611928,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
            "name": "bigquery__get_tables_by_pattern_sql",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql",
            "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._bigquery__get_matching_schemata",
                    "macro.dbt_utils.get_table_types_sql"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2626727,
            "supported_languages": null
        },
        "macro.dbt_utils._bigquery__get_matching_schemata": {
            "name": "_bigquery__get_matching_schemata",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_tables_by_pattern_sql.sql",
            "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
            "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata",
            "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.run_query"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2634099,
            "supported_languages": null
        },
        "macro.dbt_utils.get_filtered_columns_in_relation": {
            "name": "get_filtered_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_filtered_columns_in_relation.sql",
            "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql",
            "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation",
            "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_filtered_columns_in_relation"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.264021,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_filtered_columns_in_relation": {
            "name": "default__get_filtered_columns_in_relation",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_filtered_columns_in_relation.sql",
            "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql",
            "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation",
            "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2649896,
            "supported_languages": null
        },
        "macro.dbt_utils.degrees_to_radians": {
            "name": "degrees_to_radians",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "unique_id": "macro.dbt_utils.degrees_to_radians",
            "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2661495,
            "supported_languages": null
        },
        "macro.dbt_utils.haversine_distance": {
            "name": "haversine_distance",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "unique_id": "macro.dbt_utils.haversine_distance",
            "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__haversine_distance"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2664845,
            "supported_languages": null
        },
        "macro.dbt_utils.default__haversine_distance": {
            "name": "default__haversine_distance",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "unique_id": "macro.dbt_utils.default__haversine_distance",
            "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2671328,
            "supported_languages": null
        },
        "macro.dbt_utils.bigquery__haversine_distance": {
            "name": "bigquery__haversine_distance",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/haversine_distance.sql",
            "original_file_path": "macros/sql/haversine_distance.sql",
            "unique_id": "macro.dbt_utils.bigquery__haversine_distance",
            "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.degrees_to_radians"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2681844,
            "supported_languages": null
        },
        "macro.dbt_utils.get_query_results_as_dict": {
            "name": "get_query_results_as_dict",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_query_results_as_dict.sql",
            "original_file_path": "macros/sql/get_query_results_as_dict.sql",
            "unique_id": "macro.dbt_utils.get_query_results_as_dict",
            "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_query_results_as_dict"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2686377,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_query_results_as_dict": {
            "name": "default__get_query_results_as_dict",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_query_results_as_dict.sql",
            "original_file_path": "macros/sql/get_query_results_as_dict.sql",
            "unique_id": "macro.dbt_utils.default__get_query_results_as_dict",
            "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.269344,
            "supported_languages": null
        },
        "macro.dbt_utils.get_powers_of_two": {
            "name": "get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "unique_id": "macro.dbt_utils.get_powers_of_two",
            "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2703714,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_powers_of_two": {
            "name": "default__get_powers_of_two",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "unique_id": "macro.dbt_utils.default__get_powers_of_two",
            "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2709668,
            "supported_languages": null
        },
        "macro.dbt_utils.generate_series": {
            "name": "generate_series",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "unique_id": "macro.dbt_utils.generate_series",
            "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__generate_series"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2712145,
            "supported_languages": null
        },
        "macro.dbt_utils.default__generate_series": {
            "name": "default__generate_series",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/generate_series.sql",
            "original_file_path": "macros/sql/generate_series.sql",
            "unique_id": "macro.dbt_utils.default__generate_series",
            "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.get_powers_of_two"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2718954,
            "supported_languages": null
        },
        "macro.dbt_utils.get_single_value": {
            "name": "get_single_value",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_single_value.sql",
            "original_file_path": "macros/sql/get_single_value.sql",
            "unique_id": "macro.dbt_utils.get_single_value",
            "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_single_value"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2724578,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_single_value": {
            "name": "default__get_single_value",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/get_single_value.sql",
            "original_file_path": "macros/sql/get_single_value.sql",
            "unique_id": "macro.dbt_utils.default__get_single_value",
            "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2738326,
            "supported_languages": null
        },
        "macro.dbt_utils.get_intervals_between": {
            "name": "get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "unique_id": "macro.dbt_utils.get_intervals_between",
            "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__get_intervals_between"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2746737,
            "supported_languages": null
        },
        "macro.dbt_utils.default__get_intervals_between": {
            "name": "default__get_intervals_between",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "unique_id": "macro.dbt_utils.default__get_intervals_between",
            "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.statement",
                    "macro.dbt.datediff"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2754142,
            "supported_languages": null
        },
        "macro.dbt_utils.date_spine": {
            "name": "date_spine",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "unique_id": "macro.dbt_utils.date_spine",
            "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__date_spine"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2757185,
            "supported_languages": null
        },
        "macro.dbt_utils.default__date_spine": {
            "name": "default__date_spine",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/date_spine.sql",
            "original_file_path": "macros/sql/date_spine.sql",
            "unique_id": "macro.dbt_utils.default__date_spine",
            "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.generate_series",
                    "macro.dbt_utils.get_intervals_between",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2762191,
            "supported_languages": null
        },
        "macro.dbt_utils.generate_surrogate_key": {
            "name": "generate_surrogate_key",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/generate_surrogate_key.sql",
            "original_file_path": "macros/sql/generate_surrogate_key.sql",
            "unique_id": "macro.dbt_utils.generate_surrogate_key",
            "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__generate_surrogate_key"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2769701,
            "supported_languages": null
        },
        "macro.dbt_utils.default__generate_surrogate_key": {
            "name": "default__generate_surrogate_key",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/generate_surrogate_key.sql",
            "original_file_path": "macros/sql/generate_surrogate_key.sql",
            "unique_id": "macro.dbt_utils.default__generate_surrogate_key",
            "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": [
                    "macro.dbt.type_string",
                    "macro.dbt.hash",
                    "macro.dbt.concat"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2781572,
            "supported_languages": null
        },
        "macro.dbt_utils.surrogate_key": {
            "name": "surrogate_key",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/surrogate_key.sql",
            "original_file_path": "macros/sql/surrogate_key.sql",
            "unique_id": "macro.dbt_utils.surrogate_key",
            "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__surrogate_key"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.278688,
            "supported_languages": null
        },
        "macro.dbt_utils.default__surrogate_key": {
            "name": "default__surrogate_key",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/sql/surrogate_key.sql",
            "original_file_path": "macros/sql/surrogate_key.sql",
            "unique_id": "macro.dbt_utils.default__surrogate_key",
            "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.27898,
            "supported_languages": null
        },
        "macro.dbt_utils.test_equality": {
            "name": "test_equality",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/equality.sql",
            "original_file_path": "macros/generic_tests/equality.sql",
            "unique_id": "macro.dbt_utils.test_equality",
            "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2809289,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_equality": {
            "name": "default__test_equality",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/equality.sql",
            "original_file_path": "macros/generic_tests/equality.sql",
            "unique_id": "macro.dbt_utils.default__test_equality",
            "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils._is_relation",
                    "macro.dbt_utils._is_ephemeral",
                    "macro.dbt.type_numeric",
                    "macro.dbt.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2865329,
            "supported_languages": null
        },
        "macro.dbt_utils.test_at_least_one": {
            "name": "test_at_least_one",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/at_least_one.sql",
            "original_file_path": "macros/generic_tests/at_least_one.sql",
            "unique_id": "macro.dbt_utils.test_at_least_one",
            "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_at_least_one"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2874033,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_at_least_one": {
            "name": "default__test_at_least_one",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/at_least_one.sql",
            "original_file_path": "macros/generic_tests/at_least_one.sql",
            "unique_id": "macro.dbt_utils.default__test_at_least_one",
            "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.288516,
            "supported_languages": null
        },
        "macro.dbt_utils.test_sequential_values": {
            "name": "test_sequential_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/sequential_values.sql",
            "original_file_path": "macros/generic_tests/sequential_values.sql",
            "unique_id": "macro.dbt_utils.test_sequential_values",
            "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_sequential_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2895465,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_sequential_values": {
            "name": "default__test_sequential_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/sequential_values.sql",
            "original_file_path": "macros/generic_tests/sequential_values.sql",
            "unique_id": "macro.dbt_utils.default__test_sequential_values",
            "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.slugify",
                    "macro.dbt.type_timestamp",
                    "macro.dbt.dateadd"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2906594,
            "supported_languages": null
        },
        "macro.dbt_utils.test_fewer_rows_than": {
            "name": "test_fewer_rows_than",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/fewer_rows_than.sql",
            "original_file_path": "macros/generic_tests/fewer_rows_than.sql",
            "unique_id": "macro.dbt_utils.test_fewer_rows_than",
            "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_fewer_rows_than"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2917714,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_fewer_rows_than": {
            "name": "default__test_fewer_rows_than",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/fewer_rows_than.sql",
            "original_file_path": "macros/generic_tests/fewer_rows_than.sql",
            "unique_id": "macro.dbt_utils.default__test_fewer_rows_than",
            "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2935739,
            "supported_languages": null
        },
        "macro.dbt_utils.test_cardinality_equality": {
            "name": "test_cardinality_equality",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/cardinality_equality.sql",
            "original_file_path": "macros/generic_tests/cardinality_equality.sql",
            "unique_id": "macro.dbt_utils.test_cardinality_equality",
            "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_cardinality_equality"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2941754,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_cardinality_equality": {
            "name": "default__test_cardinality_equality",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/cardinality_equality.sql",
            "original_file_path": "macros/generic_tests/cardinality_equality.sql",
            "unique_id": "macro.dbt_utils.default__test_cardinality_equality",
            "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.except"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2945929,
            "supported_languages": null
        },
        "macro.dbt_utils.test_mutually_exclusive_ranges": {
            "name": "test_mutually_exclusive_ranges",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/mutually_exclusive_ranges.sql",
            "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql",
            "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges",
            "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_mutually_exclusive_ranges"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.2985485,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
            "name": "default__test_mutually_exclusive_ranges",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/mutually_exclusive_ranges.sql",
            "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql",
            "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges",
            "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3004742,
            "supported_languages": null
        },
        "macro.dbt_utils.test_equal_rowcount": {
            "name": "test_equal_rowcount",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/equal_rowcount.sql",
            "original_file_path": "macros/generic_tests/equal_rowcount.sql",
            "unique_id": "macro.dbt_utils.test_equal_rowcount",
            "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_equal_rowcount"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.301447,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_equal_rowcount": {
            "name": "default__test_equal_rowcount",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/equal_rowcount.sql",
            "original_file_path": "macros/generic_tests/equal_rowcount.sql",
            "unique_id": "macro.dbt_utils.default__test_equal_rowcount",
            "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3033319,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_accepted_values": {
            "name": "test_not_accepted_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_accepted_values.sql",
            "original_file_path": "macros/generic_tests/not_accepted_values.sql",
            "unique_id": "macro.dbt_utils.test_not_accepted_values",
            "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_accepted_values"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.304204,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_accepted_values": {
            "name": "default__test_not_accepted_values",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_accepted_values.sql",
            "original_file_path": "macros/generic_tests/not_accepted_values.sql",
            "unique_id": "macro.dbt_utils.default__test_not_accepted_values",
            "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3051047,
            "supported_languages": null
        },
        "macro.dbt_utils.test_recency": {
            "name": "test_recency",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/recency.sql",
            "original_file_path": "macros/generic_tests/recency.sql",
            "unique_id": "macro.dbt_utils.test_recency",
            "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_recency"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3060923,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_recency": {
            "name": "default__test_recency",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/recency.sql",
            "original_file_path": "macros/generic_tests/recency.sql",
            "unique_id": "macro.dbt_utils.default__test_recency",
            "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.dateadd",
                    "macro.dbt.current_timestamp",
                    "macro.dbt.type_timestamp"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3070416,
            "supported_languages": null
        },
        "macro.dbt_utils.test_relationships_where": {
            "name": "test_relationships_where",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/relationships_where.sql",
            "original_file_path": "macros/generic_tests/relationships_where.sql",
            "unique_id": "macro.dbt_utils.test_relationships_where",
            "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_relationships_where"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3076913,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_relationships_where": {
            "name": "default__test_relationships_where",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/relationships_where.sql",
            "original_file_path": "macros/generic_tests/relationships_where.sql",
            "unique_id": "macro.dbt_utils.default__test_relationships_where",
            "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3081603,
            "supported_languages": null
        },
        "macro.dbt_utils.test_unique_combination_of_columns": {
            "name": "test_unique_combination_of_columns",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/unique_combination_of_columns.sql",
            "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql",
            "unique_id": "macro.dbt_utils.test_unique_combination_of_columns",
            "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_unique_combination_of_columns"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3089578,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_unique_combination_of_columns": {
            "name": "default__test_unique_combination_of_columns",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/unique_combination_of_columns.sql",
            "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql",
            "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns",
            "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3098264,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_empty_string": {
            "name": "test_not_empty_string",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_empty_string.sql",
            "original_file_path": "macros/generic_tests/not_empty_string.sql",
            "unique_id": "macro.dbt_utils.test_not_empty_string",
            "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_empty_string"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3103728,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_empty_string": {
            "name": "default__test_not_empty_string",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_empty_string.sql",
            "original_file_path": "macros/generic_tests/not_empty_string.sql",
            "unique_id": "macro.dbt_utils.default__test_not_empty_string",
            "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3107412,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_constant": {
            "name": "test_not_constant",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_constant.sql",
            "original_file_path": "macros/generic_tests/not_constant.sql",
            "unique_id": "macro.dbt_utils.test_not_constant",
            "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_constant"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3112614,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_constant": {
            "name": "default__test_not_constant",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_constant.sql",
            "original_file_path": "macros/generic_tests/not_constant.sql",
            "unique_id": "macro.dbt_utils.default__test_not_constant",
            "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.312362,
            "supported_languages": null
        },
        "macro.dbt_utils.test_accepted_range": {
            "name": "test_accepted_range",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/accepted_range.sql",
            "original_file_path": "macros/generic_tests/accepted_range.sql",
            "unique_id": "macro.dbt_utils.test_accepted_range",
            "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_accepted_range"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3130903,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_accepted_range": {
            "name": "default__test_accepted_range",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/accepted_range.sql",
            "original_file_path": "macros/generic_tests/accepted_range.sql",
            "unique_id": "macro.dbt_utils.default__test_accepted_range",
            "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.313712,
            "supported_languages": null
        },
        "macro.dbt_utils.test_expression_is_true": {
            "name": "test_expression_is_true",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/expression_is_true.sql",
            "original_file_path": "macros/generic_tests/expression_is_true.sql",
            "unique_id": "macro.dbt_utils.test_expression_is_true",
            "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_expression_is_true"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3141806,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_expression_is_true": {
            "name": "default__test_expression_is_true",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/expression_is_true.sql",
            "original_file_path": "macros/generic_tests/expression_is_true.sql",
            "unique_id": "macro.dbt_utils.default__test_expression_is_true",
            "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt.should_store_failures"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3147006,
            "supported_languages": null
        },
        "macro.dbt_utils.test_not_null_proportion": {
            "name": "test_not_null_proportion",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_null_proportion.sql",
            "original_file_path": "macros/generic_tests/not_null_proportion.sql",
            "unique_id": "macro.dbt_utils.test_not_null_proportion",
            "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__test_not_null_proportion"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3153763,
            "supported_languages": null
        },
        "macro.dbt_utils.default__test_not_null_proportion": {
            "name": "default__test_not_null_proportion",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/generic_tests/not_null_proportion.sql",
            "original_file_path": "macros/generic_tests/not_null_proportion.sql",
            "unique_id": "macro.dbt_utils.default__test_not_null_proportion",
            "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3163345,
            "supported_languages": null
        },
        "macro.dbt_utils._is_ephemeral": {
            "name": "_is_ephemeral",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/_is_ephemeral.sql",
            "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql",
            "unique_id": "macro.dbt_utils._is_ephemeral",
            "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.317377,
            "supported_languages": null
        },
        "macro.dbt_utils.slugify": {
            "name": "slugify",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/slugify.sql",
            "original_file_path": "macros/jinja_helpers/slugify.sql",
            "unique_id": "macro.dbt_utils.slugify",
            "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3186123,
            "supported_languages": null
        },
        "macro.dbt_utils.log_info": {
            "name": "log_info",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/log_info.sql",
            "original_file_path": "macros/jinja_helpers/log_info.sql",
            "unique_id": "macro.dbt_utils.log_info",
            "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__log_info"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3189456,
            "supported_languages": null
        },
        "macro.dbt_utils.default__log_info": {
            "name": "default__log_info",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/log_info.sql",
            "original_file_path": "macros/jinja_helpers/log_info.sql",
            "unique_id": "macro.dbt_utils.default__log_info",
            "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.31917,
            "supported_languages": null
        },
        "macro.dbt_utils._is_relation": {
            "name": "_is_relation",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/_is_relation.sql",
            "original_file_path": "macros/jinja_helpers/_is_relation.sql",
            "unique_id": "macro.dbt_utils._is_relation",
            "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3196867,
            "supported_languages": null
        },
        "macro.dbt_utils.pretty_time": {
            "name": "pretty_time",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/pretty_time.sql",
            "original_file_path": "macros/jinja_helpers/pretty_time.sql",
            "unique_id": "macro.dbt_utils.pretty_time",
            "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3200076,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pretty_time": {
            "name": "default__pretty_time",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/pretty_time.sql",
            "original_file_path": "macros/jinja_helpers/pretty_time.sql",
            "unique_id": "macro.dbt_utils.default__pretty_time",
            "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": []
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3203545,
            "supported_languages": null
        },
        "macro.dbt_utils.pretty_log_format": {
            "name": "pretty_log_format",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/pretty_log_format.sql",
            "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
            "unique_id": "macro.dbt_utils.pretty_log_format",
            "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.default__pretty_log_format"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3210392,
            "supported_languages": null
        },
        "macro.dbt_utils.default__pretty_log_format": {
            "name": "default__pretty_log_format",
            "resource_type": "macro",
            "package_name": "dbt_utils",
            "path": "macros/jinja_helpers/pretty_log_format.sql",
            "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
            "unique_id": "macro.dbt_utils.default__pretty_log_format",
            "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}",
            "depends_on": {
                "macros": [
                    "macro.dbt_utils.pretty_time"
                ]
            },
            "description": "",
            "meta": {},
            "docs": {
                "show": true,
                "node_color": null
            },
            "patch_path": null,
            "arguments": [],
            "created_at": 1721827581.3213038,
            "supported_languages": null
        }
    },
    "docs": {
        "doc.dbt.__overview__": {
            "name": "__overview__",
            "resource_type": "doc",
            "package_name": "dbt",
            "path": "overview.md",
            "original_file_path": "docs/overview.md",
            "unique_id": "doc.dbt.__overview__",
            "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"
        }
    },
    "exposures": {},
    "metrics": {},
    "groups": {},
    "selectors": {},
    "disabled": {},
    "parent_map": {
        "model.dbt_bouncer_test_project.stg_model_1": [],
        "model.dbt_bouncer_test_project.stg_model_2": [],
        "model.dbt_bouncer_test_project.int_model_1": [],
        "model.dbt_project_evaluator.stg_nodes": [],
        "model.dbt_project_evaluator.stg_node_relationships": [
            "model.dbt_project_evaluator.base_node_relationships"
        ],
        "model.dbt_project_evaluator.stg_metrics": [],
        "model.dbt_project_evaluator.stg_exposures": [],
        "model.dbt_project_evaluator.stg_sources": [],
        "model.dbt_project_evaluator.stg_columns": [
            "model.dbt_project_evaluator.base_node_columns",
            "model.dbt_project_evaluator.base_source_columns"
        ],
        "model.dbt_project_evaluator.stg_exposure_relationships": [
            "model.dbt_project_evaluator.base_exposure_relationships"
        ],
        "model.dbt_project_evaluator.stg_metric_relationships": [
            "model.dbt_project_evaluator.base_metric_relationships"
        ],
        "model.dbt_project_evaluator.base_source_columns": [],
        "model.dbt_project_evaluator.base_exposure_relationships": [],
        "model.dbt_project_evaluator.base_node_columns": [],
        "model.dbt_project_evaluator.base_node_relationships": [],
        "model.dbt_project_evaluator.base_metric_relationships": [],
        "model.dbt_project_evaluator.stg_naming_convention_folders": [],
        "model.dbt_project_evaluator.stg_naming_convention_prefixes": [],
        "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": [
            "model.dbt_project_evaluator.int_all_dag_relationships",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": [
            "model.dbt_project_evaluator.int_all_dag_relationships",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_root_models": [
            "model.dbt_project_evaluator.int_all_dag_relationships",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_unused_sources": [
            "model.dbt_project_evaluator.int_all_dag_relationships",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_hard_coded_references": [
            "model.dbt_project_evaluator.int_all_graph_resources",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_direct_join_to_source": [
            "model.dbt_project_evaluator.int_all_dag_relationships",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_model_fanout": [
            "model.dbt_project_evaluator.int_all_dag_relationships",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_source_fanout": [
            "model.dbt_project_evaluator.int_all_dag_relationships",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_duplicate_sources": [
            "model.dbt_project_evaluator.int_all_graph_resources"
        ],
        "model.dbt_project_evaluator.fct_staging_dependent_on_staging": [
            "model.dbt_project_evaluator.int_all_dag_relationships",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_too_many_joins": [
            "model.dbt_project_evaluator.int_all_dag_relationships",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": [
            "model.dbt_project_evaluator.int_all_dag_relationships",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_multiple_sources_joined": [
            "model.dbt_project_evaluator.int_all_dag_relationships",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_model_naming_conventions": [
            "model.dbt_project_evaluator.int_all_graph_resources",
            "model.dbt_project_evaluator.stg_naming_convention_prefixes",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_model_directories": [
            "model.dbt_project_evaluator.int_all_dag_relationships",
            "model.dbt_project_evaluator.int_all_graph_resources",
            "model.dbt_project_evaluator.stg_naming_convention_folders",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_test_directories": [
            "model.dbt_project_evaluator.int_all_graph_resources",
            "model.dbt_project_evaluator.int_direct_relationships",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_source_directories": [
            "model.dbt_project_evaluator.int_all_graph_resources",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_test_coverage": [
            "model.dbt_project_evaluator.int_model_test_summary"
        ],
        "model.dbt_project_evaluator.fct_missing_primary_key_tests": [
            "model.dbt_project_evaluator.int_model_test_summary",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.int_model_test_summary": [
            "model.dbt_project_evaluator.base_node_columns",
            "model.dbt_project_evaluator.int_all_graph_resources",
            "model.dbt_project_evaluator.int_direct_relationships"
        ],
        "model.dbt_project_evaluator.fct_undocumented_models": [
            "model.dbt_project_evaluator.int_all_graph_resources",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_documentation_coverage": [
            "model.dbt_project_evaluator.int_all_graph_resources"
        ],
        "model.dbt_project_evaluator.fct_undocumented_source_tables": [
            "model.dbt_project_evaluator.int_all_graph_resources",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_undocumented_sources": [
            "model.dbt_project_evaluator.int_all_graph_resources",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.int_all_dag_relationships": [
            "model.dbt_project_evaluator.int_direct_relationships"
        ],
        "model.dbt_project_evaluator.int_direct_relationships": [
            "model.dbt_project_evaluator.int_all_graph_resources",
            "model.dbt_project_evaluator.stg_exposure_relationships",
            "model.dbt_project_evaluator.stg_metric_relationships",
            "model.dbt_project_evaluator.stg_node_relationships"
        ],
        "model.dbt_project_evaluator.int_all_graph_resources": [
            "model.dbt_project_evaluator.stg_exposures",
            "model.dbt_project_evaluator.stg_metrics",
            "model.dbt_project_evaluator.stg_naming_convention_folders",
            "model.dbt_project_evaluator.stg_naming_convention_prefixes",
            "model.dbt_project_evaluator.stg_nodes",
            "model.dbt_project_evaluator.stg_sources"
        ],
        "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models": [
            "model.dbt_project_evaluator.int_all_dag_relationships",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_public_models_without_contract": [
            "model.dbt_project_evaluator.int_all_graph_resources",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_undocumented_public_models": [
            "model.dbt_project_evaluator.int_all_graph_resources",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_exposure_parents_materializations": [
            "model.dbt_project_evaluator.int_all_dag_relationships",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "model.dbt_project_evaluator.fct_chained_views_dependencies": [
            "model.dbt_project_evaluator.int_all_dag_relationships",
            "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"
        ],
        "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": [],
        "test.dbt_bouncer_test_project.not_null_stg_model_1_id.595dde4889": [
            "model.dbt_bouncer_test_project.stg_model_1"
        ],
        "test.dbt_bouncer_test_project.unique_stg_model_2_id.7a2824b68f": [
            "model.dbt_bouncer_test_project.stg_model_2"
        ],
        "test.dbt_bouncer_test_project.not_null_int_model_1_id.da20a8abb3": [
            "model.dbt_bouncer_test_project.int_model_1"
        ],
        "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": [
            "model.dbt_project_evaluator.fct_direct_join_to_source"
        ],
        "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31": [
            "model.dbt_project_evaluator.fct_duplicate_sources"
        ],
        "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": [
            "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source"
        ],
        "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": [
            "model.dbt_project_evaluator.fct_model_fanout"
        ],
        "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": [
            "model.dbt_project_evaluator.fct_multiple_sources_joined"
        ],
        "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": [
            "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts"
        ],
        "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": [
            "model.dbt_project_evaluator.fct_root_models"
        ],
        "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": [
            "model.dbt_project_evaluator.fct_source_fanout"
        ],
        "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": [
            "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate"
        ],
        "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": [
            "model.dbt_project_evaluator.fct_staging_dependent_on_staging"
        ],
        "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": [
            "model.dbt_project_evaluator.fct_unused_sources"
        ],
        "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": [
            "model.dbt_project_evaluator.fct_exposure_parents_materializations"
        ],
        "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113": [
            "model.dbt_project_evaluator.fct_hard_coded_references"
        ],
        "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535": [
            "model.dbt_project_evaluator.fct_too_many_joins"
        ],
        "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": [
            "model.dbt_project_evaluator.fct_model_directories"
        ],
        "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": [
            "model.dbt_project_evaluator.fct_model_naming_conventions"
        ],
        "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": [
            "model.dbt_project_evaluator.fct_source_directories"
        ],
        "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": [
            "model.dbt_project_evaluator.fct_test_directories"
        ],
        "test.dbt_project_evaluator.valid_test_coverage.df03f31e09": [
            "model.dbt_project_evaluator.fct_test_coverage"
        ],
        "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": [
            "model.dbt_project_evaluator.fct_missing_primary_key_tests"
        ],
        "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7": [
            "model.dbt_project_evaluator.fct_documentation_coverage"
        ],
        "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": [
            "model.dbt_project_evaluator.fct_undocumented_models"
        ],
        "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166": [
            "model.dbt_project_evaluator.fct_undocumented_source_tables"
        ],
        "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235": [
            "model.dbt_project_evaluator.fct_undocumented_sources"
        ],
        "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0": [
            "model.dbt_project_evaluator.fct_public_models_without_contract"
        ],
        "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938": [
            "model.dbt_project_evaluator.fct_undocumented_public_models"
        ],
        "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e": [
            "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models"
        ],
        "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33": [
            "model.dbt_project_evaluator.fct_chained_views_dependencies"
        ],
        "source.dbt_bouncer_test_project.source.source_1": [],
        "source.dbt_bouncer_test_project.source.source_2": []
    },
    "child_map": {
        "model.dbt_bouncer_test_project.stg_model_1": [
            "test.dbt_bouncer_test_project.not_null_stg_model_1_id.595dde4889"
        ],
        "model.dbt_bouncer_test_project.stg_model_2": [
            "test.dbt_bouncer_test_project.unique_stg_model_2_id.7a2824b68f"
        ],
        "model.dbt_bouncer_test_project.int_model_1": [
            "test.dbt_bouncer_test_project.not_null_int_model_1_id.da20a8abb3"
        ],
        "model.dbt_project_evaluator.stg_nodes": [
            "model.dbt_project_evaluator.int_all_graph_resources"
        ],
        "model.dbt_project_evaluator.stg_node_relationships": [
            "model.dbt_project_evaluator.int_direct_relationships"
        ],
        "model.dbt_project_evaluator.stg_metrics": [
            "model.dbt_project_evaluator.int_all_graph_resources"
        ],
        "model.dbt_project_evaluator.stg_exposures": [
            "model.dbt_project_evaluator.int_all_graph_resources"
        ],
        "model.dbt_project_evaluator.stg_sources": [
            "model.dbt_project_evaluator.int_all_graph_resources"
        ],
        "model.dbt_project_evaluator.stg_columns": [],
        "model.dbt_project_evaluator.stg_exposure_relationships": [
            "model.dbt_project_evaluator.int_direct_relationships"
        ],
        "model.dbt_project_evaluator.stg_metric_relationships": [
            "model.dbt_project_evaluator.int_direct_relationships"
        ],
        "model.dbt_project_evaluator.base_source_columns": [
            "model.dbt_project_evaluator.stg_columns"
        ],
        "model.dbt_project_evaluator.base_exposure_relationships": [
            "model.dbt_project_evaluator.stg_exposure_relationships"
        ],
        "model.dbt_project_evaluator.base_node_columns": [
            "model.dbt_project_evaluator.int_model_test_summary",
            "model.dbt_project_evaluator.stg_columns"
        ],
        "model.dbt_project_evaluator.base_node_relationships": [
            "model.dbt_project_evaluator.stg_node_relationships"
        ],
        "model.dbt_project_evaluator.base_metric_relationships": [
            "model.dbt_project_evaluator.stg_metric_relationships"
        ],
        "model.dbt_project_evaluator.stg_naming_convention_folders": [
            "model.dbt_project_evaluator.fct_model_directories",
            "model.dbt_project_evaluator.int_all_graph_resources"
        ],
        "model.dbt_project_evaluator.stg_naming_convention_prefixes": [
            "model.dbt_project_evaluator.fct_model_naming_conventions",
            "model.dbt_project_evaluator.int_all_graph_resources"
        ],
        "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": [
            "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f"
        ],
        "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": [
            "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d"
        ],
        "model.dbt_project_evaluator.fct_root_models": [
            "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1"
        ],
        "model.dbt_project_evaluator.fct_unused_sources": [
            "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8"
        ],
        "model.dbt_project_evaluator.fct_hard_coded_references": [
            "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113"
        ],
        "model.dbt_project_evaluator.fct_direct_join_to_source": [
            "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028"
        ],
        "model.dbt_project_evaluator.fct_model_fanout": [
            "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95"
        ],
        "model.dbt_project_evaluator.fct_source_fanout": [
            "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722"
        ],
        "model.dbt_project_evaluator.fct_duplicate_sources": [
            "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31"
        ],
        "model.dbt_project_evaluator.fct_staging_dependent_on_staging": [
            "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca"
        ],
        "model.dbt_project_evaluator.fct_too_many_joins": [
            "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535"
        ],
        "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": [
            "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f"
        ],
        "model.dbt_project_evaluator.fct_multiple_sources_joined": [
            "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817"
        ],
        "model.dbt_project_evaluator.fct_model_naming_conventions": [
            "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2"
        ],
        "model.dbt_project_evaluator.fct_model_directories": [
            "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db"
        ],
        "model.dbt_project_evaluator.fct_test_directories": [
            "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433"
        ],
        "model.dbt_project_evaluator.fct_source_directories": [
            "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c"
        ],
        "model.dbt_project_evaluator.fct_test_coverage": [
            "test.dbt_project_evaluator.valid_test_coverage.df03f31e09"
        ],
        "model.dbt_project_evaluator.fct_missing_primary_key_tests": [
            "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0"
        ],
        "model.dbt_project_evaluator.int_model_test_summary": [
            "model.dbt_project_evaluator.fct_missing_primary_key_tests",
            "model.dbt_project_evaluator.fct_test_coverage"
        ],
        "model.dbt_project_evaluator.fct_undocumented_models": [
            "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c"
        ],
        "model.dbt_project_evaluator.fct_documentation_coverage": [
            "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7"
        ],
        "model.dbt_project_evaluator.fct_undocumented_source_tables": [
            "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166"
        ],
        "model.dbt_project_evaluator.fct_undocumented_sources": [
            "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235"
        ],
        "model.dbt_project_evaluator.int_all_dag_relationships": [
            "model.dbt_project_evaluator.fct_chained_views_dependencies",
            "model.dbt_project_evaluator.fct_direct_join_to_source",
            "model.dbt_project_evaluator.fct_exposure_parents_materializations",
            "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models",
            "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source",
            "model.dbt_project_evaluator.fct_model_directories",
            "model.dbt_project_evaluator.fct_model_fanout",
            "model.dbt_project_evaluator.fct_multiple_sources_joined",
            "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts",
            "model.dbt_project_evaluator.fct_root_models",
            "model.dbt_project_evaluator.fct_source_fanout",
            "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate",
            "model.dbt_project_evaluator.fct_staging_dependent_on_staging",
            "model.dbt_project_evaluator.fct_too_many_joins",
            "model.dbt_project_evaluator.fct_unused_sources"
        ],
        "model.dbt_project_evaluator.int_direct_relationships": [
            "model.dbt_project_evaluator.fct_test_directories",
            "model.dbt_project_evaluator.int_all_dag_relationships",
            "model.dbt_project_evaluator.int_model_test_summary"
        ],
        "model.dbt_project_evaluator.int_all_graph_resources": [
            "model.dbt_project_evaluator.fct_documentation_coverage",
            "model.dbt_project_evaluator.fct_duplicate_sources",
            "model.dbt_project_evaluator.fct_hard_coded_references",
            "model.dbt_project_evaluator.fct_model_directories",
            "model.dbt_project_evaluator.fct_model_naming_conventions",
            "model.dbt_project_evaluator.fct_public_models_without_contract",
            "model.dbt_project_evaluator.fct_source_directories",
            "model.dbt_project_evaluator.fct_test_directories",
            "model.dbt_project_evaluator.fct_undocumented_models",
            "model.dbt_project_evaluator.fct_undocumented_public_models",
            "model.dbt_project_evaluator.fct_undocumented_source_tables",
            "model.dbt_project_evaluator.fct_undocumented_sources",
            "model.dbt_project_evaluator.int_direct_relationships",
            "model.dbt_project_evaluator.int_model_test_summary"
        ],
        "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models": [
            "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e"
        ],
        "model.dbt_project_evaluator.fct_public_models_without_contract": [
            "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0"
        ],
        "model.dbt_project_evaluator.fct_undocumented_public_models": [
            "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938"
        ],
        "model.dbt_project_evaluator.fct_exposure_parents_materializations": [
            "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422"
        ],
        "model.dbt_project_evaluator.fct_chained_views_dependencies": [
            "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33"
        ],
        "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": [
            "model.dbt_project_evaluator.fct_chained_views_dependencies",
            "model.dbt_project_evaluator.fct_direct_join_to_source",
            "model.dbt_project_evaluator.fct_exposure_parents_materializations",
            "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models",
            "model.dbt_project_evaluator.fct_hard_coded_references",
            "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source",
            "model.dbt_project_evaluator.fct_missing_primary_key_tests",
            "model.dbt_project_evaluator.fct_model_directories",
            "model.dbt_project_evaluator.fct_model_fanout",
            "model.dbt_project_evaluator.fct_model_naming_conventions",
            "model.dbt_project_evaluator.fct_multiple_sources_joined",
            "model.dbt_project_evaluator.fct_public_models_without_contract",
            "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts",
            "model.dbt_project_evaluator.fct_root_models",
            "model.dbt_project_evaluator.fct_source_directories",
            "model.dbt_project_evaluator.fct_source_fanout",
            "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate",
            "model.dbt_project_evaluator.fct_staging_dependent_on_staging",
            "model.dbt_project_evaluator.fct_test_directories",
            "model.dbt_project_evaluator.fct_too_many_joins",
            "model.dbt_project_evaluator.fct_undocumented_models",
            "model.dbt_project_evaluator.fct_undocumented_public_models",
            "model.dbt_project_evaluator.fct_undocumented_source_tables",
            "model.dbt_project_evaluator.fct_undocumented_sources",
            "model.dbt_project_evaluator.fct_unused_sources"
        ],
        "test.dbt_bouncer_test_project.not_null_stg_model_1_id.595dde4889": [],
        "test.dbt_bouncer_test_project.unique_stg_model_2_id.7a2824b68f": [],
        "test.dbt_bouncer_test_project.not_null_int_model_1_id.da20a8abb3": [],
        "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": [],
        "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31": [],
        "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": [],
        "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": [],
        "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": [],
        "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": [],
        "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": [],
        "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": [],
        "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": [],
        "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": [],
        "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": [],
        "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": [],
        "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113": [],
        "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535": [],
        "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": [],
        "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": [],
        "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": [],
        "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": [],
        "test.dbt_project_evaluator.valid_test_coverage.df03f31e09": [],
        "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": [],
        "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7": [],
        "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": [],
        "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166": [],
        "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235": [],
        "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0": [],
        "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938": [],
        "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e": [],
        "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33": [],
        "source.dbt_bouncer_test_project.source.source_1": [],
        "source.dbt_bouncer_test_project.source.source_2": []
    },
    "group_map": {},
    "saved_queries": {},
    "semantic_models": {},
    "unit_tests": {}
}