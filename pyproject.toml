[tool.black]
line-length = 99
include = '/project$|\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.eggs
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.vscode
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.coverage.report]
exclude_lines = [
    "if TYPE_CHECKING:",
]

[tool.dbt-bouncer]
dbt_artifacts_dir = "dbt_project/target"

[[tool.dbt-bouncer.manifest_checks]]
name = "check_model_has_unique_test"

[[tool.dbt-bouncer.manifest_checks]]
name = "check_model_names"
include = "^staging"
model_name_pattern = "^stg_"

[tool.isort]
profile = "black"

[tool.mypy]
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
plugins = [
  "pydantic.mypy"
]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "dbt_artifacts_parser.*"

[tool.poetry]
authors = ["Padraic Slattery <pgoslatara@gmail.com>"]
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
description = "Configure and enforce conventions for your dbt project."
keywords = [
  "python",
  "cli",
  "dbt",
  "CI/CD",
]
license ="MIT"
maintainers = ["Padraic Slattery <pgoslatara@gmail.com>"]
name = "dbt-bouncer"
packages = [
    {include = "dbt_bouncer", from = "src"},
]
readme = "README.md"
repository = "https://github.com/godatadriven/dbt-bouncer"
version = "1.1.0"

[tool.poetry.dependencies]
python = ">=3.8.1,<3.13"
click = "<9"
dbt-artifacts-parser = "^0"
jinja2 = "^3"
jinja2-simple-tags = "^0"
levenshtein = "^0"
progress = "^1"
pydantic = "^2"
pyyaml = "<7"
requests = "^2"
tabulate = "^0"
toml = "^0"
semver = "^3"

[tool.poetry.group.dev.dependencies]
autoflake = "^2"
black = "^24"
dbt-core = "^1"
dbt-duckdb = "^1"
isort = "^5"
mypy = "^1"
pex = "<2.18"
pre-commit = "^3"
pytest = "<9"
pytest-cov = "^5"
pytest-xdist = "^3"
ruff = "^0"
sh = "^2"
"shandy-sqlfmt" = {version = "^0", extras=["shandy-sqlfmt[jinjafmt]"]}

[tool.poetry.group.docs.dependencies]
mike = "^2"
mkdocs = "^1"
mkdocstrings = {extras = ["python"], version = "^0"}
mkdocs-click = "^0"
mkdocs-git-revision-date-localized-plugin = "^1"
mkdocs-material = "^9"
pymdown-extensions = {extras = ["details"], version = "^10"}

[tool.poetry.scripts]
dbt-bouncer = "dbt_bouncer.main:cli"

[tool.poetry_bumpversion.file."./src/dbt_bouncer/version.py"]
[tool.poetry_bumpversion.file."action.yml"]

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
line-length = 88
indent-width = 4
target-version = "py38"

[tool.ruff.lint]
ignore = ["COM812", "D100", "D203", "D213", "D406", "D407", "D409", "E501", "G004", "S101"]
preview=true
select = ["A", "ARG", "B", "C4", "COM", "D", "DOC", "E", "EXE", "F", "I", "ICN", "LOG", "G", "N", "PT", "PTH", "Q", "RUF", "S", "SIM", "T20", "TCH", "TID", "W"]
unfixable = ["B"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"src/dbt_bouncer/checks/*" = ["ARG001", "D101", "D401", "D417"]
"src/dbt_bouncer/parsers.py" = ["TCH002"]
"tests/*" = ["D100", "D103", "D104", "E402"]

[tool.ruff.format]
docstring-code-format = false
docstring-code-line-length = "dynamic"
indent-style = "space"
line-ending = "auto"
quote-style = "double"
skip-magic-trailing-comma = false

[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"
